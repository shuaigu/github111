{"version":3,"names":["_sfc_main","components","data","shareTitle","shareImageUrl","shareUserId","defaultShareImage","dynamicShareImage","linkShareImage","videoUrl","videoVisible","isVideoPlaying","videoContext","userClosedVideo","userArticleData","userArticleInfo","avatarUrl","nickName","mobile","pageNo","pageSize","status","contentdown","contentrefresh","userStore","avatarClickEnabled","isRefreshing","refreshStartTime","isScrollLoading","totalArticleCount","videoUrlCache","props","userId","String","computed","articleTotal","onLoad","options","_this","store_user","useUserInfoStore","getSendOnState","getArticelList","then","common_vendor","index","showShareMenu","withShareTicket","menus","$on","articleId","updateLocalViewCount","__f__","newState","preloadDefaultShareImage","$off","clearTimeout","scrollToLowerTimer","beforeDestroy","onReachBottom","scrolltolower","methods","_methods","_this2","_asyncToGenerator2","_regeneratorRuntime2","mark","_callee","sendOnApi","res","serverAvatarClickState","wrap","_callee$","_context","prev","next","nr","importObject","customUI","length","avatarClick","t0","stop","_this3","_context2","abrupt","articleApi","result","total","getImageInfo","src","success","_this4","path","err","getShareInfo","concat","imageUrl","title","query","updateShareInfo","_arguments","arguments","_this5","_callee4","isReset","_callee4$","_context4","undefined","isLoading","Promise","_ref","_callee3","resolve","reject","firstArticle","articlesData","_callee3$","_context3","getArticleList","sent","userInfo","uid","$nextTick","user_avatarUrl","user_nickName","user_mobile","map","article","_toConsumableArray2","forEach","hasMore","extractLatestArticleImages","extractVideoFromArticles","showToast","icon","_x","_x2","apply","_this6","savedVideoState","isPlaying","pause","e","setTimeout","loadMoreData","_arguments2","_this7","_callee5","loadStartTime","minLoadingTime","loadDuration","_callee5$","_context5","Date","now","articleCount","restoreVideoState","message","visible","position","showModal","content","_success","_callee6","_callee6$","_context6","confirm","showLoading","mask","del","article_id","_this8","deleted","findIndex","item","_id","splice","hideLoading","duration","_x3","_context7","_callee7","previewImage","urls","current","handleContact","isLogin","utils_isLogin","testLogin","makePhoneCall","phoneNumber","_defineProperty2","_this9","find","viewCount","look_count","latestArticleImages","images","img","thumbnailURL","compressedURL","url","push","_this10","processImageUrl","imgArr","coverImage","previewArticleImage","getArticleImages","refreshDuration","minimumDuration","catch","hideShareGuide","initVideoContext","onVideoPause","onVideoEnded","onVideoError","foundNext","findNextVideo","hideVideo","_this12","filter","allVideoUrls","_iterator","_createForOfIteratorHelper2","_step","s","n","done","value","f","sortedArticleIndices","sort","a","b","hasVideo","time","slice","highQualityVideos","maxArticlesToProcess","Math","min","i","articleIndex","videoResult","firstFoundVideo","bestVideoUrl","priority","videos","Array","isArray","createTime","create_time","articleDate","daysDiff","includes","comment_count","extractVideoUrlAndQuality","isHighQuality","resolution","size","isHighQualityVideo","videoURL","_i","_possibleVideoFields","possibleVideoFields","field","isValidVideoUrl","possibleVideoArrayFields","_i2","_possibleVideoArrayFi","videoItem","_typeof2","possibleUrlProps","_i3","_possibleUrlProps","prop","quality","videoUrlMatch","extractVideoUrlFromContent","highQualityIndicators","lowQualityIndicators","qualityScore","_i4","_highQualityIndicator","indicator","_i5","_lowQualityIndicators","endsWith","allFoundVideos","aHasVideo","_this15","checkArticleHasVideo","bHasVideo","aPriority","getVideoPriority","bPriority","bTime","aTime","_iterator2","sortedArticles","_context8","_step2","totalArticles","loadedArticles","originalPageNo","maxPagesToLoad","_iterator3","sortedNewArticles","_step3","t2","highQualityCount","_callee8","onShareAppMessage","onShareTimeline","shareInfo","getTimelineShareInfo","wx","createPage","MiniProgramPage"],"sources":["userArticleList.vue","D:/代码测试/HBuilderX.4.45.2025010502/HBuilderX/plugins/uniapp-cli-vite/uniPage:/cGFnZXMvdXNlckFydGljbGVMaXN0L3VzZXJBcnRpY2xlTGlzdC52dWU"],"sourcesContent":["<script>\n// 使用选项式API定义分享方法，这是微信小程序最稳定的方式\nimport { useUserInfoStore } from '@/store/user.js'\nimport { testLogin } from '@/utils/isLogin'\nimport { useAuthSwitchStore } from '@/store/authSwitch'\n\n\nexport default {\n\tcomponents: {\n\t},\n\tdata() {\n\t\treturn {\n\t\t\t// 分享相关数据\n\t\t\tshareTitle: '',\n\t\t\tshareImageUrl: '',\n\t\t\tshareUserId: '',\n\t\t\tdefaultShareImage: '/static/images/logo.png', // 默认分享图片\n\t\t\tdynamicShareImage: '', // 动态生成的分享图片路径\n\t\t\tlinkShareImage: '', // 链接分享图片路径，与小程序分享图保持一致\n\t\t\t\n\t\t\t// 视频播放相关\n\t\t\tvideoUrl: '', // 默认视频地址\n\t\t\tvideoVisible: false, // 控制视频组件显示状态\n\t\t\tisVideoPlaying: false, // 视频是否正在播放\n\t\t\tvideoContext: null, // 视频上下文对象\n\t\t\tuserClosedVideo: false, // 用户是否主动关闭了视频\n\t\t\t\n\t\t\t// 用户信息和文章列表\n\t\t\tuserArticleData: [],\n\t\t\tuserArticleInfo: {\n\t\t\t\tavatarUrl: '/static/images/default-avatar.png',\n\t\t\t\tnickName: '加载中...',\n\t\t\t\tmobile: '未填写'\n\t\t\t},\n\t\t\t\n\t\t\t// 最新文章图片\n\t\t\tlatestArticleImages: [],\n\t\t\t\n\t\t\t// 分页相关\n\t\t\tpageNo: 1,\n\t\t\tpageSize: 8, // 每页加载的数据条数，与后端默认值保持一致\n\t\t\t\n\t\t\t// 加载状态\n\t\t\tstatus: 'more', // 初始状态为 'more'\n\t\t\tisLoading: false, // 是否正在加载\n\t\t\thasMore: true, // 是否还有更多数据\n\t\t\tloadMoreText: {\n\t\t\t\tcontentdown: '上拉加载更多',\n\t\t\t\tcontentrefresh: '加载中...',\n\t\t\t\tcontentnomore: '~ 已经到底啦 ~'\n\t\t\t},\n\t\t\t\n\t\t\t// 用户信息store\n\t\t\tuserStore: null,\n\t\t\t\n\t\t\t// 头像点击控制状态\n\t\t\tavatarClickEnabled: true,\n\t\t\t\n\t\t\t// 下拉刷新相关\n\t\t\tisRefreshing: false,\n\t\t\trefreshStartTime: 0, // 记录开始刷新的时间\n\t\t\t\n\t\t\t// 添加触底加载防抖变量\n\t\t\tscrollToLowerTimer: null,\n\t\t\tisScrollLoading: false,\n\t\t\ttotalArticleCount: 0, // 文章总数\n\t\t\t\n\t\t\t// 全屏弹窗控制\n\t\t\tshowFullScreenPopup: false,\n\t\t\t\n\t\t\t// 缓存视频URL\n\t\t\tvideoUrlCache: [],\n\t\t}\n\t},\n\t\n\tprops: {\n\t\tuserId: String\n\t},\n\n\tcomputed: {\n\t\t// 计算文章总数，便于在模板和分享中使用\n\t\tarticleTotal() {\n\t\t\treturn this.totalArticleCount || 0;\n\t\t}\n\t},\n\n\t\n\t// 页面加载时设置分享数据\n\tonLoad(options) {\n\t\t// 保存userId\n\t\tif (options.userId) {\n\t\t\tthis.shareUserId = options.userId;\n\t\t}\n\t\t\n\t\t// 初始化store\n\t\tthis.userStore = useUserInfoStore();\n\t\t\n\t\t// 获取权限状态\n\t\tthis.getSendOnState();\n\t\t\n\t\t// 请求云对象获取文章总数\n\t\tthis.getUserArticleCount();\n\t\t\n\t\t// 获取文章列表，并在完成后搜索视频\n\t\tthis.getArticelList(true).then(() => {\n\t\t\t// 搜索视频\n\t\t\tthis.searchAllVideosOnLoad();\n\t\t});\n\t\t\n\t\t// 开启平台原生页面分享\n\t\tuni.showShareMenu({\n\t\t\twithShareTicket: true,\n\t\t\tmenus: ['shareAppMessage', 'shareTimeline'] // 显式指定支持分享到朋友圈\n\t\t});\n\t\t\n\t\t// 监听浏览量更新事件\n\t\tuni.$on('viewCountUpdated', (articleId) => {\n\t\t\tthis.updateLocalViewCount({articleId});\n\t\t});\n\t\t\n\t\t// 监听新的全局浏览量更新事件\n\t\tuni.$on('articleViewCountUpdated', (data) => {\n\t\t\tconsole.log('用户文章列表收到文章浏览量更新事件:', data);\n\t\t\tif (data && data.articleId) {\n\t\t\t\tthis.updateLocalViewCount(data);\n\t\t\t}\n\t\t});\n\t\t\n\t\t// 监听头像点击状态变化事件\n\t\tuni.$on('avatarClickChanged', (newState) => {\n\t\t\tconsole.log('用户文章列表页面收到头像点击状态变化事件:', newState);\n\t\t\tthis.avatarClickEnabled = newState;\n\t\t});\n\t\t\n\t\t// 监听全局刷新事件，用于发布后返回刷新列表\n\t\tuni.$on('globalRefresh', (data) => {\n\t\t\tconsole.log('用户文章列表收到全局刷新事件:', data);\n\t\t\t// 检查是否需要刷新当前页面\n\t\t\tif (data && data.pages && data.pages.includes('userArticleList')) {\n\t\t\t\tconsole.log('正在刷新用户文章列表...');\n\t\t\t\t// 刷新时重新获取文章总数\n\t\t\t\tthis.getUserArticleCount();\n\t\t\t\tthis.getArticelList(true);\n\t\t\t}\n\t\t});\n\t\t\n\t\t// 预加载默认分享图片\n\t\tthis.preloadDefaultShareImage();\n\t\t\n\t\t// 不在页面加载时生成分享图，改为按需生成\n\t\t// setTimeout(() => {\n\t\t// this.generateShareImage();\n\t\t// }, 1500);\n\t},\n\t\n\t\n\t\n\t// 页面卸载时移除事件监听\n\tonUnload() {\n\t\tuni.$off('viewCountUpdated');\n\t\tuni.$off('articleViewCountUpdated');\n\t\tuni.$off('avatarClickChanged');\n\t\tuni.$off('globalRefresh');\n\t\t\n\t\t// 清理防抖定时器\n\t\tif (this.scrollToLowerTimer) {\n\t\t\tclearTimeout(this.scrollToLowerTimer);\n\t\t\tthis.scrollToLowerTimer = null;\n\t\t}\n\t},\n\t\n\t// 组件销毁前清理资源\n\tbeforeDestroy() {\n\t\t// 清理所有定时器\n\t\tif (this.scrollToLowerTimer) {\n\t\t\tclearTimeout(this.scrollToLowerTimer);\n\t\t\tthis.scrollToLowerTimer = null;\n\t\t}\n\t},\n\t\n\t// 监听页面触底事件\n\tonReachBottom() {\n\t\tconsole.log('原生触底事件被触发');\n\t\t// 如果已经在处理中，则跳过\n\t\tif (this.isScrollLoading || this.scrollToLowerTimer) {\n\t\t\treturn;\n\t\t}\n\t\t// 调用通用的触底加载方法\n\t\tthis.scrolltolower();\n\t},\n\t\n\tmethods: {\n\t\t// 获取权限开关状态\n\t\tasync getSendOnState() {\n\t\t\ttry {\n\t\t\t\tconsole.log('正在获取按钮状态...');\n\t\t\t\t\n\t\t\t\tconst sendOnApi = uniCloud.importObject('sendOn', { customUI: true });\n\t\t\t\tconst res = await sendOnApi.get();\n\t\t\t\t\n\t\t\t\tif (res && res.data && res.data.length > 0) {\n\t\t\t\t\t// 获取头像点击状态\n\t\t\t\t\tconst serverAvatarClickState = res.data[0].avatarClick !== undefined ? res.data[0].avatarClick : true;\n\t\t\t\t\t\n\t\t\t\t\t// 更新头像点击状态\n\t\t\t\t\tthis.avatarClickEnabled = serverAvatarClickState;\n\t\t\t\t\t\n\t\t\t\t\tconsole.log('头像点击状态:', this.avatarClickEnabled);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error('获取按钮状态失败: 数据格式不正确');\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error('获取按钮状态失败:', err);\n\t\t\t}\n\t\t},\n\t\t\n\t\t// 请求云对象获取文章总数\n\t\tasync getUserArticleCount() {\n\t\t\tif (!this.userId) {\n\t\t\t\tconsole.log('用户ID不存在，无法获取文章总数');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tconsole.log('通过云对象请求文章总数，用户ID:', this.userId);\n\t\t\t\n\t\t\ttry {\n\t\t\t\t// 使用getArticleList方法获取文章总数\n\t\t\t\t// 由于getUserArticleCount方法在部署的云对象中不存在（Method[getUserArticleCount] was not found in index.obj.js）\n\t\t\t\tconst articleApi = uniCloud.importObject('articleWx', { customUI: true });\n\t\t\t\t// 设置pageSize为1，只获取总数\n\t\t\t\tconst result = await articleApi.getArticleList(this.userId, 1, 1);\n\t\t\t\t\n\t\t\t\tif (result && result.total !== undefined) {\n\t\t\t\t\t// 更新文章总数\n\t\t\t\t\tthis.totalArticleCount = result.total;\n\t\t\t\t\tconsole.log('云对象通过getArticleList获取到文章总数:', this.totalArticleCount);\n\t\t\t\t\t\n\t\t\t\t\t// 更新分享信息\n\t\t\t\t\tthis.updateShareInfo();\n\t\t\t\t\t\n\t\t\t\t\treturn this.totalArticleCount;\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error('云对象获取文章总数失败: 未返回total字段');\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error('云对象获取文章总数出错:', err);\n\t\t\t\t\n\t\t\t\t// 出错时，将文章总数设为0\n\t\t\t\tthis.totalArticleCount = 0;\n\t\t\t\tconsole.log('云对象请求失败，设置文章总数为0');\n\t\t\t\t\n\t\t\t\treturn null;\n\t\t\t}\n\t\t},\n\t\t\n\t\t// 预加载默认分享图片\n\t\tpreloadDefaultShareImage() {\n\t\t\t// 预加载常规分享默认图片\n\t\t\tuni.getImageInfo({\n\t\t\t\tsrc: this.defaultShareImage,\n\t\t\t\tsuccess: (res) => {\n\t\t\t\t\tconsole.log('默认分享图片预加载成功:', res);\n\t\t\t\t\t// 确保默认图片路径正确\n\t\t\t\t\tthis.defaultShareImage = res.path;\n\t\t\t\t\t// 同时设置链接分享图片\n\t\t\t\t\tthis.linkShareImage = res.path;\n\t\t\t\t},\n\t\t\t\tfail: (err) => {\n\t\t\t\t\tconsole.error('默认分享图片预加载失败:', err);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t\n\t\t// 统一分享方法 - 返回标准分享信息\n\t\tgetShareInfo() {\n\t\t\t// 设置分享标题\n\t\t\tif (this.userArticleInfo) {\n\t\t\t\tconst nickName = this.userArticleInfo?.nickName || '用户';\n\t\t\t\tthis.shareTitle = `我是${nickName}，这是我的第${this.articleTotal}条朋友圈，点击查看！`;\n\t\t\t}\n\t\t\t\n\t\t\t// 确保用户ID已设置\n\t\t\tthis.shareUserId = this.userId || this.shareUserId;\n\t\t\t\n\t\t\t// 获取最佳可用的分享图片（只记录，不在普通分享中使用）\n\t\t\tlet imageUrl = '';\n\t\t\tif (this.dynamicShareImage) {\n\t\t\t\t// 优先使用动态生成的图片\n\t\t\t\timageUrl = this.dynamicShareImage;\n\t\t\t} else if (this.userArticleInfo && this.userArticleInfo.avatarUrl) {\n\t\t\t\t// 其次使用用户头像\n\t\t\t\timageUrl = this.userArticleInfo.avatarUrl;\n\t\t\t} else {\n\t\t\t\t// 最后使用默认图片\n\t\t\t\timageUrl = this.defaultShareImage;\n\t\t\t}\n\t\t\t\n\t\t\tconsole.log('统一分享方法 - 使用图片:', imageUrl);\n\t\t\t\n\t\t\t// 返回标准分享信息 - 不包含imageUrl\n\t\t\treturn {\n\t\t\t\ttitle: this.shareTitle || '更新了精彩动态，点击查看！',\n\t\t\t\tpath: `/pages/userArticleList/userArticleList?userId=${this.shareUserId}`\n\t\t\t\t// 不包含imageUrl，使分享给好友时不显示图片\n\t\t\t};\n\t\t},\n\t\t\n\t\t// 获取朋友圈分享信息（包含图片）\n\t\tgetTimelineShareInfo() {\n\t\t\t// 设置分享标题\n\t\t\tif (this.userArticleInfo) {\n\t\t\t\tconst nickName = this.userArticleInfo?.nickName || '用户';\n\t\t\t\tthis.shareTitle = `我是${nickName}，这是我的第${this.articleTotal}条朋友圈，点击查看！`;\n\t\t\t}\n\t\t\t\n\t\t\t// 确保用户ID已设置\n\t\t\tthis.shareUserId = this.userId || this.shareUserId;\n\t\t\t\n\t\t\t// 获取最佳可用的分享图片\n\t\t\tlet imageUrl = '';\n\t\t\tif (this.dynamicShareImage) {\n\t\t\t\t// 优先使用动态生成的图片\n\t\t\t\timageUrl = this.dynamicShareImage;\n\t\t\t} else if (this.userArticleInfo && this.userArticleInfo.avatarUrl) {\n\t\t\t\t// 其次使用用户头像\n\t\t\t\timageUrl = this.userArticleInfo.avatarUrl;\n\t\t\t} else {\n\t\t\t\t// 最后使用默认图片\n\t\t\t\timageUrl = this.defaultShareImage;\n\t\t\t}\n\t\t\t\n\t\t\tconsole.log('朋友圈分享 - 使用图片:', imageUrl);\n\t\t\t\n\t\t\t// 返回朋友圈分享信息\n\t\t\treturn {\n\t\t\t\ttitle: this.shareTitle || '更新了精彩动态，点击查看！',\n\t\t\t\tquery: `userId=${this.shareUserId}`,\n\t\t\t\timageUrl: imageUrl\n\t\t\t};\n\t\t},\n\t\t\n\t\t// 更新分享信息\n\t\tupdateShareInfo() {\n\t\t\tif (this.userArticleInfo) {\n\t\t\t\tconst nickName = this.userArticleInfo?.nickName || '用户';\n\t\t\t\t\n\t\t\t\t// 设置分享标题\n\t\t\t\tthis.shareTitle = `我是${nickName}，这是我的第${this.articleTotal}条朋友圈，点击查看！`;\n\t\t\t\t\n\t\t\t\tthis.shareUserId = this.userId || this.shareUserId;\n\t\t\t\t\n\t\t\t\t// 设置分享图片URL\n\t\t\t\tthis.shareImageUrl = this.dynamicShareImage || this.defaultShareImage;\n\t\t\t\t\n\t\t\t\tconsole.log('更新分享信息:', {\n\t\t\t\t\ttitle: this.shareTitle,\n\t\t\t\t\timageUrl: this.shareImageUrl,\n\t\t\t\t\tuserId: this.shareUserId\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\t\n\t\t// 获取用户文章列表（首次加载或重置）\n\t\tasync getArticelList(isReset = false) {\n\t\t\tthis.isLoading = true;\n\t\t\tthis.status = 'loading';\n\t\t\t\n\t\t\tif (isReset) {\n\t\t\t\tthis.pageNo = 1;\n\t\t\t\tthis.userArticleData = [];\n\t\t\t}\n\t\t\t\n\t\t\treturn new Promise(async (resolve, reject) => {\n\t\t\t\ttry {\n\t\t\t\t\tconst articleApi = uniCloud.importObject('articleWx', { customUI: true });\n\t\t\t\t\tconst res = await articleApi.getArticleList(this.userId, this.pageNo, this.pageSize);\n\t\t\t\t\t\n\t\t\t\t\t// 保存API返回的文章总数\n\t\t\t\t\tif (res && res.total !== undefined) {\n\t\t\t\t\t\tthis.totalArticleCount = res.total;\n\t\t\t\t\t\tconsole.log('获取到文章总数:', this.totalArticleCount);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// 添加空值检查\n\t\t\t\t\tif (res && res.userInfo) {\n\t\t\t\t\t\tthis.userArticleInfo = res.userInfo;\n\t\t\t\t\t\t// 如果当前用户是登录用户，可以更新全局用户信息\n\t\t\t\t\t\tif (this.userId === this.userStore.userInfo.uid) {\n\t\t\t\t\t\t\tthis.userStore.setUserInfo({\n\t\t\t\t\t\t\t\t...this.userStore.userInfo,\n\t\t\t\t\t\t\t\tnickName: res.userInfo.nickName || this.userStore.userInfo.nickName,\n\t\t\t\t\t\t\t\tavatarUrl: res.userInfo.avatarUrl || this.userStore.userInfo.avatarUrl\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// 数据加载完成后，更新分享信息\n\t\t\t\t\t\tthis.$nextTick(() => {\n\t\t\t\t\t\t\tthis.updateShareInfo();\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// 如果res.userInfo为null，检查是否第一页数据中有文章，\n\t\t\t\t\t\t// 如果有，从第一篇文章中获取用户信息\n\t\t\t\t\t\tif (this.pageNo === 1 && res && res.data && res.data.length > 0) {\n\t\t\t\t\t\t\tconst firstArticle = res.data[0];\n\t\t\t\t\t\t\tthis.userArticleInfo = {\n\t\t\t\t\t\t\t\tavatarUrl: firstArticle.user_avatarUrl,\n\t\t\t\t\t\t\t\tnickName: firstArticle.user_nickName,\n\t\t\t\t\t\t\t\tmobile: firstArticle.user_mobile || '未填写'\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// 如果这不是第一页，或者没有任何文章数据，保持当前的用户信息\n\t\t\t\t\t\t\t// 只有在第一页且没有文章时才设为空对象\n\t\t\t\t\t\t\tif (this.pageNo === 1) {\n\t\t\t\t\t\t\t\tthis.userArticleInfo = {};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// 否则保持当前的用户信息不变\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// 处理文章数据\n\t\t\t\t\tif (res && res.data) {\n\t\t\t\t\t\tlet articlesData = res.data;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// 处理每篇文章，检查是否含有视频\n\t\t\t\t\t\tarticlesData = articlesData.map(article => {\n\t\t\t\t\t\t\t// 添加一个标识字段，表示文章是否包含视频\n\t\t\t\t\t\t\tarticle.hasVideo = this.checkArticleHasVideo(article);\n\t\t\t\t\t\t\treturn article;\n\t\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (isReset) {\n\t\t\t\t\t\t\tthis.userArticleData = articlesData;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.userArticleData = [...this.userArticleData, ...articlesData];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// 确保每篇文章都有用户信息\n\t\t\t\t\t\tthis.userArticleData.forEach(article => {\n\t\t\t\t\t\t\t// 如果文章没有用户信息，使用从API获取的用户信息\n\t\t\t\t\t\t\tif (!article.user_avatarUrl && this.userArticleInfo.avatarUrl) {\n\t\t\t\t\t\t\t\tarticle.user_avatarUrl = this.userArticleInfo.avatarUrl;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!article.user_nickName && this.userArticleInfo.nickName) {\n\t\t\t\t\t\t\t\tarticle.user_nickName = this.userArticleInfo.nickName;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t\t\t\t\t// 判断是否还有更多数据\n\t\t\t\t\t\tthis.hasMore = res.data.length >= this.pageSize;\n\t\t\t\t\t\tthis.status = this.hasMore ? 'more' : 'noMore';\n\t\t\t\t\t\t\n\t\t\t\t\t\t// 文章数据更新后，重新更新分享信息以获取最佳图片\n\t\t\t\t\t\tthis.$nextTick(() => {\n\t\t\t\t\t\t\tthis.updateShareInfo();\n\t\t\t\t\t\t\t// 获取最新文章的图片\n\t\t\t\t\t\t\tthis.extractLatestArticleImages();\n\t\t\t\t\t\t\t// 尝试从文章中提取视频\n\t\t\t\t\t\t\tthis.extractVideoFromArticles();\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (isReset) {\n\t\t\t\t\t\t\tthis.userArticleData = [];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.hasMore = false;\n\t\t\t\t\t\tthis.status = 'noMore';\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tresolve();\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error('获取用户文章列表失败:', err);\n\t\t\t\t\tif (isReset) {\n\t\t\t\t\t\tthis.userArticleData = [];\n\t\t\t\t\t}\n\t\t\t\t\tthis.userArticleInfo = {};\n\t\t\t\t\tthis.status = 'noMore';\n\t\t\t\t\tthis.hasMore = false;\n\t\t\t\t\t\n\t\t\t\t\t// 显示错误提示\n\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\ttitle: '获取数据失败，请重试',\n\t\t\t\t\t\ticon: 'none'\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\treject(err);\n\t\t\t\t} finally {\n\t\t\t\t\tthis.isLoading = false;\n\t\t\t\t\t// 重置下拉刷新状态\n\t\t\t\t\tthis.isRefreshing = false;\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t\n\t\t// 触底加载时，不影响视频状态\n\t\tscrolltolower() {\n\t\t\tconsole.log('触底加载被触发，状态:', { isLoading: this.isLoading, hasMore: this.hasMore, isScrollLoading: this.isScrollLoading });\n\t\t\t\n\t\t\t// 如果正在加载或已经没有更多数据，直接返回\n\t\t\tif (this.isLoading || !this.hasMore || this.isScrollLoading) {\n\t\t\t\tconsole.log('跳过加载: ' + (this.isLoading ? '正在加载中' : (this.isScrollLoading ? '防抖期间' : '没有更多数据')));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t// 设置防抖标志\n\t\t\tthis.isScrollLoading = true;\n\t\t\t\n\t\t\t// 先展示加载提示\n\t\t\tthis.status = 'loading';\n\t\t\t\n\t\t\t// 清除之前的定时器\n\t\t\tif (this.scrollToLowerTimer) {\n\t\t\t\tclearTimeout(this.scrollToLowerTimer);\n\t\t\t}\n\t\t\t\n\t\t\t// 记录当前视频状态，以便加载后恢复\n\t\t\tlet savedVideoState = null;\n\t\t\tif (this.videoVisible && this.videoContext) {\n\t\t\t\tsavedVideoState = {\n\t\t\t\t\tisPlaying: this.isVideoPlaying,\n\t\t\t\t\tposition: 0,\n\t\t\t\t\tvisible: this.videoVisible\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t// 获取当前播放位置\n\t\t\t\ttry {\n\t\t\t\t\tthis.videoContext.pause(); // 临时暂停以便获取准确的当前位置\n\t\t\t\t\tsavedVideoState.position = this.videoContext.currentTime || 0;\n\t\t\t\t\t// 如果之前是播放状态，则恢复播放\n\t\t\t\t\tif (savedVideoState.isPlaying) {\n\t\t\t\t\t\tthis.videoContext.play();\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error('保存视频状态时出错:', e);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// 设置防抖定时器，300毫秒内只执行一次\n\t\t\tthis.scrollToLowerTimer = setTimeout(() => {\n\t\t\t\tconsole.log('开始加载更多数据 (防抖后)，保存的视频状态:', savedVideoState);\n\t\t\t\t\n\t\t\t\t// 传递保存的视频状态\n\t\t\t\tthis.loadMoreData(savedVideoState);\n\t\t\t}, 500);\n\t\t},\n\t\t\n\t\t// 加载更多数据\n\t\tasync loadMoreData(savedVideoState = null) {\n\t\t\tif (this.isLoading || !this.hasMore) {\n\t\t\t\tconsole.log('跳过加载更多:', { isLoading: this.isLoading, hasMore: this.hasMore });\n\t\t\t\tthis.isScrollLoading = false;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tconsole.log(`开始加载第${this.pageNo + 1}页数据，视频状态:`, savedVideoState);\n\t\t\tthis.status = 'loading';\n\t\t\tthis.isLoading = true;\n\t\t\t\n\t\t\t// 视觉上显示加载延迟，避免加载过快用户无感知\n\t\t\tconst loadStartTime = Date.now();\n\t\t\tconst minLoadingTime = 500; // 最小加载时间，提供更好的视觉反馈\n\t\t\t\n\t\t\tthis.pageNo++;\n\t\t\ttry {\n\t\t\t\tawait this.getArticelList();\n\t\t\t\t\n\t\t\t\t// 计算已经过去的时间\n\t\t\t\tconst loadDuration = Date.now() - loadStartTime;\n\t\t\t\t\n\t\t\t\t// 如果加载太快，添加小延迟使加载状态对用户可见\n\t\t\t\tif (loadDuration < minLoadingTime) {\n\t\t\t\t\tawait new Promise(resolve => setTimeout(resolve, minLoadingTime - loadDuration));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tconsole.log(`第${this.pageNo}页数据加载完成, 当前状态:`, { \n\t\t\t\t\tarticleCount: this.userArticleData.length,\n\t\t\t\t\thasMore: this.hasMore,\n\t\t\t\t\tstatus: this.status\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\t// 恢复视频状态\n\t\t\t\tthis.$nextTick(() => {\n\t\t\t\t\tthis.restoreVideoState(savedVideoState);\n\t\t\t\t});\n\t\t\t} catch (err) {\n\t\t\t\t// 静默处理\"请求进行中\"错误，避免在控制台显示错误信息\n\t\t\t\tif (err && err.message === '请求进行中') {\n\t\t\t\t\tconsole.log('忽略并发请求:', err.message);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error('加载更多数据失败:', err);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// 发生错误时恢复页码，以便下次重试\n\t\t\t\tthis.pageNo--;\n\t\t\t\tthis.status = 'more';\n\t\t\t\t\n\t\t\t\t// 即使出错也恢复视频状态\n\t\t\t\tthis.$nextTick(() => {\n\t\t\t\t\tthis.restoreVideoState(savedVideoState);\n\t\t\t\t});\n\t\t\t} finally {\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.isScrollLoading = false;\n\t\t\t}\n\t\t},\n\t\t\n\t\t// 恢复视频状态的方法\n\t\trestoreVideoState(savedVideoState) {\n\t\t\tif (!savedVideoState) return;\n\t\t\t\n\t\t\tconsole.log('尝试恢复视频状态:', savedVideoState, '用户关闭标记:', this.userClosedVideo);\n\t\t\t\n\t\t\t// 如果用户主动关闭了视频，不恢复视频状态\n\t\t\tif (this.userClosedVideo) {\n\t\t\t\tconsole.log('用户已主动关闭视频，不恢复视频状态');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t// 确保视频组件可见性与之前一致\n\t\t\tif (savedVideoState.visible !== this.videoVisible) {\n\t\t\t\tthis.videoVisible = savedVideoState.visible;\n\t\t\t}\n\t\t\t\n\t\t\t// 仅当视频组件可见且有视频URL时恢复状态\n\t\t\tif (this.videoVisible && this.videoUrl) {\n\t\t\t\t// 需要重新获取视频上下文\n\t\t\t\tthis.videoContext = uni.createVideoContext('myVideo', this);\n\t\t\t\t\n\t\t\t\tif (this.videoContext) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// 设置播放位置\n\t\t\t\t\t\tif (savedVideoState.position > 0) {\n\t\t\t\t\t\t\tthis.videoContext.seek(savedVideoState.position);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// 恢复播放状态\n\t\t\t\t\t\tif (savedVideoState.isPlaying) {\n\t\t\t\t\t\t\tthis.videoContext.play();\n\t\t\t\t\t\t\tthis.isVideoPlaying = true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.videoContext.pause();\n\t\t\t\t\t\t\tthis.isVideoPlaying = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tconsole.log('视频状态恢复成功');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tconsole.error('恢复视频状态时出错:', e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\n\t\t// 处理删除\n\t\tasync handleDelete(article_id) {\n\t\t\ttry {\n\t\t\t\t// 添加确认提示\n\t\t\t\tuni.showModal({\n\t\t\t\t\ttitle: '确认删除',\n\t\t\t\t\tcontent: '确定要删除这篇文章吗？',\n\t\t\t\t\tsuccess: async (result) => {\n\t\t\t\t\t\tif (result.confirm) {\n\t\t\t\t\t\t\t// 显示加载中提示\n\t\t\t\t\t\t\tuni.showLoading({\n\t\t\t\t\t\t\t\ttitle: '删除中...',\n\t\t\t\t\t\t\t\tmask: true\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// 调用删除API\n\t\t\t\t\t\t\tconst articleApi = uniCloud.importObject('articleWx', { customUI: true });\n\t\t\t\t\t\t\tconst res = await articleApi.del(article_id, this.userStore.userInfo.uid);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tconsole.log('删除返回结果:', res);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// 检查删除是否成功\n\t\t\t\t\t\t\tif (res && res.deleted) {\n\t\t\t\t\t\t\t\t// 从本地数据列表中移除已删除的文章\n\t\t\t\t\t\t\t\tconst index = this.userArticleData.findIndex(item => item._id === article_id);\n\t\t\t\t\t\t\t\tif (index !== -1) {\n\t\t\t\t\t\t\t\t\tthis.userArticleData.splice(index, 1);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// 显示成功提示\n\t\t\t\t\t\t\t\tuni.hideLoading();\n\t\t\t\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\t\t\t\ttitle: '删除成功',\n\t\t\t\t\t\t\t\t\ticon: 'success',\n\t\t\t\t\t\t\t\t\tduration: 1500\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthrow new Error('删除失败，请重试');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error('删除出错:', err);\n\t\t\t\tuni.hideLoading();\n\t\t\t\tuni.showToast({\n\t\t\t\t\ttitle: err.message || '删除失败，请重试',\n\t\t\t\t\ticon: 'none',\n\t\t\t\t\tduration: 2000\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\t\n\t\t// 图片预览\n\t\tpreviewImage(urls, current) {\n\t\t\tuni.previewImage({\n\t\t\t\turls,\n\t\t\t\tcurrent\n\t\t\t});\n\t\t},\n\t\t\n\t\t// 处理联系方式\n\t\thandleContact() {\n\t\t\tif (!this.userStore.userInfo.isLogin) {\n\t\t\t\treturn testLogin();\n\t\t\t}\n\t\t\t\n\t\t\tif (!this.userArticleInfo || this.userArticleInfo.mobile === '未填写') {\n\t\t\t\treturn uni.showToast({\n\t\t\t\t\ticon: 'none',\n\t\t\t\t\ttitle: '他并不想让人联系'\n\t\t\t\t});\n\t\t\t}\n\t\t\tuni.makePhoneCall({\n\t\t\t\tphoneNumber: this.userArticleInfo.mobile\n\t\t\t});\n\t\t},\n\t\t\n\t\t// 文章列表触底时触发\n\t\tscrolltolower() {\n\t\t\tconsole.log('触底加载被触发，状态:', { isLoading: this.isLoading, hasMore: this.hasMore, isScrollLoading: this.isScrollLoading });\n\t\t\t\n\t\t\t// 如果正在加载或已经没有更多数据，直接返回\n\t\t\tif (this.isLoading || !this.hasMore || this.isScrollLoading) {\n\t\t\t\tconsole.log('跳过加载: ' + (this.isLoading ? '正在加载中' : (this.isScrollLoading ? '防抖期间' : '没有更多数据')));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t// 设置防抖标志\n\t\t\tthis.isScrollLoading = true;\n\t\t\t\n\t\t\t// 先展示加载提示\n\t\t\tthis.status = 'loading';\n\t\t\t\n\t\t\t// 清除之前的定时器\n\t\t\tif (this.scrollToLowerTimer) {\n\t\t\t\tclearTimeout(this.scrollToLowerTimer);\n\t\t\t}\n\t\t\t\n\t\t\t// 记录当前视频状态，以便加载后恢复\n\t\t\tlet savedVideoState = null;\n\t\t\tif (this.videoVisible && this.videoContext) {\n\t\t\t\tsavedVideoState = {\n\t\t\t\t\tisPlaying: this.isVideoPlaying,\n\t\t\t\t\tposition: 0,\n\t\t\t\t\tvisible: this.videoVisible\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t// 获取当前播放位置\n\t\t\t\ttry {\n\t\t\t\t\tthis.videoContext.pause(); // 临时暂停以便获取准确的当前位置\n\t\t\t\t\tsavedVideoState.position = this.videoContext.currentTime || 0;\n\t\t\t\t\t// 如果之前是播放状态，则恢复播放\n\t\t\t\t\tif (savedVideoState.isPlaying) {\n\t\t\t\t\t\tthis.videoContext.play();\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error('保存视频状态时出错:', e);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// 设置防抖定时器，300毫秒内只执行一次\n\t\t\tthis.scrollToLowerTimer = setTimeout(() => {\n\t\t\t\tconsole.log('开始加载更多数据 (防抖后)，保存的视频状态:', savedVideoState);\n\t\t\t\t\n\t\t\t\t// 传递保存的视频状态\n\t\t\t\tthis.loadMoreData(savedVideoState);\n\t\t\t}, 500);\n\t\t},\n\t\t\n\t\t// 更新本地文章浏览量数据\n\t\tupdateLocalViewCount(data) {\n\t\t\t// 检查数据有效性\n\t\t\tif (!data || !data.articleId) {\n\t\t\t\tconsole.log('更新浏览量失败：无效的文章数据');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t// 查找文章并更新浏览量\n\t\t\tconst article = this.userArticleData.find(item => item._id === data.articleId);\n\t\t\tif (article) {\n\t\t\t\t// 如果提供了具体的浏览量，则直接使用；否则自增\n\t\t\t\tif (data.viewCount !== undefined) {\n\t\t\t\t\tarticle.look_count = data.viewCount;\n\t\t\t\t} else if (article.look_count !== undefined) {\n\t\t\t\t\tarticle.look_count++;\n\t\t\t\t} else {\n\t\t\t\t\tarticle.look_count = 1;\n\t\t\t\t}\n\t\t\t\tconsole.log(`文章(${data.articleId})浏览量已更新: ${article.look_count}`);\n\t\t\t} else {\n\t\t\t\tconsole.log(`未找到文章: ${data.articleId}`);\n\t\t\t}\n\t\t},\n\t\t\n\t\t// 预览最新文章图片\n\t\tpreviewLatestImages(index) {\n\t\t\tif (this.latestArticleImages && this.latestArticleImages.length > 0) {\n\t\t\t\tuni.previewImage({\n\t\t\t\t\tcurrent: this.latestArticleImages[index],\n\t\t\t\t\turls: this.latestArticleImages\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\t\n\t\t// 获取文章的图片\n\t\tgetArticleImages(article) {\n\t\t\tconst images = [];\n\t\t\t\n\t\t\tif (!article) return images;\n\t\t\t\n\t\t\t// 处理新版图片结构 (images 数组)\n\t\t\tif (article.images && article.images.length > 0) {\n\t\t\t\tarticle.images.forEach(img => {\n\t\t\t\t\t// 优先使用缩略图\n\t\t\t\t\tif (img.thumbnailURL) {\n\t\t\t\t\t\timages.push(this.processImageUrl(img.thumbnailURL));\n\t\t\t\t\t}\n\t\t\t\t\t// 其次使用压缩图\n\t\t\t\t\telse if (img.compressedURL) {\n\t\t\t\t\t\timages.push(this.processImageUrl(img.compressedURL));\n\t\t\t\t\t}\n\t\t\t\t\t// 再次使用原图\n\t\t\t\t\telse if (img.url) {\n\t\t\t\t\t\timages.push(this.processImageUrl(img.url));\n\t\t\t\t\t}\n\t\t\t\t\t// 如果是字符串直接使用\n\t\t\t\t\telse if (typeof img === 'string') {\n\t\t\t\t\t\timages.push(this.processImageUrl(img));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\t// 处理旧版图片结构 (imgArr 数组)\n\t\t\tif (article.imgArr && article.imgArr.length > 0) {\n\t\t\t\tarticle.imgArr.forEach(img => {\n\t\t\t\t\timages.push(this.processImageUrl(img));\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\t// 尝试使用封面图\n\t\t\tif (article.coverImage && images.length === 0) {\n\t\t\t\timages.push(this.processImageUrl(article.coverImage));\n\t\t\t}\n\t\t\t\n\t\t\treturn images;\n\t\t},\n\t\t\n\t\t// 预览文章图片\n\t\tpreviewArticleImage(article, index) {\n\t\t\tconst images = this.getArticleImages(article);\n\t\t\tif (images && images.length > 0) {\n\t\t\t\tuni.previewImage({\n\t\t\t\t\tcurrent: images[index],\n\t\t\t\t\turls: images\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\t\n\t\t// 下拉刷新\n\t\tonRefresh() {\n\t\t\tthis.isRefreshing = true;\n\t\t\tthis.refreshStartTime = Date.now(); // 记录开始刷新的时间\n\t\t\t\n\t\t\tthis.getArticelList(true).then(() => {\n\t\t\t\t// 确保刷新动画至少显示800毫秒，提供良好的用户体验\n\t\t\t\tconst refreshDuration = Date.now() - this.refreshStartTime;\n\t\t\t\tconst minimumDuration = 800;\n\t\t\t\t\n\t\t\t\tif (refreshDuration < minimumDuration) {\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tthis.isRefreshing = false;\n\t\t\t\t\t\t// 刷新成功提示\n\t\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\t\ttitle: '刷新成功',\n\t\t\t\t\t\t\ticon: 'success',\n\t\t\t\t\t\t\tduration: 1500\n\t\t\t\t\t\t});\n\t\t\t\t\t}, minimumDuration - refreshDuration);\n\t\t\t\t} else {\n\t\t\t\t\tthis.isRefreshing = false;\n\t\t\t\t\t// 刷新成功提示\n\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\ttitle: '刷新成功',\n\t\t\t\t\t\ticon: 'success',\n\t\t\t\t\t\tduration: 1500\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}).catch(() => {\n\t\t\t\t// 确保刷新动画至少显示800毫秒\n\t\t\t\tconst refreshDuration = Date.now() - this.refreshStartTime;\n\t\t\t\tconst minimumDuration = 800;\n\t\t\t\t\n\t\t\t\tif (refreshDuration < minimumDuration) {\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tthis.isRefreshing = false;\n\t\t\t\t\t\t// 刷新失败提示\n\t\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\t\ttitle: '刷新失败',\n\t\t\t\t\t\t\ticon: 'none',\n\t\t\t\t\t\t\tduration: 1500\n\t\t\t\t\t\t});\n\t\t\t\t\t}, minimumDuration - refreshDuration);\n\t\t\t\t} else {\n\t\t\t\t\tthis.isRefreshing = false;\n\t\t\t\t\t// 刷新失败提示\n\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\ttitle: '刷新失败',\n\t\t\t\t\t\ticon: 'none',\n\t\t\t\t\t\tduration: 1500\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t\n\t\t// 隐藏分享引导蒙层\n\t\thideShareGuide() {\n\t\t\tthis.showShareArrow = false;\n\t\t},\n\t\t\n\t\t// 视频相关方法\n\t\t// 初始化视频上下文\n\t\tinitVideoContext() {\n\t\t\t// 只有当视频组件可见且有视频URL时才初始化\n\t\t\tif (this.videoVisible && this.videoUrl) {\n\t\t\t\tconsole.log('初始化视频上下文');\n\t\t\t\tthis.videoContext = uni.createVideoContext('myVideo', this);\n\t\t\t} else {\n\t\t\t\tconsole.log('视频组件不可见或没有视频URL，跳过初始化');\n\t\t\t}\n\t\t},\n\t\t\n\t\t// 视频播放事件处理\n\t\tonVideoPlay() {\n\t\t\tconsole.log('视频开始播放');\n\t\t\tthis.isVideoPlaying = true;\n\t\t},\n\t\t\n\t\t// 视频暂停事件处理\n\t\tonVideoPause() {\n\t\t\tconsole.log('视频暂停播放');\n\t\t\tthis.isVideoPlaying = false;\n\t\t},\n\t\t\n\t\t// 视频播放结束事件处理\n\t\tonVideoEnded() {\n\t\t\tconsole.log('视频播放结束');\n\t\t\tthis.isVideoPlaying = false;\n\t\t},\n\t\t\n\t\t// 视频播放错误事件处理\n\t\tonVideoError(e) {\n\t\t\tconsole.error('视频播放错误:', e);\n\t\t\t\n\t\t\t// 尝试自动查找下一个视频\n\t\t\tconst foundNext = this.findNextVideo();\n\t\t\t\n\t\t\t// 如果没有找到下一个视频\n\t\t\tif (!foundNext) {\n\t\t\t\t// 主动关闭视频，不显示提示\n\t\t\t\tthis.hideVideo();\n\t\t\t}\n\t\t},\n\t\t\n\t\t// 查找下一个可用视频\n\t\tfindNextVideo() {\n\t\t\tconsole.log('查找下一个可用视频');\n\t\t\t\n\t\t\t// 首先检查是否有缓存的视频URL\n\t\t\tif (this.videoUrlCache && this.videoUrlCache.length > 0) {\n\t\t\t\t// 移除当前正在使用的视频URL\n\t\t\t\tthis.videoUrlCache = this.videoUrlCache.filter(url => url !== this.videoUrl);\n\t\t\t\t\n\t\t\t\t// 如果还有其他视频URL\n\t\t\t\tif (this.videoUrlCache.length > 0) {\n\t\t\t\t\tconsole.log('从缓存中找到其他视频:', this.videoUrlCache[0]);\n\t\t\t\t\tthis.videoUrl = this.videoUrlCache[0];\n\t\t\t\t\tthis.videoVisible = true;\n\t\t\t\t\t\n\t\t\t\t\t// 在下一个渲染周期初始化视频上下文\n\t\t\t\t\tthis.$nextTick(() => {\n\t\t\t\t\t\tthis.initVideoContext();\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// 如果没有文章数据，直接返回\n\t\t\tif (!this.userArticleData || this.userArticleData.length === 0) {\n\t\t\t\tconsole.log('没有文章数据，无法查找视频');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\t// 存储找到的所有视频URL\n\t\t\tconst allVideoUrls = [];\n\t\t\t\n\t\t\t// 查找所有视频URLs\n\t\t\tfor (let article of this.userArticleData) {\n\t\t\t\tconst videoUrl = this.extractVideoUrlFromArticle(article);\n\t\t\t\tif (videoUrl && videoUrl !== this.videoUrl) {\n\t\t\t\t\tallVideoUrls.push(videoUrl);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// 如果找到了其他视频\n\t\t\tif (allVideoUrls.length > 0) {\n\t\t\t\tconsole.log('找到其他视频:', allVideoUrls[0]);\n\t\t\t\t\n\t\t\t\t// 更新缓存\n\t\t\t\tthis.videoUrlCache = allVideoUrls;\n\t\t\t\t\n\t\t\t\tthis.videoUrl = allVideoUrls[0];\n\t\t\t\tthis.videoVisible = true;\n\t\t\t\t\n\t\t\t\t// 在下一个渲染周期初始化视频上下文\n\t\t\t\tthis.$nextTick(() => {\n\t\t\t\t\tthis.initVideoContext();\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\tconsole.log('没有找到其他可用视频');\n\t\t\t\tuni.showToast({\n\t\t\t\t\ttitle: '未找到其他视频',\n\t\t\t\t\ticon: 'none'\n\t\t\t\t});\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\t\n\t\t// 全屏状态变化事件处理\n\t\thandleFullscreenChange(e) {\n\t\t\tconsole.log('全屏状态变化:', e.detail.fullScreen);\n\t\t},\n\t\t\n\t\t// 隐藏视频\n\t\thideVideo() {\n\t\t\tconsole.log('隐藏视频组件被调用');\n\t\t\t// 标记用户主动关闭了视频\n\t\t\tthis.userClosedVideo = true;\n\t\t\t// 暂停视频\n\t\t\tif (this.videoContext) {\n\t\t\t\tthis.videoContext.pause();\n\t\t\t}\n\t\t\t// 隐藏视频组件\n\t\t\tthis.videoVisible = false;\n\t\t\tthis.videoUrl = ''; // 清空视频URL，确保组件完全隐藏\n\t\t},\n\t\t\n\t\t// 显示视频\n\t\tshowVideo() {\n\t\t\t// 重置用户关闭标记\n\t\t\tthis.userClosedVideo = false;\n\t\t\tthis.videoVisible = true;\n\t\t\t// 在下一个渲染周期重新初始化视频上下文\n\t\t\tthis.$nextTick(() => {\n\t\t\t\tthis.initVideoContext();\n\t\t\t});\n\t\t},\n\t\t\n\t\t// 从文章列表中提取视频URL\n\t\textractVideoFromArticles() {\n\t\t\tconsole.log('尝试从文章中提取视频链接');\n\t\t\t\n\t\t\t// 如果用户主动关闭了视频，不提取新视频\n\t\t\tif (this.userClosedVideo) {\n\t\t\t\tconsole.log('用户已主动关闭视频，跳过视频提取');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\t// 如果没有文章数据，直接返回\n\t\t\tif (!this.userArticleData || this.userArticleData.length === 0) {\n\t\t\t\tconsole.log('没有文章数据，无法提取视频');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\t// 创建一个包含文章索引的数组，优化排序逻辑\n\t\t\tconst sortedArticleIndices = this.userArticleData\n\t\t\t\t.map((article, index) => ({ \n\t\t\t\t\tindex, \n\t\t\t\t\ttime: article.create_time || article.createTime || article.time || 0,\n\t\t\t\t\tpriority: this.getVideoPriority(article), // 计算视频优先级\n\t\t\t\t\thasVideo: this.checkArticleHasVideo(article) // 预先检查是否包含视频\n\t\t\t\t}))\n\t\t\t\t.sort((a, b) => {\n\t\t\t\t\t// 首先检查是否包含视频，有视频的优先\n\t\t\t\t\tif (a.hasVideo !== b.hasVideo) {\n\t\t\t\t\t\treturn a.hasVideo ? -1 : 1;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// 然后按优先级排序\n\t\t\t\t\tif (a.priority !== b.priority) {\n\t\t\t\t\t\treturn b.priority - a.priority;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// 最后按照时间排序，确保最新的视频优先\n\t\t\t\t\tif (typeof a.time === 'string' && typeof b.time === 'string') {\n\t\t\t\t\t\treturn new Date(b.time) - new Date(a.time);\n\t\t\t\t\t} else if (typeof a.time === 'number' && typeof b.time === 'number') {\n\t\t\t\t\t\treturn b.time - a.time;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn a.index - b.index; // 保持原有顺序\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.map(item => item.index);\n\t\t\t\n\t\t\tconsole.log('优化排序后的文章索引:', sortedArticleIndices.slice(0, 5)); // 只显示前5个，避免日志过长\n\t\t\t\n\t\t\t// 收集所有视频URL以便后续使用，同时按质量分类\n\t\t\tconst allVideoUrls = [];\n\t\t\tconst highQualityVideos = []; // 存储高质量视频\n\t\t\tlet firstFoundVideo = null;\n\t\t\t\n\t\t\t// 扫描所有文章，最多处理前20篇，避免过度处理\n\t\t\tconst maxArticlesToProcess = Math.min(sortedArticleIndices.length, 20);\n\t\t\t\n\t\t\tfor (let i = 0; i < maxArticlesToProcess; i++) {\n\t\t\t\tconst articleIndex = sortedArticleIndices[i];\n\t\t\t\tconst article = this.userArticleData[articleIndex];\n\t\t\t\t\n\t\t\t\tconsole.log(`检查文章索引 ${articleIndex} 是否包含视频`);\n\t\t\t\t\n\t\t\t\t// 尝试获取视频URL和质量信息\n\t\t\t\tconst videoResult = this.extractVideoUrlAndQuality(article);\n\t\t\t\t\n\t\t\t\tif (videoResult && videoResult.url) {\n\t\t\t\t\t// 记录视频URL和质量信息\n\t\t\t\t\tallVideoUrls.push(videoResult.url);\n\t\t\t\t\t\n\t\t\t\t\t// 如果是高质量视频，加入高质量队列\n\t\t\t\t\tif (videoResult.isHighQuality) {\n\t\t\t\t\t\thighQualityVideos.push(videoResult.url);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// 如果是第一个找到的视频，记录下来\n\t\t\t\t\tif (!firstFoundVideo) {\n\t\t\t\t\t\tfirstFoundVideo = videoResult.url;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// 决定使用哪个视频\n\t\t\tlet bestVideoUrl = null;\n\t\t\t\n\t\t\t// 首选高质量视频，没有则使用第一个找到的视频\n\t\t\tif (highQualityVideos.length > 0) {\n\t\t\t\tbestVideoUrl = highQualityVideos[0];\n\t\t\t\tconsole.log('使用高质量视频:', bestVideoUrl);\n\t\t\t} else if (firstFoundVideo) {\n\t\t\t\tbestVideoUrl = firstFoundVideo;\n\t\t\t\tconsole.log('使用首个找到的视频:', bestVideoUrl);\n\t\t\t}\n\t\t\t\n\t\t\t// 如果找到了视频\n\t\t\tif (bestVideoUrl) {\n\t\t\t\tconsole.log('找到最优视频链接:', bestVideoUrl);\n\t\t\t\t// 保存所有找到的视频以便于错误时重试\n\t\t\t\tthis.videoUrlCache = allVideoUrls;\n\t\t\t\t\n\t\t\t\t// 使用最佳视频\n\t\t\t\tthis.videoUrl = bestVideoUrl;\n\t\t\t\tthis.videoVisible = true;\n\t\t\t\t\n\t\t\t\t// 在下一个渲染周期初始化视频上下文\n\t\t\t\tthis.$nextTick(() => {\n\t\t\t\t\tthis.initVideoContext();\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t\n\t\t\tconsole.log('未在文章中找到有效的视频链接');\n\t\t\treturn false;\n\t\t},\n\t\t\n\t\t// 计算文章中视频的优先级，增加更多权重因素\n\t\tgetVideoPriority(article) {\n\t\t\tlet priority = 0;\n\t\t\t\n\t\t\t// 检查是否有明确标记的视频字段\n\t\t\tif (article.videoURL || article.videoUrl || article.video_url) {\n\t\t\t\t\tpriority += 15; // 增加权重\n\t\t\t}\n\t\t\t\n\t\t\t// 检查是否有视频数组\n\t\t\tif (article.videos && Array.isArray(article.videos) && article.videos.length > 0) {\n\t\t\t\tpriority += 12;\n\t\t\t}\n\t\t\t\n\t\t\t// 检查文章创建时间，越新的文章优先级越高\n\t\t\tif (article.create_time || article.createTime || article.time) {\n\t\t\t\tconst createTime = article.create_time || article.createTime || article.time;\n\t\t\t\tconst now = new Date();\n\t\t\t\tlet articleDate;\n\t\t\t\t\n\t\t\t\ttry {\n\t\t\t\t\t// 尝试解析日期\n\t\t\t\t\tif (typeof createTime === 'string') {\n\t\t\t\t\t\tarticleDate = new Date(createTime);\n\t\t\t\t\t} else if (typeof createTime === 'number') {\n\t\t\t\t\t\tarticleDate = new Date(createTime);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// 如果文章是最近7天发布的，增加优先级\n\t\t\t\t\tif (articleDate && !isNaN(articleDate.getTime())) {\n\t\t\t\t\t\tconst daysDiff = Math.floor((now - articleDate) / (1000 * 60 * 60 * 24));\n\t\t\t\t\t\tif (daysDiff <= 1) {\n\t\t\t\t\t\t\tpriority += 20; // 今天发布的\n\t\t\t\t\t\t} else if (daysDiff <= 3) {\n\t\t\t\t\t\t\tpriority += 15; // 3天内发布的\n\t\t\t\t\t\t} else if (daysDiff <= 7) {\n\t\t\t\t\t\t\tpriority += 10; // 一周内发布的\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error('解析文章日期时出错:', e);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// 检查内容长度和质量\n\t\t\tif (article.content) {\n\t\t\t\tif (article.content.length > 1000) {\n\t\t\t\t\tpriority += 5; // 长内容可能包含更多重要信息\n\t\t\t\t} else if (article.content.length > 500) {\n\t\t\t\t\tpriority += 3;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// 检查内容中是否明确提到了视频\n\t\t\t\tif (typeof article.content === 'string' && \n\t\t\t\t\t(article.content.includes('视频') || \n\t\t\t\t\t article.content.includes('观看') || \n\t\t\t\t\t article.content.includes('播放'))) {\n\t\t\t\t\tpriority += 8;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// 如果有互动数据，增加权重\n\t\t\tif (article.like_count > 10 || article.look_count > 50) {\n\t\t\t\tpriority += 10; // 增加高互动量文章的权重\n\t\t\t} else if (article.like_count > 5 || article.look_count > 20) {\n\t\t\t\tpriority += 5;\n\t\t\t}\n\t\t\t\n\t\t\t// 如果文章有评论，可能更有价值\n\t\t\tif (article.comment_count > 5) {\n\t\t\t\tpriority += 8;\n\t\t\t} else if (article.comment_count > 0) {\n\t\t\t\tpriority += 3;\n\t\t\t}\n\t\t\t\n\t\t\treturn priority;\n\t\t},\n\t\t\n\t\t// 新增方法：提取视频URL并评估质量\n\t\textractVideoUrlAndQuality(article) {\n\t\t\tif (!article) return null;\n\t\t\t\n\t\t\t// 基本结果结构\n\t\t\tconst result = {\n\t\t\t\turl: null,\n\t\t\t\tisHighQuality: false,\n\t\t\t\tresolution: 'unknown',\n\t\t\t\tsize: 0\n\t\t\t};\n\t\t\t\n\t\t\t// 首先检查schema中定义的videoURL字段\n\t\t\tif (article.videoURL && typeof article.videoURL === 'string' && this.isValidVideoUrl(article.videoURL)) {\n\t\t\t\tresult.url = article.videoURL;\n\t\t\t\tresult.isHighQuality = this.isHighQualityVideo(article.videoURL, article);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\t\n\t\t\t// 检查可能包含视频链接的所有常见字段\n\t\t\tconst possibleVideoFields = [\n\t\t\t\t'videoUrl',\n\t\t\t\t'video_url',\n\t\t\t\t'video',\n\t\t\t\t'videoSrc',\n\t\t\t\t'video_src',\n\t\t\t\t'url'\n\t\t\t];\n\t\t\t\n\t\t\t// 检查是否有直接的视频字段\n\t\t\tfor (let field of possibleVideoFields) {\n\t\t\t\tif (article[field] && typeof article[field] === 'string' && this.isValidVideoUrl(article[field])) {\n\t\t\t\t\tresult.url = article[field];\n\t\t\t\t\tresult.isHighQuality = this.isHighQualityVideo(article[field], article);\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// 检查可能包含视频数组的所有常见字段\n\t\t\tconst possibleVideoArrayFields = [\n\t\t\t\t'videos',\n\t\t\t\t'videoArr',\n\t\t\t\t'video_arr',\n\t\t\t\t'videoList',\n\t\t\t\t'video_list'\n\t\t\t];\n\t\t\t\n\t\t\t// 检查是否有视频数组\n\t\t\tfor (let field of possibleVideoArrayFields) {\n\t\t\t\tif (article[field] && Array.isArray(article[field]) && article[field].length > 0) {\n\t\t\t\t\tconst videoItem = article[field][0];\n\t\t\t\t\t\n\t\t\t\t\t// 如果数组项是字符串，直接使用\n\t\t\t\t\tif (typeof videoItem === 'string' && this.isValidVideoUrl(videoItem)) {\n\t\t\t\t\t\tresult.url = videoItem;\n\t\t\t\t\t\tresult.isHighQuality = this.isHighQualityVideo(videoItem, article);\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t} \n\t\t\t\t\t// 如果是对象，尝试获取url字段\n\t\t\t\t\telse if (typeof videoItem === 'object') {\n\t\t\t\t\t\tconst possibleUrlProps = ['url', 'src', 'source', 'path', 'videoUrl'];\n\t\t\t\t\t\tfor (let prop of possibleUrlProps) {\n\t\t\t\t\t\t\tif (videoItem[prop] && typeof videoItem[prop] === 'string' && this.isValidVideoUrl(videoItem[prop])) {\n\t\t\t\t\t\t\t\tresult.url = videoItem[prop];\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// 从对象中获取质量信息\n\t\t\t\t\t\t\t\tif (videoItem.quality || videoItem.resolution || videoItem.hd) {\n\t\t\t\t\t\t\t\t\tresult.isHighQuality = true;\n\t\t\t\t\t\t\t\t\tresult.resolution = videoItem.resolution || videoItem.quality || 'hd';\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tresult.isHighQuality = this.isHighQualityVideo(videoItem[prop], article);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// 检查是否有内容解析视频\n\t\t\tif (article.content) {\n\t\t\t\tconst videoUrlMatch = this.extractVideoUrlFromContent(article.content);\n\t\t\t\tif (videoUrlMatch) {\n\t\t\t\t\tresult.url = videoUrlMatch;\n\t\t\t\t\tresult.isHighQuality = this.isHighQualityVideo(videoUrlMatch, article);\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn null;\n\t\t},\n\t\t\n\t\t// 新增方法：检测是否为高质量视频\n\t\tisHighQualityVideo(videoUrl, article) {\n\t\t\tif (!videoUrl) return false;\n\t\t\t\n\t\t\t// 基于URL检查视频质量\n\t\t\tconst highQualityIndicators = ['hd', 'high', '720p', '1080p', '高清', 'mp4'];\n\t\t\tconst lowQualityIndicators = ['low', '240p', '360p', 'compressed', 'mini'];\n\t\t\t\n\t\t\t// 计算高质量指标分数\n\t\t\tlet qualityScore = 0;\n\t\t\t\n\t\t\t// 检查URL中的高质量指标\n\t\t\tfor (const indicator of highQualityIndicators) {\n\t\t\t\tif (videoUrl.toLowerCase().includes(indicator)) {\n\t\t\t\t\tqualityScore += 2;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// 检查URL中的低质量指标\n\t\t\tfor (const indicator of lowQualityIndicators) {\n\t\t\t\tif (videoUrl.toLowerCase().includes(indicator)) {\n\t\t\t\t\tqualityScore -= 2;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// 检查文章其他指标\n\t\t\tif (article) {\n\t\t\t\t// 如果是最近的文章，可能有更高质量的视频\n\t\t\t\tconst createTime = article.create_time || article.createTime || article.time;\n\t\t\t\tif (createTime) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst articleDate = new Date(createTime);\n\t\t\t\t\t\tconst now = new Date();\n\t\t\t\t\t\tconst daysDiff = Math.floor((now - articleDate) / (1000 * 60 * 60 * 24));\n\t\t\t\t\t\tif (daysDiff <= 7) {\n\t\t\t\t\t\t\tqualityScore += 3; // 一周内的文章\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t// 忽略日期解析错误\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// 如果文章互动量高，可能内容质量更好\n\t\t\t\tif (article.like_count > 10 || article.look_count > 50) {\n\t\t\t\t\tqualityScore += 2;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// 如果文章内容长，可能更有价值\n\t\t\t\tif (article.content && article.content.length > 500) {\n\t\t\t\t\tqualityScore += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// 检查视频格式\n\t\t\tif (videoUrl.endsWith('.mp4') || videoUrl.includes('.mp4?')) {\n\t\t\t\tqualityScore += 3; // MP4通常质量较好\n\t\t\t} else if (videoUrl.endsWith('.m3u8') || videoUrl.includes('.m3u8?')) {\n\t\t\t\tqualityScore += 2; // HLS流媒体格式\n\t\t\t}\n\t\t\t\n\t\t\t// 综合评分判断是否为高质量视频\n\t\t\treturn qualityScore >= 3;\n\t\t},\n\t\t\n\t\t// 页面加载时搜索所有文章的视频 - 优化版本\n\t\tasync searchAllVideosOnLoad() {\n\t\t\tconsole.log('正在搜索所有文章的视频...');\n\t\t\t\n\t\t\t// 创建一个数组存储所有找到的视频URL及其质量信息\n\t\t\tlet allFoundVideos = [];\n\t\t\tlet highQualityVideos = [];\n\t\t\t\n\t\t\t// 1. 首先从已加载的文章中搜索视频\n\t\t\tif (this.userArticleData && this.userArticleData.length > 0) {\n\t\t\t\tconsole.log(`从${this.userArticleData.length}篇已加载文章中搜索视频...`);\n\t\t\t\t\n\t\t\t\t// 对文章按创建时间和优先级排序\n\t\t\t\tconst sortedArticles = [...this.userArticleData].sort((a, b) => {\n\t\t\t\t\t// 首先按是否包含视频排序\n\t\t\t\t\tconst aHasVideo = this.checkArticleHasVideo(a);\n\t\t\t\t\tconst bHasVideo = this.checkArticleHasVideo(b);\n\t\t\t\t\tif (aHasVideo !== bHasVideo) {\n\t\t\t\t\t\treturn aHasVideo ? -1 : 1;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// 然后按优先级排序\n\t\t\t\t\tconst aPriority = this.getVideoPriority(a);\n\t\t\t\t\tconst bPriority = this.getVideoPriority(b);\n\t\t\t\t\tif (aPriority !== bPriority) {\n\t\t\t\t\t\treturn bPriority - aPriority;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// 最后按时间排序\n\t\t\t\t\tconst aTime = a.create_time || a.createTime || a.time || 0;\n\t\t\t\t\tconst bTime = b.create_time || b.createTime || b.time || 0;\n\t\t\t\t\t\n\t\t\t\t\tif (typeof aTime === 'string' && typeof bTime === 'string') {\n\t\t\t\t\t\treturn new Date(bTime) - new Date(aTime);\n\t\t\t\t\t} else if (typeof aTime === 'number' && typeof bTime === 'number') {\n\t\t\t\t\t\treturn bTime - aTime;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\treturn 0;\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\t// 遍历排序后的文章\n\t\t\t\tfor (let article of sortedArticles) {\n\t\t\t\t\tconst videoResult = this.extractVideoUrlAndQuality(article);\n\t\t\t\t\tif (videoResult && videoResult.url && this.isValidVideoUrl(videoResult.url)) {\n\t\t\t\t\t\tconsole.log(`在文章(${article._id || '未知ID'})中找到视频: ${videoResult.url}, 质量: ${videoResult.isHighQuality ? '高' : '普通'}`);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// 添加到对应的数组\n\t\t\t\t\t\tif (!allFoundVideos.includes(videoResult.url)) {\n\t\t\t\t\t\t\tallFoundVideos.push(videoResult.url);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (videoResult.isHighQuality) {\n\t\t\t\t\t\t\t\thighQualityVideos.push(videoResult.url);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// 找到足够的视频后停止搜索\n\t\t\t\t\t\tif (highQualityVideos.length >= 3 || allFoundVideos.length >= 10) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// 2. 判断是否需要加载更多文章来搜索视频\n\t\t\tconst totalArticles = this.totalArticleCount || 0;\n\t\t\tconst loadedArticles = this.userArticleData ? this.userArticleData.length : 0;\n\t\t\t\n\t\t\t// 如果已经找到高质量视频或已加载所有文章，则不需要加载更多\n\t\t\tif (highQualityVideos.length > 0 || loadedArticles >= totalArticles) {\n\t\t\t\tconsole.log(`已找到${highQualityVideos.length}个高质量视频，共${allFoundVideos.length}个视频，不需要加载更多文章`);\n\t\t\t} else if (allFoundVideos.length === 0 && totalArticles > loadedArticles && this.hasMore) {\n\t\t\t\t// 需要加载更多文章\n\t\t\t\tconsole.log(`已加载${loadedArticles}篇文章，共有${totalArticles}篇，尝试加载更多来搜索高质量视频...`);\n\t\t\t\t\n\t\t\t\ttry {\n\t\t\t\t\t// 临时存储当前页码\n\t\t\t\t\tconst originalPageNo = this.pageNo;\n\t\t\t\t\tconst maxPagesToLoad = 2; // 最多额外加载2页，防止过多请求\n\t\t\t\t\t\n\t\t\t\t\t// 尝试最多额外加载2页来搜索视频\n\t\t\t\t\tfor (let i = 0; i < maxPagesToLoad && this.hasMore && highQualityVideos.length === 0; i++) {\n\t\t\t\t\t\tthis.pageNo++;\n\t\t\t\t\t\tconsole.log(`加载第${this.pageNo}页文章来搜索视频...`);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// 加载新一页的文章\n\t\t\t\t\t\tawait this.getArticelList(false);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// 从新加载的文章中搜索视频\n\t\t\t\t\t\tif (this.userArticleData && this.userArticleData.length > loadedArticles) {\n\t\t\t\t\t\t\t// 只检查新加载的文章\n\t\t\t\t\t\t\tconst newArticles = this.userArticleData.slice(loadedArticles);\n\t\t\t\t\t\t\tconsole.log(`从新加载的${newArticles.length}篇文章中搜索视频...`);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// 对新文章排序\n\t\t\t\t\t\t\tconst sortedNewArticles = [...newArticles].sort((a, b) => {\n\t\t\t\t\t\t\t\treturn this.getVideoPriority(b) - this.getVideoPriority(a);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tfor (let article of sortedNewArticles) {\n\t\t\t\t\t\t\t\tconst videoResult = this.extractVideoUrlAndQuality(article);\n\t\t\t\t\t\t\t\tif (videoResult && videoResult.url && this.isValidVideoUrl(videoResult.url)) {\n\t\t\t\t\t\t\t\t\tconsole.log(`在新加载文章(${article._id || '未知ID'})中找到视频: ${videoResult.url}, 质量: ${videoResult.isHighQuality ? '高' : '普通'}`);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (!allFoundVideos.includes(videoResult.url)) {\n\t\t\t\t\t\t\t\t\t\tallFoundVideos.push(videoResult.url);\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t\tif (videoResult.isHighQuality) {\n\t\t\t\t\t\t\t\t\t\t\thighQualityVideos.push(videoResult.url);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t// 找到足够的高质量视频后停止搜索\n\t\t\t\t\t\t\t\t\tif (highQualityVideos.length >= 2 || allFoundVideos.length >= 5) {\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error('加载更多文章搜索视频时出错:', err);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// 保存找到的所有视频\n\t\t\tif (allFoundVideos.length > 0) {\n\t\t\t\tconsole.log(`共找到${allFoundVideos.length}个视频链接，其中${highQualityVideos.length}个高质量视频`);\n\t\t\t\t\n\t\t\t\t// 更新视频缓存，优先使用高质量视频\n\t\t\t\tthis.videoUrlCache = highQualityVideos.length > 0 ? \n\t\t\t\t\t[...highQualityVideos, ...allFoundVideos.filter(url => !highQualityVideos.includes(url))] : \n\t\t\t\t\tallFoundVideos;\n\t\t\t\t\n\t\t\t\t// 自动播放最佳视频（除非用户之前关闭了视频）\n\t\t\t\tif (!this.userClosedVideo) {\n\t\t\t\t\t// 优先使用高质量视频，没有则使用普通视频\n\t\t\t\t\tconst bestVideoUrl = highQualityVideos.length > 0 ? highQualityVideos[0] : allFoundVideos[0];\n\t\t\t\t\t\n\t\t\t\t\tthis.videoUrl = bestVideoUrl;\n\t\t\t\t\tthis.videoVisible = true;\n\t\t\t\t\t\n\t\t\t\t\t// 在下一个渲染周期初始化视频上下文\n\t\t\t\t\tthis.$nextTick(() => {\n\t\t\t\t\t\tthis.initVideoContext();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// 发出事件通知找到了视频\n\t\t\t\tuni.$emit('videosFound', { \n\t\t\t\t\tcount: allFoundVideos.length,\n\t\t\t\t\thighQualityCount: highQualityVideos.length,\n\t\t\t\t\tvideos: this.videoUrlCache\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\treturn this.videoUrlCache;\n\t\t\t} else {\n\t\t\t\tconsole.log('未找到任何视频链接');\n\t\t\t\treturn [];\n\t\t\t}\n\t\t},\n\t},\n\t\n\t// 分享给朋友\n\tonShareAppMessage() {\n\t\t// 使用统一的分享信息方法\n\t\treturn this.getShareInfo();\n\t},\n\t\n\t// 分享到朋友圈\n\tonShareTimeline() {\n\t\t// 获取统一的分享信息\n\t\tconst shareInfo = this.getTimelineShareInfo();\n\t\t\n\t\t// 构建朋友圈分享信息\n\t\treturn shareInfo;\n\t}\n}\n</script>\n\n<template>\n\t<view class=\"userArticleList\">\n\t\t\n\t\t<!-- 添加微信开放能力按钮 (隐藏但功能可用) -->\n\t\t<button \n\t\t\topen-type=\"share\" \n\t\t\tstyle=\"position: absolute; width: 0; height: 0; padding: 0; margin: 0; opacity: 0;\"\n\t\t></button>\n\t\t\n\t\t<!-- 用于生成分享图的Canvas (隐藏) -->\n\t\t<canvas canvas-id=\"shareCanvas\" style=\"width: 750px; height: 600px; position: absolute; left: -2000px; top: 0;\"></canvas>\n\t\t\n\t\t<scroll-view \n\t\t\t@scrolltolower=\"scrolltolower\" \n\t\t\t:scroll-y=\"true\" \n\t\t\tclass=\"scroll-view-article\"\n\t\t\trefresher-enabled\n\t\t\t:refresher-triggered=\"isRefreshing\"\n\t\t\t@refresherrefresh=\"onRefresh\"\n\t\t\tshow-scrollbar=\"true\"\n\t\t\tenable-passive=\"true\" \n\t\t\tenable-back-to-top=\"true\"\n\t\t\tenhanced=\"true\"\n\t\t\tbounces=\"true\"\n\t\t\trefresher-threshold=\"80\"\n\t\t\trefresher-background=\"#f2f2f2\">\n\t\t\t<view class=\"content\">\n\t\t\t\t<!-- 用户信息头部 -->\n\t\t\t\t<view class=\"head\">\n\t\t\t\t\t<user-header @contact=\"handleContact\" @publish=\"goToPublish\" :articleTotal=\"articleTotal\"\n\t\t\t\t\t\t:userInfo=\"userArticleInfo\"></user-header>\n\t\t\t\t</view>\n\t\t\t\t\n\t\t\t\t<!-- 视频播放组件 -->\n\t\t\t\t<view class=\"video-container\" v-if=\"videoUrl && videoUrl.length > 0\">\n\t\t\t\t\t<video \n\t\t\t\t\t\tid=\"myVideo\"\n\t\t\t\t\t\t:src=\"videoUrl\"\n\t\t\t\t\t\tclass=\"video-player\"\n\t\t\t\t\t\tobject-fit=\"cover\" \n\t\t\t\t\t\tcontrols \n\t\t\t\t\t\tautoplay\n\t\t\t\t\t\t@play=\"onVideoPlay\"\n\t\t\t\t\t\t@pause=\"onVideoPause\"\n\t\t\t\t\t\t@ended=\"onVideoEnded\"\n\t\t\t\t\t\t@error=\"onVideoError\"\n\t\t\t\t\t\t:loop=\"false\"\n\t\t\t\t\t\tenable-progress-gesture\n\t\t\t\t\t\tenable-play-gesture\n\t\t\t\t\t\tshow-fullscreen-btn\n\t\t\t\t\t\tshow-play-btn\n\t\t\t\t\t\tshow-center-play-btn\n\t\t\t\t\t\t@fullscreenchange=\"handleFullscreenChange\">\n\t\t\t\t\t</video>\n\t\t\t\t\t<!-- 关闭按钮 -->\n\t\t\t\t\t<view class=\"video-close-btn\" @click=\"hideVideo\">\n\t\t\t\t\t\t<text class=\"close-icon\">×</text>\n\t\t\t\t\t</view>\n\t\t\t\t</view>\n\t\t\t\t\n\t\t\t\t<!-- 文章列表 -->\n\t\t\t\t<articleItem v-if=\"userArticleData && userArticleData.length > 0\"\n\t\t\t\t\t@preview=\"(url, urls) => previewImage(urls, url)\" @contact=\"handleContact\"\n\t\t\t\t\t@delete=\"handleDelete\" v-for=\"item in userArticleData\" :item=\"item\" :key=\"item._id\"\n\t\t\t\t\t:avatarClickEnabled=\"avatarClickEnabled\">\n\t\t\t\t\t<!-- 添加视频标记 -->\n\t\t\t\t\t<template v-if=\"item.hasVideo\" #video-badge>\n\t\t\t\t\t\t<view class=\"video-badge\" @click.stop=\"playArticleVideo(item)\">\n\t\t\t\t\t\t\t<text class=\"video-badge-icon\">▶</text>\n\t\t\t\t\t\t\t<text class=\"video-badge-text\">视频</text>\n\t\t\t\t\t\t</view>\n\t\t\t\t\t</template>\n\t\t\t\t</articleItem>\n\t\t\t\t<view v-else class=\"empty-state\">\n\t\t\t\t\t<text>暂无文章</text>\n\t\t\t\t</view>\n\t\t\t\t\n\t\t\t\t<!-- 加载状态 - 优化显示 -->\n\t\t\t\t<view style=\"margin-bottom: 120rpx; padding-bottom: 90rpx;\">\n\t\t\t\t\t<uni-load-more color=\"#d6d6d6\" :status=\"status\" :content-text=\"loadMoreText\" />\n\t\t\t\t</view>\n\t\t\t\t\n\t\t\t\t<!-- 底部安全区域间距 -->\n\t\t\t\t<view class=\"safe-area-inset-bottom\"></view>\n\t\t\t</view>\n\t\t</scroll-view>\n\t\t\n\t\t<!-- 优化后的分享按钮 -->\n\t\t<view class=\"share-buttons\">\n\t\t\t<!-- 分享到朋友圈按钮 - 显示提示引导用户 -->\n\t\t\t<button class=\"share-btn share-to-group\" @tap=\"shareToTimeline\">\n\t\t\t\t<text class=\"icon lishuai-iconfontzhizuobiaozhunbduan36\"></text>\n\t\t\t\t<text class=\"btn-text\">分享朋友圈</text>\n\t\t\t</button>\n\t\t\t\n\t\t\t<!-- 发给好友按钮 - 直接使用open-type=\"share\"调起转发 -->\n\t\t\t<button class=\"share-btn share-to-friend\" open-type=\"share\">\n\t\t\t\t<text class=\"icon lishuai-weixin\"></text>\n\t\t\t\t<text class=\"btn-text\">发给好友</text>\n\t\t\t</button>\n\t\t</view>\n\t\t\n\t\t<!-- 全屏弹窗 -->\n\t\t<view class=\"full-screen-popup\" v-if=\"showFullScreenPopup\" @tap=\"closeFullScreenPopup\">\n\t\t\t<view class=\"popup-content\" @tap.stop>\n\t\t\t\t<view class=\"popup-header\">\n\t\t\t\t\t<text class=\"popup-title\">分享到朋友圈</text>\n\t\t\t\t\t<text class=\"popup-close\" @tap=\"closeFullScreenPopup\">×</text>\n\t\t\t\t</view>\n\t\t\t\t<view class=\"popup-body\">\n\t\t\t\t\t<image class=\"popup-image\" :src=\"dynamicShareImage || defaultShareImage\" mode=\"aspectFit\"></image>\n\t\t\t\t\t<view class=\"popup-text\">\n\t\t\t\t\t\t<text>点击右上角 \"...\" 按钮</text>\n\t\t\t\t\t\t<text>选择 \"分享到朋友圈\"</text>\n\t\t\t\t\t</view>\n\t\t\t\t</view>\n\t\t\t\t<view class=\"popup-footer\">\n\t\t\t\t\t<button class=\"popup-btn\" @tap=\"closeFullScreenPopup\">我知道了</button>\n\t\t\t\t</view>\n\t\t\t</view>\n\t\t</view>\n\t</view>\n</template>\n\n<style lang=\"scss\" scoped>\n\t.userArticleList {\n\t\theight: 100vh;\n\t\tbackground-color: $pyq-pages-bg-color;\n\t\tposition: relative;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\ttouch-action: pan-y; /* 优化触摸响应 */\n\n\t\t.content {\n\t\t\tpadding-bottom: env(safe-area-inset-bottom);\n\t\t\tpadding: 20rpx;\n\t\t\t-webkit-overflow-scrolling: touch; /* iOS流畅滚动 */\n\n\t\t\t.head {\n\t\t\t\tmargin-bottom: 2rpx;\n\t\t\t}\n\t\t\t\n\t\t\t.empty-state {\n\t\t\t\tdisplay: flex;\n\t\t\t\tjustify-content: center;\n\t\t\t\talign-items: center;\n\t\t\t\tpadding: 40rpx 0;\n\t\t\t\tcolor: #999;\n\t\t\t\tfont-size: 28rpx;\n\t\t\t}\n\t\t}\n\t\t\n\t\t.scroll-view-article {\n\t\t\tflex: 1;\n\t\t\theight: 0; /* 使用flex布局时，设置height为0使其自动扩展 */\n\t\t\tpadding-bottom: 120rpx; /* 为底部按钮留出空间 */\n\t\t\t-webkit-overflow-scrolling: touch; /* iOS流畅滚动 */\n\t\t}\n\t\t\n\t\t/* 文本省略样式 */\n\t\t.ellipsis {\n\t\t\twhite-space: nowrap;\n\t\t\toverflow: hidden;\n\t\t\ttext-overflow: ellipsis;\n\t\t}\n\t\t\n\t\t.ellipsis-2 {\n\t\t\tdisplay: -webkit-box;\n\t\t\t-webkit-box-orient: vertical;\n\t\t\t-webkit-line-clamp: 2;\n\t\t\toverflow: hidden;\n\t\t\ttext-overflow: ellipsis;\n\t\t\tword-break: break-all;\n\t\t}\n\t\t\n\t\t/* 正方形图片样式 */\n\t\t.square-image {\n\t\t\twidth: 100%;\n\t\t\theight: 100%;\n\t\t\tborder-radius: 8rpx;\n\t\t\tobject-fit: cover; /* 确保图片填充容器并裁剪到最短边 */\n\t\t}\n\t\t\n\t\t/* 分享标题显示区域 */\n\t\t.share-titles {\n\t\t\tbackground-color: #fff;\n\t\t\tpadding: 20rpx;\n\t\t\tmargin-bottom: 10rpx;\n\t\t\tborder-bottom: 1px solid #eee;\n\t\t\t\n\t\t\t.title-box {\n\t\t\t\tmargin-bottom: 10rpx;\n\t\t\t\t\n\t\t\t\t.title-label {\n\t\t\t\t\tfont-size: 24rpx;\n\t\t\t\t\tcolor: #666;\n\t\t\t\t\tmargin-bottom: 4rpx;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t.title-content {\n\t\t\t\t\tfont-size: 28rpx;\n\t\t\t\t\tcolor: #333;\n\t\t\t\t\tpadding: 10rpx;\n\t\t\t\t\tbackground-color: #f8f8f8;\n\t\t\t\t\tborder-radius: 8rpx;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t/* 优化后的分享按钮样式 */\n\t\t.share-buttons {\n\t\t\tposition: fixed;\n\t\t\tbottom: 80rpx;\n\t\t\tleft: 0;\n\t\t\tright: 0;\n\t\t\tdisplay: flex;\n\t\t\tjustify-content: center;\n\t\t\tgap: 30rpx;\n\t\t\tz-index: 100;\n\t\t\tpadding: 0 80rpx;\n\t\t}\n\t\t\n\t\t.share-btn {\n\t\t\tflex: 1;\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\t\t\tjustify-content: center;\n\t\t\theight: 80rpx;\n\t\t\tborder-radius: 40rpx;\n\t\t\tborder: none;\n\t\t\tcolor: #ffffff;\n\t\t\tfont-size: 28rpx;\n\t\t\tfont-weight: 500;\n\t\t\tbox-shadow: 0 4rpx 12rpx rgba(0, 0, 0, 0.15);\n\t\t\ttransition: all 0.3s ease;\n\t\t\t\n\t\t\t&::after {\n\t\t\t\tborder: none; /* 移除按钮默认边框 */\n\t\t\t}\n\t\t\t\n\t\t\t.icon {\n\t\t\t\tfont-size: 38rpx;\n\t\t\t\tcolor: #FFFFFF;\n\t\t\t}\n\t\t\t\n\t\t\t.btn-text {\n\t\t\t\tmargin-left: 10rpx;\n\t\t\t}\n\t\t\t\n\t\t\t&.share-to-group {\n\t\t\t\tbackground: linear-gradient(135deg, #f7991e, #f39b16); /* 渐变橙色 */\n\t\t\t\t\n\t\t\t\t&:active {\n\t\t\t\t\ttransform: scale(0.95);\n\t\t\t\t\tbox-shadow: 0 2rpx 6rpx rgba(0, 0, 0, 0.15);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t&.share-to-friend {\n\t\t\t\tbackground: linear-gradient(135deg, #5ecc80, #4fc08d); /* 渐变绿色 */\n\t\t\t\t\n\t\t\t\t&:active {\n\t\t\t\t\ttransform: scale(0.95);\n\t\t\t\t\tbox-shadow: 0 2rpx 6rpx rgba(0, 0, 0, 0.15);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t.safe-area-inset-bottom {\n\t\t\theight: 30rpx;\n\t\t\tpadding-bottom: env(safe-area-inset-bottom);\n\t\t}\n\t\t\n\t\t/* 防止滚动时出现白色间隙 */\n\t\toverflow: hidden;\n\t}\n\t\n\t/* 视频播放器相关样式 */\n\t.video-container {\n\t\tposition: relative;\n\t\tmargin: 20rpx auto 20rpx;\n\t\tborder-radius: 12rpx;\n\t\toverflow: hidden;\n\t}\n\t\n\t.video-player {\n\t\twidth: 100%;\n\t\theight: 420rpx; /* 16:9 宽高比 */\n\t\tbackground-color: #000;\n\t\tborder-radius: 5rpx;\n\t}\n\t\n\t.video-close-btn {\n\t\tposition: absolute;\n\t\ttop: 20rpx;\n\t\tright: 20rpx;\n\t\twidth: 60rpx;\n\t\theight: 60rpx;\n\t\tbackground-color: rgba(0, 0, 0, 0.6);\n\t\tborder-radius: 40rpx;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t\tz-index: 101;\n\t\ttransition: all 0.2s ease;\n\t\tbox-shadow: 0 0 10rpx rgba(0, 0, 0, 0.3);\n\t\t\n\t\t.close-icon {\n\t\t\tcolor: #fff;\n\t\t\tfont-size: 50rpx;\n\t\t\tfont-weight: bold;\n\t\t}\n\t\t\n\t\t&:active {\n\t\t\tbackground-color: rgba(0, 0, 0, 0.8);\n\t\t\ttransform: scale(0.95);\n\t\t}\n\t}\n\t\n\t\n\t\n\t.placeholder-content {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t}\n\t\n\t.placeholder-icon {\n\t\tcolor: #fff;\n\t\tfont-size: 50rpx;\n\t\tmargin-bottom: 10rpx;\n\t}\n\t\n\t.placeholder-text {\n\t\tcolor: #fff;\n\t\tfont-size: 28rpx;\n\t\tfont-weight: 500;\n\t}\n\t\n\t/* 分享引导蒙层样式 */\n\t.share-guide-overlay {\n\t\tposition: fixed;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\tright: 0;\n\t\tbottom: 0;\n\t\tz-index: 9999;\n\t\t\n\t\t/* 半透明黑色背景 */\n\t\t.overlay-bg {\n\t\t\tposition: absolute;\n\t\t\ttop: 0;\n\t\t\tleft: 0;\n\t\t\tright: 0;\n\t\t\tbottom: 0;\n\t\t\tbackground-color: rgba(0, 0, 0, 0.8);\n\t\t}\n\t\t\n\t\t/* 顶部引导提示 */\n\t\t.top-guide {\n\t\t\tposition: absolute;\n\t\t\ttop: 120rpx;\n\t\t\tright: 120rpx;\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\t\t\tbackground-color: #fff;\n\t\t\tborder-radius: 40rpx;\n\t\t\tpadding: 10rpx 25rpx;\n\t\t\tbox-shadow: 0 4rpx 8rpx rgba(0, 0, 0, 0.2);\n\t\t\tz-index: 1;\n\t\t\t\n\t\t\t.guide-number {\n\t\t\t\twidth: 36rpx;\n\t\t\t\theight: 36rpx;\n\t\t\t\tline-height: 36rpx;\n\t\t\t\ttext-align: center;\n\t\t\t\tbackground-color: #ff6b00;\n\t\t\t\tcolor: #fff;\n\t\t\t\tborder-radius: 50%;\n\t\t\t\tfont-size: 26rpx;\n\t\t\t\tfont-weight: bold;\n\t\t\t\tmargin-right: 10rpx;\n\t\t\t}\n\t\t\t\n\t\t\t.guide-text {\n\t\t\t\tcolor: #333;\n\t\t\t\tfont-size: 28rpx;\n\t\t\t\tfont-weight: 500;\n\t\t\t}\n\t\t}\n\t\t\n\t\t/* 引导箭头线 */\n\t\t.guide-arrow-line {\n\t\t\tposition: absolute;\n\t\t\ttop: 180rpx;\n\t\t\tright: 160rpx;\n\t\t\twidth: 300rpx;\n\t\t\theight: 700rpx;\n\t\t\t\n\t\t\t/* 使用伪元素创建虚线 */\n\t\t\t&::before {\n\t\t\t\tcontent: '';\n\t\t\t\tposition: absolute;\n\t\t\t\ttop: 0;\n\t\t\t\tright: 40rpx;\n\t\t\t\theight: 100%;\n\t\t\t\twidth: 8rpx;\n\t\t\t\tbackground: transparent;\n\t\t\t\tborder: none;\n\t\t\t\tbox-shadow: 6rpx 0 0 #fff;\n\t\t\t\tborder-radius: 0 0 0 100%;\n\t\t\t\ttransform: rotate(-20deg);\n\t\t\t}\n\t\t\t\n\t\t\t/* 箭头尖端 */\n\t\t\t.arrow-end {\n\t\t\t\tposition: absolute;\n\t\t\t\tbottom: 20rpx;\n\t\t\t\tright: 270rpx;\n\t\t\t\twidth: 24rpx;\n\t\t\t\theight: 24rpx;\n\t\t\t\tborder-right: 6rpx solid #fff;\n\t\t\t\tborder-bottom: 6rpx solid #fff;\n\t\t\t\ttransform: rotate(45deg);\n\t\t\t}\n\t\t}\n\t\t\n\t\t/* 底部引导文字 */\n\t\t.bottom-guide {\n\t\t\tposition: absolute;\n\t\t\tbottom: 400rpx;\n\t\t\tleft: 0;\n\t\t\tright: 0;\n\t\t\ttext-align: center;\n\t\t\tcolor: #fff;\n\t\t\tfont-size: 36rpx;\n\t\t\tfont-weight: 500;\n\t\t\tline-height: 1.8;\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\t\t\talign-items: center;\n\t\t\t\n\t\t\t.close-tip {\n\t\t\t\tmargin-top: 60rpx;\n\t\t\t\tfont-size: 24rpx;\n\t\t\t\tcolor: rgba(255, 255, 255, 0.7);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/* 全屏弹窗样式 */\n\t.full-screen-popup {\n\t\tposition: fixed;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\tright: 0;\n\t\tbottom: 0;\n\t\tbackground-color: rgba(0, 0, 0, 0.75);\n\t\tz-index: 9999;\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t\t\n\t\t.popup-content {\n\t\t\twidth: 80%;\n\t\t\tbackground-color: #fff;\n\t\t\tborder-radius: 24rpx;\n\t\t\toverflow: hidden;\n\t\t\tbox-shadow: 0 4rpx 16rpx rgba(0, 0, 0, 0.2);\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\t\t}\n\t\t\n\t\t.popup-header {\n\t\t\tposition: relative;\n\t\t\tpadding: 30rpx;\n\t\t\ttext-align: center;\n\t\t\tborder-bottom: 1px solid #f0f0f0;\n\t\t\t\n\t\t\t.popup-title {\n\t\t\t\tfont-size: 34rpx;\n\t\t\t\tfont-weight: bold;\n\t\t\t\tcolor: #333;\n\t\t\t}\n\t\t\t\n\t\t\t.popup-close {\n\t\t\t\tposition: absolute;\n\t\t\t\tright: 30rpx;\n\t\t\t\ttop: 30rpx;\n\t\t\t\tfont-size: 40rpx;\n\t\t\t\tcolor: #999;\n\t\t\t\tline-height: 1;\n\t\t\t}\n\t\t}\n\t\t\n\t\t.popup-body {\n\t\t\tpadding: 40rpx;\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\t\t\talign-items: center;\n\t\t\t\n\t\t\t.popup-image {\n\t\t\t\twidth: 100%;\n\t\t\t\theight: 400rpx;\n\t\t\t\tmargin-bottom: 30rpx;\n\t\t\t\tborder-radius: 12rpx;\n\t\t\t\tbackground-color: #f5f5f5;\n\t\t\t}\n\t\t\t\n\t\t\t.popup-text {\n\t\t\t\tdisplay: flex;\n\t\t\t\tflex-direction: column;\n\t\t\t\talign-items: center;\n\t\t\t\t\n\t\t\t\ttext {\n\t\t\t\t\tfont-size: 32rpx;\n\t\t\t\t\tcolor: #333;\n\t\t\t\t\tmargin-bottom: 16rpx;\n\t\t\t\t\t\n\t\t\t\t\t&:last-child {\n\t\t\t\t\t\tcolor: #ff8c3e;\n\t\t\t\t\t\tfont-weight: bold;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t.popup-footer {\n\t\t\tpadding: 30rpx;\n\t\t\tdisplay: flex;\n\t\t\tjustify-content: center;\n\t\t\t\n\t\t\t.popup-btn {\n\t\t\t\tbackground: linear-gradient(135deg, #ff9f43, #ff8c3e);\n\t\t\t\tcolor: #fff;\n\t\t\t\tfont-size: 32rpx;\n\t\t\t\tfont-weight: 500;\n\t\t\t\tpadding: 20rpx 80rpx;\n\t\t\t\tborder-radius: 40rpx;\n\t\t\t\tborder: none;\n\t\t\t\t\n\t\t\t\t&::after {\n\t\t\t\t\tborder: none;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/* 增加加载更多组件与底部的距离 */\n\t.loading-more-spacing {\n\t\tmargin-bottom: 90rpx; /* 增加到60rpx */\n\t\tmargin-top: 40rpx; /* 增加顶部边距 */\n\t\tpadding-bottom: 60rpx; /* 增加底部内边距 */\n\t\tposition: relative; /* 添加相对定位，便于添加装饰元素 */\n\t\t\n\t\t/* 确保内部uni-load-more组件有足够间距 */\n\t\t:deep(.uni-load-more) {\n\t\t\tpadding: 40rpx 0;\n\t\t\t\n\t\t\t/* 自定义文本样式 */\n\t\t\t.uni-load-more__text {\n\t\t\t\tfont-size: 26rpx;\n\t\t\t\tcolor: #888888;\n\t\t\t}\n\t\t\t\n\t\t\t/* 自定义loading动画样式 */\n\t\t\t.uni-load-more__img {\n\t\t\t\twidth: 36rpx !important;\n\t\t\t\theight: 36rpx !important;\n\t\t\t}\n\t\t}\n\t\t\n\t\t/* 添加上下装饰线 */\n\t\t&::before, &::after {\n\t\t\tcontent: '';\n\t\t\tposition: absolute;\n\t\t\tleft: 50%;\n\t\t\ttransform: translateX(-50%);\n\t\t\twidth: 120rpx;\n\t\t\theight: 2rpx;\n\t\t\tbackground: linear-gradient(to right, transparent, #e0e0e0, transparent);\n\t\t}\n\t\t\n\t\t&::before {\n\t\t\ttop: 0;\n\t\t}\n\t\t\n\t\t&::after {\n\t\t\tbottom: 0;\n\t\t}\n\t}\n\t\n\t.video-badge {\n\t\tposition: absolute;\n\t\ttop: 10rpx;\n\t\tright: 10rpx;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tbackground-color: rgba(0, 0, 0, 0.6);\n\t\tpadding: 4rpx 16rpx;\n\t\tborder-radius: 30rpx;\n\t\tz-index: 10;\n\t\t\n\t\t.video-badge-icon {\n\t\t\tcolor: #fff;\n\t\t\tfont-size: 20rpx;\n\t\t\tmargin-right: 6rpx;\n\t\t}\n\t\t\n\t\t.video-badge-text {\n\t\t\tcolor: #fff;\n\t\t\tfont-size: 22rpx;\n\t\t}\n\t\t\n\t\t&:active {\n\t\t\tbackground-color: rgba(0, 0, 0, 0.8);\n\t\t\ttransform: scale(0.96);\n\t\t}\n\t}\n</style>\n\n<!-- 移除全局样式中的标签选择器，避免微信小程序的限制 -->\n<!-- 注意：这些样式应该在组件内部使用类选择器实现，而不是在这里全局覆盖 -->","import MiniProgramPage from 'E:/wx2/pages/userArticleList/userArticleList.vue'\nwx.createPage(MiniProgramPage)"],"mappings":"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","ignoreList":[]}