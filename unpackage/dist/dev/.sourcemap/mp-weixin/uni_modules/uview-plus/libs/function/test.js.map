{"version":3,"file":"test.js","sources":["uni_modules/uview-plus/libs/function/test.js"],"sourcesContent":["/**\n * 验证电子邮箱格式\n */\nexport function email(value) {\n    return /^\\w+((-\\w+)|(\\.\\w+))*\\@[A-Za-z0-9]+((\\.|-)[A-Za-z0-9]+)*\\.[A-Za-z0-9]+$/.test(value)\n}\n\n/**\n * 验证手机格式\n */\nexport function mobile(value) {\n    return /^1[23456789]\\d{9}$/.test(value)\n}\n\n/**\n * 验证URL格式\n */\nexport function url(value) {\n    return /^((https|http|ftp|rtsp|mms):\\/\\/)(([0-9a-zA-Z_!~*'().&=+$%-]+: )?[0-9a-zA-Z_!~*'().&=+$%-]+@)?(([0-9]{1,3}.){3}[0-9]{1,3}|([0-9a-zA-Z_!~*'()-]+.)*([0-9a-zA-Z][0-9a-zA-Z-]{0,61})?[0-9a-zA-Z].[a-zA-Z]{2,6})(:[0-9]{1,4})?((\\/?)|(\\/[0-9a-zA-Z_!~*'().;?:@&=+$,%#-]+)+\\/?)$/\n        .test(value)\n}\n\n/**\n * 验证日期格式\n * @param {number | string} value yyyy-mm-dd hh:mm:ss 或 时间戳\n */\nexport function date(value) {\n    if (!value) return false;\n    // number类型，判断是否是时间戳\n    if (typeof value === \"number\") {\n        // len === 10 秒级时间戳 len === 13 毫秒级时间戳\n        if (value.toString().length !== 10 && value.toString().length !== 13) {\n            return false;\n        }\n        return !isNaN(new Date(value).getTime());\n    }\n    if (typeof value === \"string\") {\n        // 是否为string类型时间戳\n        const numV = Number(value);\n        if (!isNaN(numV)) {\n            if (\n                numV.toString().length === 10 ||\n                numV.toString().length === 13\n            ) {\n                return !isNaN(new Date(numV).getTime());\n            }\n        }\n        // 非时间戳，且长度在yyyy-mm-dd 至 yyyy-mm-dd hh:mm:ss 之间\n        if (value.length < 10 || value.length > 19) {\n            return false;\n        }\n        const dateRegex =\n            /^\\d{4}[-\\/]\\d{2}[-\\/]\\d{2}( \\d{1,2}:\\d{2}(:\\d{2})?)?$/;\n        if (!dateRegex.test(value)) {\n            return false;\n        }\n        // 检查是否为有效日期\n        const dateValue = new Date(value);\n        return !isNaN(dateValue.getTime());\n    }\n    // 非number和string类型，不做校验\n    return false;\n}\n\n/**\n * 验证ISO类型的日期格式\n */\nexport function dateISO(value) {\n    return /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/.test(value)\n}\n\n/**\n * 验证十进制数字\n */\nexport function number(value) {\n    return /^[\\+-]?(\\d+\\.?\\d*|\\.\\d+|\\d\\.\\d+e\\+\\d+)$/.test(value)\n}\n\n/**\n * 验证字符串\n */\nexport function string(value) {\n    return typeof value === 'string'\n}\n\n/**\n * 验证整数\n */\nexport function digits(value) {\n    return /^\\d+$/.test(value)\n}\n\n/**\n * 验证身份证号码\n */\nexport function idCard(value) {\n    return /^[1-9]\\d{5}[1-9]\\d{3}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}([0-9]|X)$/.test(\n        value\n    )\n}\n\n/**\n * 是否车牌号\n */\nexport function carNo(value) {\n    // 新能源车牌\n    const xreg = /^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]{1}[A-Z]{1}(([0-9]{5}[DF]$)|([DF][A-HJ-NP-Z0-9][0-9]{4}$))/\n    // 旧车牌\n    const creg = /^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]{1}[A-Z]{1}[A-HJ-NP-Z0-9]{4}[A-HJ-NP-Z0-9挂学警港澳]{1}$/\n    if (value.length === 7) {\n        return creg.test(value)\n    } if (value.length === 8) {\n        return xreg.test(value)\n    }\n    return false\n}\n\n/**\n * 金额,只允许2位小数\n */\nexport function amount(value) {\n    // 金额，只允许保留两位小数\n    return /^[1-9]\\d*(,\\d{3})*(\\.\\d{1,2})?$|^0\\.\\d{1,2}$/.test(value)\n}\n\n/**\n * 中文\n */\nexport function chinese(value) {\n    const reg = /^[\\u4e00-\\u9fa5]+$/gi\n    return reg.test(value)\n}\n\n/**\n * 只能输入字母\n */\nexport function letter(value) {\n    return /^[a-zA-Z]*$/.test(value)\n}\n\n/**\n * 只能是字母或者数字\n */\nexport function enOrNum(value) {\n    // 英文或者数字\n    const reg = /^[0-9a-zA-Z]*$/g\n    return reg.test(value)\n}\n\n/**\n * 验证是否包含某个值\n */\nexport function contains(value, param) {\n    return value.indexOf(param) >= 0\n}\n\n/**\n * 验证一个值范围[min, max]\n */\nexport function range(value, param) {\n    return value >= param[0] && value <= param[1]\n}\n\n/**\n * 验证一个长度范围[min, max]\n */\nexport function rangeLength(value, param) {\n    return value.length >= param[0] && value.length <= param[1]\n}\n\n/**\n * 是否固定电话\n */\nexport function landline(value) {\n    const reg = /^\\d{3,4}-\\d{7,8}(-\\d{3,4})?$/\n    return reg.test(value)\n}\n\n/**\n * 判断是否为空\n */\nexport function empty(value) {\n    switch (typeof value) {\n    case 'undefined':\n        return true\n    case 'string':\n        if (value.replace(/(^[ \\t\\n\\r]*)|([ \\t\\n\\r]*$)/g, '').length == 0) return true\n        break\n    case 'boolean':\n        if (!value) return true\n        break\n    case 'number':\n        if (value === 0 || isNaN(value)) return true\n        break\n    case 'object':\n        if (value === null || value.length === 0) return true\n        for (const i in value) {\n            return false\n        }\n        return true\n    }\n    return false\n}\n\n/**\n * 是否json字符串\n */\nexport function jsonString(value) {\n    if (typeof value === 'string') {\n        try {\n            const obj = JSON.parse(value)\n            if (typeof obj === 'object' && obj) {\n                return true\n            }\n            return false\n        } catch (e) {\n            return false\n        }\n    }\n    return false\n}\n\n/**\n * 是否数组\n */\nexport function array(value) {\n    if (typeof Array.isArray === 'function') {\n        return Array.isArray(value)\n    }\n    return Object.prototype.toString.call(value) === '[object Array]'\n}\n\n/**\n * 是否对象\n */\nexport function object(value) {\n    return Object.prototype.toString.call(value) === '[object Object]'\n}\n\n/**\n * 是否短信验证码\n */\nexport function code(value, len = 6) {\n    return new RegExp(`^\\\\d{${len}}$`).test(value)\n}\n\n/**\n * 是否函数方法\n * @param {Object} value\n */\nexport function func(value) {\n    return typeof value === 'function'\n}\n\n/**\n * 是否promise对象\n * @param {Object} value\n */\nexport function promise(value) {\n    return object(value) && func(value.then) && func(value.catch)\n}\n\n/** 是否图片格式\n * @param {Object} value\n */\nexport function image(value) {\n    const newValue = value.split('?')[0]\n    const IMAGE_REGEXP = /\\.(jpeg|jpg|gif|png|svg|webp|jfif|bmp|dpg)/i\n    return IMAGE_REGEXP.test(newValue)\n}\n\n/**\n * 是否视频格式\n * @param {Object} value\n */\nexport function video(value) {\n    const VIDEO_REGEXP = /\\.(mp4|mpg|mpeg|dat|asf|avi|rm|rmvb|mov|wmv|flv|mkv|m3u8)/i\n    return VIDEO_REGEXP.test(value)\n}\n\n/**\n * 是否为正则对象\n * @param {Object}\n * @return {Boolean}\n */\nexport function regExp(o) {\n    return o && Object.prototype.toString.call(o) === '[object RegExp]'\n}\n\nexport default {\n    email,\n    mobile,\n    url,\n    date,\n    dateISO,\n    number,\n    digits,\n    idCard,\n    carNo,\n    amount,\n    chinese,\n    letter,\n    enOrNum,\n    contains,\n    range,\n    rangeLength,\n    empty,\n    isEmpty: empty,\n    jsonString,\n    landline,\n    object,\n    array,\n    code,\n    func,\n    promise,\n    video,\n    image,\n    regExp,\n    string\n}\n"],"names":[],"mappings":";AAGO,SAAS,MAAM,OAAO;AACzB,SAAO,0EAA0E,KAAK,KAAK;AAC/F;AAKO,SAAS,OAAO,OAAO;AAC1B,SAAO,qBAAqB,KAAK,KAAK;AAC1C;AAKO,SAAS,IAAI,OAAO;AACvB,SAAO,8QACF,KAAK,KAAK;AACnB;AAMO,SAAS,KAAK,OAAO;AACxB,MAAI,CAAC;AAAO,WAAO;AAEnB,MAAI,OAAO,UAAU,UAAU;AAE3B,QAAI,MAAM,SAAU,EAAC,WAAW,MAAM,MAAM,SAAQ,EAAG,WAAW,IAAI;AAClE,aAAO;AAAA,IACV;AACD,WAAO,CAAC,MAAM,IAAI,KAAK,KAAK,EAAE,QAAO,CAAE;AAAA,EAC1C;AACD,MAAI,OAAO,UAAU,UAAU;AAE3B,UAAM,OAAO,OAAO,KAAK;AACzB,QAAI,CAAC,MAAM,IAAI,GAAG;AACd,UACI,KAAK,WAAW,WAAW,MAC3B,KAAK,WAAW,WAAW,IAC7B;AACE,eAAO,CAAC,MAAM,IAAI,KAAK,IAAI,EAAE,QAAO,CAAE;AAAA,MACzC;AAAA,IACJ;AAED,QAAI,MAAM,SAAS,MAAM,MAAM,SAAS,IAAI;AACxC,aAAO;AAAA,IACV;AACD,UAAM,YACF;AACJ,QAAI,CAAC,UAAU,KAAK,KAAK,GAAG;AACxB,aAAO;AAAA,IACV;AAED,UAAM,YAAY,IAAI,KAAK,KAAK;AAChC,WAAO,CAAC,MAAM,UAAU,QAAS,CAAA;AAAA,EACpC;AAED,SAAO;AACX;AAKO,SAAS,QAAQ,OAAO;AAC3B,SAAO,+DAA+D,KAAK,KAAK;AACpF;AAKO,SAAS,OAAO,OAAO;AAC1B,SAAO,0CAA0C,KAAK,KAAK;AAC/D;AAKO,SAAS,OAAO,OAAO;AAC1B,SAAO,OAAO,UAAU;AAC5B;AAKO,SAAS,OAAO,OAAO;AAC1B,SAAO,QAAQ,KAAK,KAAK;AAC7B;AAKO,SAAS,OAAO,OAAO;AAC1B,SAAO,2EAA2E;AAAA,IAC9E;AAAA,EACH;AACL;AAKO,SAAS,MAAM,OAAO;AAEzB,QAAM,OAAO;AAEb,QAAM,OAAO;AACb,MAAI,MAAM,WAAW,GAAG;AACpB,WAAO,KAAK,KAAK,KAAK;AAAA,EAC9B;AAAM,MAAI,MAAM,WAAW,GAAG;AACtB,WAAO,KAAK,KAAK,KAAK;AAAA,EACzB;AACD,SAAO;AACX;AAKO,SAAS,OAAO,OAAO;AAE1B,SAAO,+CAA+C,KAAK,KAAK;AACpE;AAKO,SAAS,QAAQ,OAAO;AAC3B,QAAM,MAAM;AACZ,SAAO,IAAI,KAAK,KAAK;AACzB;AAKO,SAAS,OAAO,OAAO;AAC1B,SAAO,cAAc,KAAK,KAAK;AACnC;AAKO,SAAS,QAAQ,OAAO;AAE3B,QAAM,MAAM;AACZ,SAAO,IAAI,KAAK,KAAK;AACzB;AAKO,SAAS,SAAS,OAAO,OAAO;AACnC,SAAO,MAAM,QAAQ,KAAK,KAAK;AACnC;AAKO,SAAS,MAAM,OAAO,OAAO;AAChC,SAAO,SAAS,MAAM,CAAC,KAAK,SAAS,MAAM,CAAC;AAChD;AAKO,SAAS,YAAY,OAAO,OAAO;AACtC,SAAO,MAAM,UAAU,MAAM,CAAC,KAAK,MAAM,UAAU,MAAM,CAAC;AAC9D;AAKO,SAAS,SAAS,OAAO;AAC5B,QAAM,MAAM;AACZ,SAAO,IAAI,KAAK,KAAK;AACzB;AAKO,SAAS,MAAM,OAAO;AACzB,UAAQ,OAAO,OAAK;AAAA,IACpB,KAAK;AACD,aAAO;AAAA,IACX,KAAK;AACD,UAAI,MAAM,QAAQ,gCAAgC,EAAE,EAAE,UAAU;AAAG,eAAO;AAC1E;AAAA,IACJ,KAAK;AACD,UAAI,CAAC;AAAO,eAAO;AACnB;AAAA,IACJ,KAAK;AACD,UAAI,UAAU,KAAK,MAAM,KAAK;AAAG,eAAO;AACxC;AAAA,IACJ,KAAK;AACD,UAAI,UAAU,QAAQ,MAAM,WAAW;AAAG,eAAO;AACjD,iBAAW,KAAK,OAAO;AACnB,eAAO;AAAA,MACV;AACD,aAAO;AAAA,EACV;AACD,SAAO;AACX;AAKO,SAAS,WAAW,OAAO;AAC9B,MAAI,OAAO,UAAU,UAAU;AAC3B,QAAI;AACA,YAAM,MAAM,KAAK,MAAM,KAAK;AAC5B,UAAI,OAAO,QAAQ,YAAY,KAAK;AAChC,eAAO;AAAA,MACV;AACD,aAAO;AAAA,IACV,SAAQ,GAAG;AACR,aAAO;AAAA,IACV;AAAA,EACJ;AACD,SAAO;AACX;AAKO,SAAS,MAAM,OAAO;AACzB,MAAI,OAAO,MAAM,YAAY,YAAY;AACrC,WAAO,MAAM,QAAQ,KAAK;AAAA,EAC7B;AACD,SAAO,OAAO,UAAU,SAAS,KAAK,KAAK,MAAM;AACrD;AAKO,SAAS,OAAO,OAAO;AAC1B,SAAO,OAAO,UAAU,SAAS,KAAK,KAAK,MAAM;AACrD;AAKO,SAAS,KAAK,OAAO,MAAM,GAAG;AACjC,SAAO,IAAI,OAAO,QAAQ,GAAG,IAAI,EAAE,KAAK,KAAK;AACjD;AAMO,SAAS,KAAK,OAAO;AACxB,SAAO,OAAO,UAAU;AAC5B;AAMO,SAAS,QAAQ,OAAO;AAC3B,SAAO,OAAO,KAAK,KAAK,KAAK,MAAM,IAAI,KAAK,KAAK,MAAM,KAAK;AAChE;AAKO,SAAS,MAAM,OAAO;AACzB,QAAM,WAAW,MAAM,MAAM,GAAG,EAAE,CAAC;AACnC,QAAM,eAAe;AACrB,SAAO,aAAa,KAAK,QAAQ;AACrC;AAMO,SAAS,MAAM,OAAO;AACzB,QAAM,eAAe;AACrB,SAAO,aAAa,KAAK,KAAK;AAClC;AAOO,SAAS,OAAO,GAAG;AACtB,SAAO,KAAK,OAAO,UAAU,SAAS,KAAK,CAAC,MAAM;AACtD;AAEA,MAAe,OAAA;AAAA,EACX;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA,SAAS;AAAA,EACT;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACJ;;;;;"}