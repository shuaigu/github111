{"version":3,"file":"qiniuyun.js","sources":["subPages/qiniuyun/qiniuyun.vue","../../软件/HBuilderX/HBuilderX/plugins/uniapp-cli-vite/uniPage:/c3ViUGFnZXNccWluaXV5dW5ccWluaXV5dW4udnVl"],"sourcesContent":["<template>\n\t<view class=\"publish-container\">\n\t\t<!-- 内容区域 -->\n\t\t<view class=\"content-container\">\n\t\t\t<!-- 分类选择和位置信息 -->\n\t\t\t<view class=\"category-section\">\n\t\t\t\t<view class=\"section-header\">\n\t\t\t\t\t<text class=\"section-title\">选择分类</text>\n\t\t\t\t\t<!-- 位置信息 - 放在标题后面 -->\n\t\t\t\t\t<view class=\"location-info-inline\" v-if=\"locationInfo\">\n\t\t\t\t\t\t<uni-icons type=\"location\" size=\"14\" color=\"#007AFF\"></uni-icons>\n\t\t\t\t\t\t<text>{{ locationInfo.address }}</text>\n\t\t\t\t\t</view>\n\t\t\t\t</view>\n\t\t\t\t<view class=\"category-grid\">\n\t\t\t\t\t<view \n\t\t\t\t\t\tclass=\"category-item\" \n\t\t\t\t\t\tv-for=\"(item, index) in categoryList\" \n\t\t\t\t\t\t:key=\"item._id\"\n\t\t\t\t\t\t:class=\"{ active: selectedCategory === item._id }\"\n\t\t\t\t\t\t@click=\"selectCategory(index)\"\n\t\t\t\t\t>\n\t\t\t\t\t\t<image \n\t\t\t\t\t\t\t:src=\"item.cate_img\" \n\t\t\t\t\t\t\tmode=\"aspectFit\" \n\t\t\t\t\t\t\tclass=\"category-icon\"\n\t\t\t\t\t\t\t@error=\"handleCategoryImageError(index)\"\n\t\t\t\t\t\t></image>\n\t\t\t\t\t\t<text class=\"category-name\">{{ item.cate_name }}</text>\n\t\t\t\t\t</view>\n\t\t\t\t</view>\n\t\t\t\t<view class=\"loading-placeholder\" v-if=\"categoryList.length === 0\">\n\t\t\t\t\t<uni-icons type=\"spinner-cycle\" size=\"30\" color=\"#399bfe\"></uni-icons>\n\t\t\t\t\t<text>正在加载分类...</text>\n\t\t\t\t</view>\n\t\t\t</view>\n\n\t\t\t<!-- 合并文本输入和媒体为一个整体模块 -->\n\t\t\t<view class=\"content-media-section\">\n\t\t\t\t<!-- 文本输入区域 -->\n\t\t\t\t<view class=\"textarea-container\">\n\t\t\t\t\t<textarea \n\t\t\t\t\t\tv-model=\"content\" \n\t\t\t\t\t\tplaceholder=\"分享新鲜事...\" \n\t\t\t\t\t\tmaxlength=\"350\"\n\t\t\t\t\t\tclass=\"content-textarea\"\n\t\t\t\t\t\tauto-height\n\t\t\t\t\t\tshow-confirm-bar=\"false\"\n\t\t\t\t\t\tcursor-spacing=\"120\"\n\t\t\t\t\t></textarea>\n\t\t\t\t\t<view class=\"word-count\">{{ content.length }}/350</view>\n\t\t\t\t</view>\n\n\t\t\t\t<!-- 媒体选择区域 -->\n\t\t\t\t<view class=\"media-area\">\n\t\t\t\t\t<view class=\"media-tabs\">\n\t\t\t\t\t\t<view \n\t\t\t\t\t\t\tclass=\"tab-item\" \n\t\t\t\t\t\t\t:class=\"{'active': mediaType === 'image'}\" \n\t\t\t\t\t\t\t@tap=\"mediaType = 'image'\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<uni-icons \n\t\t\t\t\t\t\t\ttype=\"image\" \n\t\t\t\t\t\t\t\tsize=\"20\" \n\t\t\t\t\t\t\t\t:color=\"mediaType === 'image' ? '#399bfe' : '#999'\"\n\t\t\t\t\t\t\t></uni-icons>\n\t\t\t\t\t\t\t<text \n\t\t\t\t\t\t\t\tclass=\"tab-text\" \n\t\t\t\t\t\t\t\t:class=\"{'active-text': mediaType === 'image'}\"\n\t\t\t\t\t\t\t>图片</text>\n\t\t\t\t\t\t</view>\n\t\t\t\t\t\t<view \n\t\t\t\t\t\t\tclass=\"tab-item\" \n\t\t\t\t\t\t\t:class=\"{'active': mediaType === 'video'}\" \n\t\t\t\t\t\t\t@tap=\"mediaType = 'video'\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<uni-icons \n\t\t\t\t\t\t\t\ttype=\"videocam\" \n\t\t\t\t\t\t\t\tsize=\"20\" \n\t\t\t\t\t\t\t\t:color=\"mediaType === 'video' ? '#399bfe' : '#999'\"\n\t\t\t\t\t\t\t></uni-icons>\n\t\t\t\t\t\t\t<text \n\t\t\t\t\t\t\t\tclass=\"tab-text\" \n\t\t\t\t\t\t\t\t:class=\"{'active-text': mediaType === 'video'}\"\n\t\t\t\t\t\t\t>视频</text>\n\t\t\t\t\t\t</view>\n\t\t\t\t\t</view>\n\t\t\t\t\t\n\t\t\t\t\t<!-- 图片上传区域 - 当选择图片选项卡或已有图片时显示 -->\n\t\t\t\t\t<view class=\"media-content\" v-if=\"mediaType === 'image' || (imageList.length > 0 && mediaType === 'video')\">\n\t\t\t\t\t\t<view class=\"section-title\" v-if=\"mediaType !== 'image' && imageList.length > 0\">已上传图片</view>\n\t\t\t\t\t\t<view class=\"image-grid\">\n\t\t\t\t\t\t\t<view \n\t\t\t\t\t\t\t\tv-for=\"(item, index) in imageList\" \n\t\t\t\t\t\t\t\t:key=\"index\" \n\t\t\t\t\t\t\t\tclass=\"image-item\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<image \n\t\t\t\t\t\t\t\t\t:src=\"formatImagePath(item.tempPath || item.thumbnailURL)\" \n\t\t\t\t\t\t\t\t\tmode=\"aspectFill\" \n\t\t\t\t\t\t\t\t\t@error=\"handleImageError(index)\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<view class=\"progress-overlay\" v-if=\"item.progress < 100\">\n\t\t\t\t\t\t\t\t\t<view class=\"progress-text\">{{item.progress}}%</view>\n\t\t\t\t\t\t\t\t\t<view class=\"progress-bar\">\n\t\t\t\t\t\t\t\t\t\t<view class=\"progress\" :style=\"{width: item.progress + '%'}\"></view>\n\t\t\t\t\t\t\t\t\t</view>\n\t\t\t\t\t\t\t\t</view>\n\t\t\t\t\t\t\t\t<view class=\"delete-btn\" @tap=\"removeFile(index)\">\n\t\t\t\t\t\t\t\t\t<uni-icons type=\"close\" size=\"16\" color=\"#fff\"></uni-icons>\n\t\t\t\t\t\t\t\t</view>\n\t\t\t\t\t\t\t</view>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t<!-- 添加图片按钮 - 只在图片模式下显示 -->\n\t\t\t\t\t\t\t<view \n\t\t\t\t\t\t\t\tv-if=\"imageList.length < 9 && mediaType === 'image'\" \n\t\t\t\t\t\t\t\tclass=\"add-media-btn\"\n\t\t\t\t\t\t\t\t@tap=\"chooseImage\"\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<uni-icons type=\"plusempty\" size=\"30\" color=\"#999\"></uni-icons>\n\t\t\t\t\t\t\t\t<text class=\"btn-text\">添加图片</text>\n\t\t\t\t\t\t\t</view>\n\t\t\t\t\t\t</view>\n\t\t\t\t\t\t<text class=\"tip-text\" v-if=\"mediaType === 'image'\">最多上传9张图片，支持从相册、拍照选择</text>\n\t\t\t\t\t</view>\n\t\t\t\t\t\n\t\t\t\t\t<!-- 视频上传区域 - 当选择视频选项卡或已有视频时显示 -->\n\t\t\t\t\t<view class=\"media-content\" v-if=\"mediaType === 'video' || (hasVideo && mediaType === 'image')\">\n\t\t\t\t\t\t<view class=\"section-title\" v-if=\"mediaType !== 'video' && hasVideo\">已上传视频</view>\n\t\t\t\t\t\t<view class=\"video-container\" v-if=\"hasVideo\">\n\t\t\t\t\t\t\t<view class=\"video-item\">\n\t\t\t\t\t\t\t\t<image \n\t\t\t\t\t\t\t\t\t:src=\"videoData.poster || videoData.thumbnailURL\" \n\t\t\t\t\t\t\t\t\tmode=\"aspectFill\"\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t<view class=\"video-icon\">\n\t\t\t\t\t\t\t\t\t<uni-icons type=\"videocam-filled\" size=\"30\" color=\"#fff\"></uni-icons>\n\t\t\t\t\t\t\t\t</view>\n\t\t\t\t\t\t\t\t<view class=\"video-info\">\n\t\t\t\t\t\t\t\t\t<text class=\"video-duration\">{{Math.floor(videoData.duration || 0)}}秒</text>\n\t\t\t\t\t\t\t\t\t<text class=\"video-size\">{{((videoData.size || 0) / 1024 / 1024).toFixed(1)}}MB</text>\n\t\t\t\t\t\t\t\t\t<text class=\"video-format\">{{videoData.format || 'mp4'}}</text>\n\t\t\t\t\t\t\t\t</view>\n\t\t\t\t\t\t\t\t<view class=\"progress-overlay\" v-if=\"videoData && videoData.progress < 100\">\n\t\t\t\t\t\t\t\t\t<view class=\"progress-text\">{{videoData.progress}}%</view>\n\t\t\t\t\t\t\t\t\t<view class=\"progress-bar\">\n\t\t\t\t\t\t\t\t\t\t<view class=\"progress\" :style=\"{width: videoData.progress + '%'}\"></view>\n\t\t\t\t\t\t\t\t\t</view>\n\t\t\t\t\t\t\t\t</view>\n\t\t\t\t\t\t\t\t<view class=\"delete-btn\" @tap=\"removeVideo\">\n\t\t\t\t\t\t\t\t\t<uni-icons type=\"close\" size=\"16\" color=\"#fff\"></uni-icons>\n\t\t\t\t\t\t\t\t</view>\n\t\t\t\t\t\t\t</view>\n\t\t\t\t\t\t</view>\n\t\t\t\t\t\t\n\t\t\t\t\t\t<!-- 视频上传按钮 - 只在视频模式下且没有视频时显示 -->\n\t\t\t\t\t\t<view \n\t\t\t\t\t\t\tv-if=\"!hasVideo && mediaType === 'video'\" \n\t\t\t\t\t\t\tclass=\"video-upload-btn\" \n\t\t\t\t\t\t\t@tap=\"chooseVideo\"\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<uni-icons type=\"videocam-filled\" size=\"40\" color=\"#999\"></uni-icons>\n\t\t\t\t\t\t\t<text class=\"upload-text\">点击上传视频</text>\n\t\t\t\t\t\t\t<text class=\"upload-subtext\">支持60秒以内、500MB以下的视频</text>\n\t\t\t\t\t\t</view>\n\t\t\t\t\t\t<text class=\"tip-text\" v-if=\"mediaType === 'video' && !hasVideo\">支持60秒以内、500MB以下的视频</text>\n\t\t\t\t\t</view>\n\t\t\t\t</view>\n\t\t\t</view>\n\t\t\t\n\t\t\t<!-- 底部安全区域占位 -->\n\t\t\t<view class=\"safe-area-placeholder\"></view>\n\t\t</view>\n\t\t\n\t\t<!-- 发布按钮 - 移到内容容器外部 -->\n\t\t<view class=\"publish-btn-container\">\n\t\t\t<button class=\"publish-btn\" @click=\"publishContent\">发布</button>\n\t\t</view>\n\t</view>\n</template>\n\n<script setup>\nimport { ref, computed, onMounted, onUnmounted, onBeforeUnmount } from 'vue'\nimport { useUserInfoStore } from '@/store/user.js'\nimport { testLogin } from '@/utils/isLogin'\n\n// Store & API\nconst userStore = useUserInfoStore()\nconst qiniuCloud = uniCloud.importObject('qiniuyunCloud', { customUI: true })\nconst extStorageCo = uniCloud.importObject('ext-storage-co', { customUI: true })\nconst articleApi = uniCloud.importObject('articleWx', { customUI: true })\n\n// 状态管理\nconst fileList = ref([])\nconst imageList = ref([])\nconst videoData = ref(null)\nconst isUploading = ref(false)\nconst totalProgress = ref(0)\nconst uploadedFiles = ref([])\nconst mediaType = ref('image')\nconst content = ref('')\nconst locationInfo = ref(null)\nconst categoryList = ref([])\nconst cateIndex = ref(0)\nconst selectedCategory = ref(null)\nconst isPublishing = ref(false)\nconst publishedArticleId = ref(null)\n\n// 计算属性\nconst hasVideo = computed(() => videoData.value !== null)\n\n// 获取位置和分类\nconst getLocaAndCate = async () => {\n\ttry {\n\t\tuni.showLoading({ title: '加载中...' })\n\t\t\n\t\t// 获取位置信息\n\t\tconst locationRes = await uni.getLocation({\n\t\t\ttype: 'gcj02'\n\t\t}).catch(err => {\n\t\t\tconsole.error('获取位置失败:', err)\n\t\t\treturn { longitude: 0, latitude: 0 }\n\t\t})\n\n\t\t// 获取分类和位置信息\n\t\tconst res = await articleApi.addReady(`${locationRes.longitude},${locationRes.latitude}`)\n\t\tconsole.log('获取位置和分类:', res)\n\n\t\tif (res) {\n\t\t\t// 设置位置信息\n\t\t\tlocationInfo.value = {\n\t\t\t\taddress: res.address || '未知位置',\n\t\t\t\tdistrict: res.district || ''\n\t\t\t}\n\n\t\t\t// 设置分类信息\n\t\t\tif (res.cateList && res.cateList.length > 0) {\n\t\t\t\t// 处理分类图片路径，确保URL格式正确\n\t\t\t\tcategoryList.value = res.cateList.map(category => ({\n\t\t\t\t\t...category,\n\t\t\t\t\tcate_img: formatCategoryImageUrl(category.cate_img)\n\t\t\t\t}))\n\t\t\t\t\n\t\t\t\t// 移除默认选择\n\t\t\t\tselectedCategory.value = null\n\t\t\t\tcateIndex.value = -1\n\t\t\t} else {\n\t\t\t\t// 如果没有获取到分类，尝试从本地获取\n\t\t\t\tawait getCategoriesFromLocal()\n\t\t\t}\n\t\t} else {\n\t\t\t// 如果API调用失败，尝试从本地获取\n\t\t\tawait getCategoriesFromLocal()\n\t\t}\n\n\t\tuni.hideLoading()\n\t} catch (e) {\n\t\tconsole.error('获取位置和分类失败:', e)\n\t\tuni.hideLoading()\n\t\t\n\t\t// 尝试从本地获取分类\n\t\tawait getCategoriesFromLocal()\n\t\t\n\t\tuni.showToast({\n\t\t\ttitle: '获取信息失败',\n\t\t\ticon: 'none'\n\t\t})\n\t}\n}\n\n// 从本地存储获取分类\nconst getCategoriesFromLocal = async () => {\n\ttry {\n\t\t// 尝试从本地存储获取分类数据\n\t\tconst storage = uni.getStorageSync('categoryList')\n\t\tif (storage) {\n\t\t\tcategoryList.value = JSON.parse(storage).map(category => ({\n\t\t\t\t...category,\n\t\t\t\tcate_img: formatCategoryImageUrl(category.cate_img)\n\t\t\t}))\n\t\t\tconsole.log('从本地存储获取分类成功:', categoryList.value)\n\t\t} else {\n\t\t\t// 如果本地没有，尝试直接从数据库获取\n\t\t\tconst result = await articleApi.getCategories()\n\t\t\tif (result && result.length > 0) {\n\t\t\t\tcategoryList.value = result.map(category => ({\n\t\t\t\t\t...category,\n\t\t\t\t\tcate_img: formatCategoryImageUrl(category.cate_img)\n\t\t\t\t}))\n\t\t\t\t\n\t\t\t\t// 保存到本地存储\n\t\t\t\tuni.setStorageSync('categoryList', JSON.stringify(result))\n\t\t\t\tconsole.log('从数据库获取分类成功:', categoryList.value)\n\t\t\t} else {\n\t\t\t\t// 如果都失败了，使用默认分类\n\t\t\t\tcategoryList.value = getDefaultCategories()\n\t\t\t\tconsole.log('使用默认分类:', categoryList.value)\n\t\t\t}\n\t\t}\n\t} catch (error) {\n\t\tconsole.error('获取本地分类失败:', error)\n\t\t// 使用默认分类\n\t\tcategoryList.value = getDefaultCategories()\n\t}\n}\n\n// 获取默认分类\nconst getDefaultCategories = () => {\n\treturn [\n\t\t{\n\t\t\t_id: 'default_1',\n\t\t\tcate_name: '默认分类1',\n\t\t\tcate_img: '/static/category/default1.png'\n\t\t},\n\t\t{\n\t\t\t_id: 'default_2',\n\t\t\tcate_name: '默认分类2',\n\t\t\tcate_img: '/static/category/default2.png'\n\t\t},\n\t\t{\n\t\t\t_id: 'default_3',\n\t\t\tcate_name: '默认分类3',\n\t\t\tcate_img: '/static/category/default3.png'\n\t\t},\n\t\t{\n\t\t\t_id: 'default_4',\n\t\t\tcate_name: '默认分类4',\n\t\t\tcate_img: '/static/category/default4.png'\n\t\t}\n\t]\n}\n\n// 格式化分类图片URL\nconst formatCategoryImageUrl = (url) => {\n\tif (!url) return '/static/category/default.png'\n\t\n\t// 如果已经是完整URL，直接返回\n\tif (url.startsWith('http')) return url\n\t\n\t// 如果是相对路径，添加域名\n\tif (url.startsWith('/')) {\n\t\t// 这里可以根据实际情况添加域名前缀\n\t\t// 例如: return 'https://your-domain.com' + url\n\t\treturn url\n\t}\n\t\n\t// 如果是七牛云路径，添加七牛云域名\n\tif (!url.includes('://')) {\n\t\t// 这里替换为您的七牛云域名\n\t\treturn `https://your-qiniu-domain.com/${url}`\n\t}\n\t\n\treturn url\n}\n\n// 处理分类图片加载错误\nconst handleCategoryImageError = (index) => {\n\tconsole.error(`分类图片加载错误，索引: ${index}`, categoryList.value[index])\n\t\n\t// 设置为默认图片\n\tif (categoryList.value[index]) {\n\t\tcategoryList.value[index].cate_img = '/static/category/default.png'\n\t}\n}\n\n// 分类选择处理\nconst selectCategory = (index) => {\n\tconsole.log('选择分类:', categoryList.value[index])\n\tcateIndex.value = index\n\tselectedCategory.value = categoryList.value[index]._id\n}\n\n// 检查用户是否登录\nconst checkUserLogin = () => {\n\tconsole.log('检查用户登录状态:', userStore.userInfo)\n\t\n\tif (!userStore.userInfo || !userStore.userInfo.uid) {\n\t\tconsole.log('用户未登录，调用登录函数')\n\t\tuni.showToast({\n\t\t\ttitle: '请先登录',\n\t\t\ticon: 'none'\n\t\t})\n\t\ttestLogin()\n\t\treturn false\n\t}\n\treturn true\n}\n\n// 页面加载时获取位置和分类信息\nonMounted(() => {\n\tconsole.log('发布页面已加载')\n\tgetLocaAndCate()\n\t\n\t// 添加返回按钮拦截\n\tconst pages = getCurrentPages()\n\tconst page = pages[pages.length - 1]\n\tif (page && page.$getAppWebview) {\n\t\tconst currentWebview = page.$getAppWebview()\n\t\tcurrentWebview.setStyle({\n\t\t\tpopGesture: 'none' // 禁用侧滑返回\n\t\t})\n\t}\n})\n\n// 页面卸载前的清理工作\nonBeforeUnmount(() => {\n\tconsole.log('发布页面即将卸载')\n\t// 如果有正在上传的文件，提示用户\n\tconst hasUploadingMedia = imageList.value.some(item => item.uploadStatus === 'uploading') || \n\t\t\t\t\t\t\t (videoData.value && videoData.value.uploadStatus === 'uploading')\n\t\n\tif (hasUploadingMedia && !isPublishing.value) {\n\t\tconsole.log('有正在上传的媒体文件，但用户选择离开页面')\n\t}\n\t\n\t// 如果已经发布成功，确保触发刷新事件\n\tif (publishedArticleId.value && !isPublishing.value) {\n\t\tconsole.log('页面卸载前再次触发刷新事件')\n\t\tuni.$emit('refreshIndexOnce', publishedArticleId.value)\n\t}\n})\n\n// 页面完全卸载时的清理\nonUnmounted(() => {\n\tconsole.log('发布页面已完全卸载')\n})\n\n// 选择图片\nconst chooseImage = async () => {\n\ttry {\n\t\t// 检查用户是否登录\n\t\tif (!checkUserLogin()) return\n\t\t\n\t\t// 检查是否达到最大图片数量\n\t\tif (imageList.value.length >= 9) {\n\t\t\tuni.showToast({\n\t\t\t\ttitle: '最多只能上传9张图片',\n\t\t\t\ticon: 'none'\n\t\t\t})\n\t\t\treturn\n\t\t}\n\t\t\n\t\t// 显示选择图片来源的操作菜单\n\t\tuni.showActionSheet({\n\t\t\titemList: ['从相册选择', '拍照'],\n\t\t\tsuccess: async (res) => {\n\t\t\t\tlet sourceType = []\n\t\t\t\t\n\t\t\t\t// 根据用户选择设置图片来源\n\t\t\t\tswitch (res.tapIndex) {\n\t\t\t\t\tcase 0: // 从相册选择\n\t\t\t\t\t\tsourceType = ['album']\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase 1: // 拍照\n\t\t\t\t\t\tsourceType = ['camera']\n\t\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// 选择图片\n\t\t\t\tconst chooseRes = await uni.chooseImage({\n\t\t\t\t\tcount: 9 - imageList.value.length,\n\t\t\t\t\tsizeType: ['original', 'compressed'], // 同时使用原图和压缩图\n\t\t\t\t\tsourceType: sourceType\n\t\t\t\t})\n\t\t\t\t\n\t\t\t\tconsole.log('选择图片结果:', chooseRes)\n\t\t\t\t\n\t\t\t\t// 为每个选中的图片创建临时对象\n\t\t\t\tconst tempFiles = chooseRes.tempFilePaths.map(filePath => {\n\t\t\t\t\t// 处理文件路径，确保格式正确\n\t\t\t\t\tconst processedPath = filePath.replace(/^kwfile:\\/\\//, '');\n\t\t\t\t\t\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttype: 'image',\n\t\t\t\t\t\ttempPath: processedPath,\n\t\t\t\t\t\tthumbnailURL: processedPath,\n\t\t\t\t\t\tprogress: 0,\n\t\t\t\t\t\tuploadStatus: null\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t\n\t\t\t\t// 添加到预览列表\n\t\t\t\tconst startIndex = imageList.value.length\n\t\t\t\timageList.value.push(...tempFiles)\n\t\t\t\t\n\t\t\t\t// 立即上传图片\n\t\t\t\tfor (let i = 0; i < tempFiles.length; i++) {\n\t\t\t\t\tconst index = startIndex + i\n\t\t\t\t\t// 使用setTimeout错开上传时间，避免同时发起太多请求\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tuploadImageToQiniu(imageList.value[index], index)\n\t\t\t\t\t\t\t.then(result => {\n\t\t\t\t\t\t\t\tconsole.log(`图片${index}上传成功:`, result)\n\t\t\t\t\t\t\t\t// 更新图片信息\n\t\t\t\t\t\t\t\tif (imageList.value[index]) {\n\t\t\t\t\t\t\t\t\timageList.value[index] = {\n\t\t\t\t\t\t\t\t\t\t...imageList.value[index],\n\t\t\t\t\t\t\t\t\t\t...result,\n\t\t\t\t\t\t\t\t\t\tprogress: 100,\n\t\t\t\t\t\t\t\t\t\tuploadStatus: 'success'\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.catch(error => {\n\t\t\t\t\t\t\t\tconsole.error(`图片${index}上传失败:`, error)\n\t\t\t\t\t\t\t\tif (imageList.value[index]) {\n\t\t\t\t\t\t\t\t\timageList.value[index].uploadStatus = 'error'\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\t\t\t\ttitle: `第${index+1}张图片上传失败`,\n\t\t\t\t\t\t\t\t\ticon: 'none'\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t})\n\t\t\t\t\t}, i * 200) // 每张图片错开200ms上传\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t} catch (e) {\n\t\tif (e.errMsg !== 'chooseImage:fail cancel') {\n\t\t\tuni.showToast({\n\t\t\t\ttitle: '选择图片失败',\n\t\t\t\ticon: 'none'\n\t\t\t})\n\t\t}\n\t}\n}\n\n// 格式化图片路径，处理特殊前缀\nconst formatImagePath = (path) => {\n\tif (!path) return '';\n\t\n\t// 移除可能导致问题的前缀\n\tlet formattedPath = path.replace(/^kwfile:\\/\\//, '');\n\t\n\t// 如果是网络图片，直接返回\n\tif (formattedPath.startsWith('http')) {\n\t\treturn formattedPath;\n\t}\n\t\n\t// 如果是本地临时文件，确保路径格式正确\n\tif (formattedPath.startsWith('tmp/')) {\n\t\t// 在某些平台上可能需要添加特定前缀\n\t\t// #ifdef MP-WEIXIN\n\t\treturn formattedPath;\n\t\t// #endif\n\t\t\n\t\t// #ifdef APP-PLUS\n\t\treturn plus.io.convertLocalFileSystemURL(formattedPath);\n\t\t// #endif\n\t\t\n\t\t// 其他平台\n\t\treturn formattedPath;\n\t}\n\t\n\treturn formattedPath;\n}\n\n// 处理图片加载错误\nconst handleImageError = (index) => {\n\tconsole.error(`图片加载错误，索引: ${index}`, imageList.value[index]);\n\t\n\t// 设置为默认图片\n\tif (imageList.value[index]) {\n\t\t// 标记图片加载失败\n\t\timageList.value[index].loadError = true;\n\t\t\n\t\t// 可以选择设置一个默认图片\n\t\t// imageList.value[index].thumbnailURL = '/static/default-image.png';\n\t\t\n\t\t// 或者显示错误提示\n\t\tuni.showToast({\n\t\t\ttitle: '图片加载失败',\n\t\t\ticon: 'none'\n\t\t});\n\t}\n}\n\n// 选择视频\nconst chooseVideo = async () => {\n\ttry {\n\t\t// 检查用户是否登录\n\t\tif (!checkUserLogin()) return\n\t\t\n\t\t// 如果已经有视频，提示先删除\n\t\tif (hasVideo.value) {\n\t\t\tuni.showToast({\n\t\t\t\ttitle: '只能选择一个视频',\n\t\t\t\ticon: 'none'\n\t\t\t})\n\t\t\treturn\n\t\t}\n\n\t\t// 显示选择视频来源的操作菜单\n\t\tuni.showActionSheet({\n\t\t\titemList: ['从相册选择', '拍摄视频'],\n\t\t\tsuccess: async (res) => {\n\t\t\t\tlet sourceType = []\n\t\t\t\t\n\t\t\t\t// 根据用户选择设置视频来源\n\t\t\t\tswitch (res.tapIndex) {\n\t\t\t\t\tcase 0: // 从相册选择\n\t\t\t\t\t\tsourceType = ['album']\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase 1: // 拍摄视频\n\t\t\t\t\t\tsourceType = ['camera']\n\t\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// 选择视频\n\t\t\t\tconst chooseRes = await uni.chooseVideo({\n\t\t\t\t\tsourceType: sourceType,\n\t\t\t\t\tmaxDuration: 60, // 限制视频最长60秒\n\t\t\t\t\tcamera: 'back'\n\t\t\t\t})\n\t\t\t\t\n\t\t\t\tconsole.log('选择视频结果:', chooseRes)\n\t\t\t\t\n\t\t\t\t// 检查视频大小（限制为500MB）\n\t\t\t\tconst maxSize = 500 * 1024 * 1024 // 500MB\n\t\t\t\tif (chooseRes.size > maxSize) {\n\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\ttitle: '视频过大，请选择小于500MB的视频',\n\t\t\t\t\t\ticon: 'none'\n\t\t\t\t\t})\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// 创建临时视频对象\n\t\t\t\tvideoData.value = {\n\t\t\t\t\ttype: 'video',\n\t\t\t\t\ttempPath: chooseRes.tempFilePath,\n\t\t\t\t\tposter: chooseRes.thumbTempFilePath,\n\t\t\t\t\tthumbnailURL: chooseRes.thumbTempFilePath,\n\t\t\t\t\tduration: chooseRes.duration,\n\t\t\t\t\tsize: chooseRes.size,\n\t\t\t\t\twidth: chooseRes.width,\n\t\t\t\t\theight: chooseRes.height,\n\t\t\t\t\tformat: 'mp4', // 默认格式\n\t\t\t\t\tprogress: 0,\n\t\t\t\t\tuploadStatus: 'uploading'\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// 显示轻量级提示，不阻塞界面\n\t\t\t\tuni.showToast({\n\t\t\t\t\ttitle: '准备上传视频',\n\t\t\t\t\ticon: 'loading',\n\t\t\t\t\tduration: 2000\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\ttry {\n\t\t\t\t\t// 异步上传视频，不等待完成\n\t\t\t\t\tuploadVideoToQiniu(videoData.value)\n\t\t\t\t\t\t.then(result => {\n\t\t\t\t\t\t\tconsole.log('视频上传成功:', result)\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// 更新视频信息\n\t\t\t\t\t\t\tvideoData.value = {\n\t\t\t\t\t\t\t\t...videoData.value,\n\t\t\t\t\t\t\t\t...result,\n\t\t\t\t\t\t\t\tprogress: 100,\n\t\t\t\t\t\t\t\tuploadStatus: 'success'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// 显示成功提示\n\t\t\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\t\t\ttitle: '视频上传成功',\n\t\t\t\t\t\t\t\ticon: 'success',\n\t\t\t\t\t\t\t\tduration: 2000\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(error => {\n\t\t\t\t\t\t\tconsole.error('视频上传失败:', error)\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// 只有在视频对象仍然存在时才更新状态\n\t\t\t\t\t\t\tif (videoData.value) {\n\t\t\t\t\t\t\t\tvideoData.value.uploadStatus = 'error'\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// 显示失败提示\n\t\t\t\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\t\t\t\ttitle: '视频上传失败，可继续编辑内容',\n\t\t\t\t\t\t\t\t\ticon: 'none',\n\t\t\t\t\t\t\t\t\tduration: 2000\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\t// 不等待上传完成，立即返回让用户继续操作\n\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\ttitle: '视频上传中，您可继续编辑',\n\t\t\t\t\t\ticon: 'none',\n\t\t\t\t\t\tduration: 2000\n\t\t\t\t\t});\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('启动视频上传失败:', error)\n\t\t\t\t\t\n\t\t\t\t\t// 只有在视频对象仍然存在时才更新状态\n\t\t\t\t\tif (videoData.value) {\n\t\t\t\t\t\tvideoData.value.uploadStatus = 'error'\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// 显示失败提示\n\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\ttitle: '启动视频上传失败',\n\t\t\t\t\t\ticon: 'none',\n\t\t\t\t\t\tduration: 2000\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t})\n\t} catch (e) {\n\t\tif (e.errMsg !== 'chooseVideo:fail cancel') {\n\t\t\tuni.showToast({\n\t\t\t\ttitle: '选择视频失败',\n\t\t\t\ticon: 'none'\n\t\t\t})\n\t\t}\n\t}\n}\n\n// 移除图片\nconst removeFile = (index) => {\n\timageList.value.splice(index, 1)\n}\n\n// 移除视频\nconst removeVideo = () => {\n\tvideoData.value = null\n}\n\n// 上传图片到七牛云\nconst uploadImageToQiniu = async (file, index) => {\n\ttry {\n\t\t// 更新上传状态\n\t\tfile.uploadStatus = 'uploading'\n\t\t\n\t\t// 获取文件扩展名\n\t\tconst fileExt = getFileExtension(file.tempPath)\n\t\t\n\t\t// 获取七牛云上传凭证\n\t\tconst uploadConfig = await qiniuCloud.generateUploadToken({\n\t\t\ttype: 'image',\n\t\t\text: fileExt\n\t\t})\n\t\t\n\t\tconsole.log('获取七牛云上传凭证成功:', uploadConfig)\n\t\t\n\t\tif (!uploadConfig || !uploadConfig.token) {\n\t\t\tthrow new Error('获取上传凭证失败')\n\t\t}\n\t\t\n\t\t// 确保上传域名使用HTTPS协议\n\t\tlet uploadDomain = uploadConfig.uploadDomain;\n\t\tif (uploadDomain && !uploadDomain.startsWith('https://')) {\n\t\t\tuploadDomain = uploadDomain.replace('http://', 'https://');\n\t\t\tconsole.log('已将上传域名转换为HTTPS:', uploadDomain);\n\t\t}\n\t\t\n\t\t// 上传文件\n\t\treturn new Promise((resolve, reject) => {\n\t\t\t// 添加重试逻辑\n\t\t\tlet retryCount = 0;\n\t\t\tconst maxRetries = 3;\n\t\t\t\n\t\t\tconst performUpload = () => {\n\t\t\t\ttry {\n\t\t\t\t\tconst uploadTask = uni.uploadFile({\n\t\t\t\t\t\turl: uploadDomain,\n\t\t\t\t\t\tfilePath: file.tempPath,\n\t\t\t\t\t\tname: 'file',\n\t\t\t\t\t\tformData: {\n\t\t\t\t\t\t\ttoken: uploadConfig.token,\n\t\t\t\t\t\t\tkey: uploadConfig.key\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsuccess: (uploadRes) => {\n\t\t\t\t\t\t\tconsole.log('上传响应:', uploadRes)\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (uploadRes.statusCode === 200) {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tconst data = JSON.parse(uploadRes.data)\n\t\t\t\t\t\t\t\t\tconst fileUrl = `${uploadConfig.domain}/${uploadConfig.key}`\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t// 更新上传状态\n\t\t\t\t\t\t\t\t\tfile.uploadStatus = 'success'\n\t\t\t\t\t\t\t\t\tfile.fileURL = fileUrl\n\t\t\t\t\t\t\t\t\tfile.progress = 100\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t// 构建缩略图URL (七牛云图片处理)\n\t\t\t\t\t\t\t\t\tconst thumbnailURL = `${fileUrl}?imageView2/1/w/200/h/200`\n\t\t\t\t\t\t\t\t\t// 构建压缩图URL\n\t\t\t\t\t\t\t\t\tconst compressedURL = `${fileUrl}?imageView2/2/w/800`\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tresolve({\n\t\t\t\t\t\t\t\t\t\ttype: 'image',\n\t\t\t\t\t\t\t\t\t\turl: fileUrl,\n\t\t\t\t\t\t\t\t\t\tthumbnailURL: thumbnailURL,\n\t\t\t\t\t\t\t\t\t\tcompressedURL: compressedURL\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\tconsole.error('解析上传响应失败:', e)\n\t\t\t\t\t\t\t\t\tfile.uploadStatus = 'error'\n\t\t\t\t\t\t\t\t\treject(new Error('解析上传响应失败'))\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconsole.error('上传失败状态码:', uploadRes.statusCode)\n\t\t\t\t\t\t\t\tfile.uploadStatus = 'error'\n\t\t\t\t\t\t\t\treject(new Error(`上传失败: ${uploadRes.statusCode}`))\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tfail: (error) => {\n\t\t\t\t\t\t\tconsole.error('上传失败:', error)\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// 检查是否是域名错误\n\t\t\t\t\t\t\tif (error.errMsg && error.errMsg.includes('url not in domain list')) {\n\t\t\t\t\t\t\t\tuni.showModal({\n\t\t\t\t\t\t\t\t\ttitle: '上传域名未授权',\n\t\t\t\t\t\t\t\t\tcontent: '请在微信小程序管理后台添加 ' + uploadDomain + ' 到合法域名列表',\n\t\t\t\t\t\t\t\t\tshowCancel: false\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tfile.uploadStatus = 'error'\n\t\t\t\t\t\t\t\treject(new Error(error.errMsg || '上传失败'))\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// 检查是否是连接数超限错误\n\t\t\t\t\t\t\tif (error.errMsg && error.errMsg.includes('exceed max upload connection count')) {\n\t\t\t\t\t\t\t\tif (retryCount < maxRetries) {\n\t\t\t\t\t\t\t\t\tretryCount++;\n\t\t\t\t\t\t\t\t\tconsole.log(`连接数超限，第${retryCount}次重试上传图片...`);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t// 延迟重试，给其他上传任务完成的时间\n\t\t\t\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\t\t\t\tperformUpload();\n\t\t\t\t\t\t\t\t\t}, 1000 * retryCount); // 递增延迟\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tfile.uploadStatus = 'error'\n\t\t\t\t\t\t\treject(new Error(error.errMsg || '上传失败'))\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t\n\t\t\t\t\t// 监听上传进度\n\t\t\t\t\tuploadTask.onProgressUpdate((res) => {\n\t\t\t\t\t\tfile.progress = res.progress\n\t\t\t\t\t\tupdateTotalProgress()\n\t\t\t\t\t})\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error('创建上传任务失败:', e);\n\t\t\t\t\tfile.uploadStatus = 'error';\n\t\t\t\t\treject(new Error('创建上传任务失败: ' + e.message));\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// 开始上传\n\t\t\tperformUpload();\n\t\t})\n\t} catch (e) {\n\t\tconsole.error('上传图片错误:', e)\n\t\tfile.uploadStatus = 'error'\n\t\tthrow new Error(`上传失败：${e.message}`)\n\t}\n}\n\n// 上传视频到七牛云\nconst uploadVideoToQiniu = async (file) => {\n\ttry {\n\t\t// 更新上传状态\n\t\tfile.uploadStatus = 'uploading'\n\t\t\n\t\t// 获取文件扩展名\n\t\tconst fileExt = getFileExtension(file.tempPath)\n\t\t\n\t\t// 获取七牛云上传凭证\n\t\tconst uploadConfig = await qiniuCloud.generateUploadToken({\n\t\t\ttype: 'video',\n\t\t\text: fileExt\n\t\t})\n\t\t\n\t\tconsole.log('获取七牛云上传凭证成功:', uploadConfig)\n\t\t\n\t\tif (!uploadConfig || !uploadConfig.token) {\n\t\t\tthrow new Error('获取上传凭证失败')\n\t\t}\n\t\t\n\t\t// 确保上传域名使用HTTPS协议\n\t\tlet uploadDomain = uploadConfig.uploadDomain;\n\t\tif (uploadDomain && !uploadDomain.startsWith('https://')) {\n\t\t\tuploadDomain = uploadDomain.replace('http://', 'https://');\n\t\t\tconsole.log('已将上传域名转换为HTTPS:', uploadDomain);\n\t\t}\n\t\t\n\t\t// 保存视频样式配置 - 简化为只使用一种转码方式\n\t\tconst videoStyle = uploadConfig.videoStyle || 'standard';\n\t\tconst styleSeparator = uploadConfig.styleSeparator || '-';\n\t\t\n\t\t// 显示轻量级提示，不阻塞界面\n\t\tuni.showToast({\n\t\t\ttitle: '开始上传视频',\n\t\t\ticon: 'loading',\n\t\t\tduration: 2000\n\t\t});\n\t\t\n\t\t// 上传文件\n\t\treturn new Promise((resolve, reject) => {\n\t\t\t// 对于大文件，显示更详细的上传信息\n\t\t\tlet lastUpdateTime = Date.now();\n\t\t\tlet uploadSpeed = 0;\n\t\t\tlet uploadedSize = 0;\n\t\t\tlet estimatedTimeLeft = '计算中...';\n\t\t\tlet lastToastTime = 0; // 控制Toast显示频率\n\t\t\t\n\t\t\tconst updateProgress = (progress, currentSize) => {\n\t\t\t\tconst now = Date.now();\n\t\t\t\tconst timeElapsed = (now - lastUpdateTime) / 1000; // 秒\n\t\t\t\t\n\t\t\t\tif (timeElapsed > 1) { // 每秒更新一次\n\t\t\t\t\tconst sizeDiff = currentSize - uploadedSize; // 字节\n\t\t\t\t\tuploadSpeed = sizeDiff / timeElapsed; // 字节/秒\n\t\t\t\t\t\n\t\t\t\t\t// 计算剩余时间\n\t\t\t\t\tconst remainingSize = file.size - currentSize;\n\t\t\t\t\tconst remainingTime = uploadSpeed > 0 ? remainingSize / uploadSpeed : 0;\n\t\t\t\t\t\n\t\t\t\t\t// 格式化剩余时间\n\t\t\t\t\tif (remainingTime > 60) {\n\t\t\t\t\t\testimatedTimeLeft = `约${Math.ceil(remainingTime / 60)}分钟`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\testimatedTimeLeft = `约${Math.ceil(remainingTime)}秒`;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// 格式化速度\n\t\t\t\t\tlet speedText = '';\n\t\t\t\t\tif (uploadSpeed > 1024 * 1024) {\n\t\t\t\t\t\tspeedText = `${(uploadSpeed / (1024 * 1024)).toFixed(2)}MB/s`;\n\t\t\t\t\t} else if (uploadSpeed > 1024) {\n\t\t\t\t\t\tspeedText = `${(uploadSpeed / 1024).toFixed(2)}KB/s`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tspeedText = `${Math.floor(uploadSpeed)}B/s`;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// 控制Toast显示频率，避免频繁弹出\n\t\t\t\t\tif (now - lastToastTime > 3000) { // 每3秒最多显示一次Toast\n\t\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\t\ttitle: `上传中: ${progress}%`,\n\t\t\t\t\t\t\ticon: 'none',\n\t\t\t\t\t\t\tduration: 1500\n\t\t\t\t\t\t});\n\t\t\t\t\t\tlastToastTime = now;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// 更新参考值\n\t\t\t\t\tlastUpdateTime = now;\n\t\t\t\t\tuploadedSize = currentSize;\n\t\t\t\t}\n\t\t\t};\n\t\t\t\n\t\t\t// 添加重试逻辑\n\t\t\tlet retryCount = 0;\n\t\t\tconst maxRetries = 3;\n\t\t\t\n\t\t\tconst performUpload = () => {\n\t\t\t\ttry {\n\t\t\t\t\tconst uploadTask = uni.uploadFile({\n\t\t\t\t\t\turl: uploadDomain,\n\t\t\t\t\t\tfilePath: file.tempPath,\n\t\t\t\t\t\tname: 'file',\n\t\t\t\t\t\tformData: {\n\t\t\t\t\t\t\ttoken: uploadConfig.token,\n\t\t\t\t\t\t\tkey: uploadConfig.key\n\t\t\t\t\t\t},\n\t\t\t\t\t\tsuccess: (uploadRes) => {\n\t\t\t\t\t\t\tconsole.log('上传响应:', uploadRes)\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (uploadRes.statusCode === 200) {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tconst data = JSON.parse(uploadRes.data)\n\t\t\t\t\t\t\t\t\tconst fileUrl = `${uploadConfig.domain}/${uploadConfig.key}`\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t// 更新上传状态\n\t\t\t\t\t\t\t\t\tfile.uploadStatus = 'success'\n\t\t\t\t\t\t\t\t\tfile.videoURL = fileUrl\n\t\t\t\t\t\t\t\t\tfile.progress = 100\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t// 构建缩略图URL (七牛云视频截帧)\n\t\t\t\t\t\t\t\t\tconst thumbnailURL = `${fileUrl}?vframe/jpg/offset/1`\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t// 生成转码后的视频URL - 只使用一种转码方式\n\t\t\t\t\t\t\t\t\tconst transcodedURL = videoStyle ? `${fileUrl}${styleSeparator}${videoStyle}` : fileUrl;\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t// 显示成功提示\n\t\t\t\t\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\t\t\t\t\ttitle: '视频上传成功',\n\t\t\t\t\t\t\t\t\t\ticon: 'success',\n\t\t\t\t\t\t\t\t\t\tduration: 2000\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tresolve({\n\t\t\t\t\t\t\t\t\t\ttype: 'video',\n\t\t\t\t\t\t\t\t\t\tvideoURL: fileUrl,\n\t\t\t\t\t\t\t\t\t\tthumbnailURL: thumbnailURL,\n\t\t\t\t\t\t\t\t\t\tplayURL: transcodedURL, // 使用单一转码方式\n\t\t\t\t\t\t\t\t\t\tduration: data.duration ? parseInt(data.duration) : file.duration,\n\t\t\t\t\t\t\t\t\t\tsize: file.size,\n\t\t\t\t\t\t\t\t\t\twidth: file.width,\n\t\t\t\t\t\t\t\t\t\theight: file.height,\n\t\t\t\t\t\t\t\t\t\tformat: file.format || 'mp4'\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\t\tconsole.error('解析上传响应失败:', e)\n\t\t\t\t\t\t\t\t\tfile.uploadStatus = 'error'\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\t\t\t\t\ttitle: '解析响应失败',\n\t\t\t\t\t\t\t\t\t\ticon: 'none',\n\t\t\t\t\t\t\t\t\t\tduration: 2000\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\treject(new Error('解析上传响应失败'))\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconsole.error('上传失败状态码:', uploadRes.statusCode)\n\t\t\t\t\t\t\t\tfile.uploadStatus = 'error'\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\t\t\t\ttitle: `上传失败: ${uploadRes.statusCode}`,\n\t\t\t\t\t\t\t\t\ticon: 'none',\n\t\t\t\t\t\t\t\t\tduration: 2000\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\treject(new Error(`上传失败: ${uploadRes.statusCode}`))\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\tfail: (error) => {\n\t\t\t\t\t\t\tconsole.error('上传失败:', error)\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// 检查是否是域名错误\n\t\t\t\t\t\t\tif (error.errMsg && error.errMsg.includes('url not in domain list')) {\n\t\t\t\t\t\t\t\tuni.showModal({\n\t\t\t\t\t\t\t\t\ttitle: '上传域名未授权',\n\t\t\t\t\t\t\t\t\tcontent: '请在微信小程序管理后台添加 ' + uploadDomain + ' 到合法域名列表',\n\t\t\t\t\t\t\t\t\tshowCancel: false\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\tfile.uploadStatus = 'error'\n\t\t\t\t\t\t\t\treject(new Error(error.errMsg || '上传失败'))\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// 检查是否是连接数超限错误\n\t\t\t\t\t\t\tif (error.errMsg && error.errMsg.includes('exceed max upload connection count')) {\n\t\t\t\t\t\t\t\tif (retryCount < maxRetries) {\n\t\t\t\t\t\t\t\t\tretryCount++;\n\t\t\t\t\t\t\t\t\tconsole.log(`连接数超限，第${retryCount}次重试上传视频...`);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\t\t\t\t\ttitle: `连接数超限，正在重试(${retryCount}/${maxRetries})`,\n\t\t\t\t\t\t\t\t\t\ticon: 'none',\n\t\t\t\t\t\t\t\t\t\tduration: 2000\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t// 延迟重试，给其他上传任务完成的时间\n\t\t\t\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\t\t\t\tperformUpload();\n\t\t\t\t\t\t\t\t\t}, 2000 * retryCount); // 递增延迟\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tfile.uploadStatus = 'error'\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\t\t\ttitle: '上传失败，请重试',\n\t\t\t\t\t\t\t\ticon: 'none',\n\t\t\t\t\t\t\t\tduration: 2000\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\treject(new Error(error.errMsg || '上传失败'))\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t\n\t\t\t\t\t// 监听上传进度\n\t\t\t\t\tuploadTask.onProgressUpdate((res) => {\n\t\t\t\t\t\tfile.progress = res.progress\n\t\t\t\t\t\t\n\t\t\t\t\t\t// 更新上传速度和剩余时间估计\n\t\t\t\t\t\tupdateProgress(res.progress, res.totalBytesWritten);\n\t\t\t\t\t\t\n\t\t\t\t\t\tupdateTotalProgress()\n\t\t\t\t\t})\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error('创建上传任务失败:', e);\n\t\t\t\t\tfile.uploadStatus = 'error';\n\t\t\t\t\t\n\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\ttitle: '创建上传任务失败',\n\t\t\t\t\t\ticon: 'none',\n\t\t\t\t\t\tduration: 2000\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\treject(new Error('创建上传任务失败: ' + e.message));\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// 开始上传\n\t\t\tperformUpload();\n\t\t})\n\t} catch (e) {\n\t\tconsole.error('上传视频错误:', e)\n\t\tfile.uploadStatus = 'error'\n\t\t\n\t\tuni.showToast({\n\t\t\ttitle: '上传失败: ' + e.message,\n\t\t\ticon: 'none',\n\t\t\tduration: 2000\n\t\t});\n\t\t\n\t\tthrow new Error(`上传失败：${e.message}`)\n\t}\n}\n\n// 获取文件扩展名\nconst getFileExtension = (filePath) => {\n\tconst lastDotIndex = filePath.lastIndexOf('.')\n\tif (lastDotIndex > 0) {\n\t\treturn filePath.substring(lastDotIndex + 1).toLowerCase()\n\t}\n\treturn ''\n}\n\n// 更新总进度\nconst updateTotalProgress = () => {\n\tlet totalFiles = imageList.value.length + (videoData.value ? 1 : 0)\n\tlet totalProgressValue = 0\n\t\n\t// 计算图片进度\n\timageList.value.forEach(file => {\n\t\ttotalProgressValue += file.progress || 0\n\t})\n\t\n\t// 计算视频进度\n\tif (videoData.value) {\n\t\ttotalProgressValue += videoData.value.progress || 0\n\t}\n\t\n\ttotalProgress.value = totalFiles > 0 ? Math.floor(totalProgressValue / totalFiles) : 0\n}\n\n// 发布内容\nconst publishContent = async () => {\n\ttry {\n\t\t// 防止重复提交\n\t\tif (isPublishing.value) {\n\t\t\tconsole.log('发布请求正在处理中，请勿重复提交')\n\t\t\treturn\n\t\t}\n\t\t\n\t\t// 设置发布状态\n\t\tisPublishing.value = true\n\t\t\n\t\t// 检查用户是否登录\n\t\tif (!checkUserLogin()) {\n\t\t\tisPublishing.value = false\n\t\t\treturn\n\t\t}\n\t\t\n\t\t// 验证分类\n\t\tif (!selectedCategory.value) {\n\t\t\tuni.showToast({\n\t\t\t\ttitle: '请选择分类',\n\t\t\t\ticon: 'none'\n\t\t\t})\n\t\t\tisPublishing.value = false\n\t\t\treturn\n\t\t}\n\t\t\n\t\t// 验证文本内容 - 强制要求必须有文字内容\n\t\tif (!content.value.trim()) {\n\t\t\tuni.showToast({\n\t\t\t\ttitle: '请输入文字内容',\n\t\t\t\ticon: 'none',\n\t\t\t\tduration: 2000\n\t\t\t})\n\t\t\tisPublishing.value = false\n\t\t\treturn\n\t\t}\n\t\t\n\t\t// 检查文字内容长度是否太短\n\t\tif (content.value.trim().length < 5) {\n\t\t\tuni.showToast({\n\t\t\t\ttitle: '文字内容需大于5个字符',\n\t\t\t\ticon: 'none',\n\t\t\t\tduration: 2000\n\t\t\t})\n\t\t\tisPublishing.value = false\n\t\t\treturn\n\t\t}\n\t\t\n\t\t// 检查是否有正在上传的媒体文件\n\t\tconst hasUploadingMedia = imageList.value.some(item => item.uploadStatus === 'uploading') || \n\t\t\t\t\t\t\t\t(videoData.value && videoData.value.uploadStatus === 'uploading')\n\t\t\n\t\tif (hasUploadingMedia) {\n\t\t\t// 询问用户是否等待上传完成\n\t\t\tuni.showModal({\n\t\t\t\ttitle: '媒体文件正在上传',\n\t\t\t\tcontent: '有媒体文件正在上传中，是否等待上传完成后再发布？',\n\t\t\t\tconfirmText: '等待上传',\n\t\t\t\tcancelText: '仅发布文字',\n\t\t\t\tsuccess: (res) => {\n\t\t\t\t\tif (res.confirm) {\n\t\t\t\t\t\t// 用户选择等待上传\n\t\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\t\ttitle: '请等待上传完成',\n\t\t\t\t\t\t\ticon: 'none',\n\t\t\t\t\t\t\tduration: 2000\n\t\t\t\t\t\t});\n\t\t\t\t\t\tisPublishing.value = false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// 用户选择仅发布文字内容\n\t\t\t\t\t\tcontinuePublishWithoutMedia();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// 正常发布全部内容\n\t\tawait publishWithAllMedia();\n\t\t\n\t} catch (e) {\n\t\tconsole.error('发布失败:', e)\n\t\tuni.hideLoading()\n\t\tuni.showToast({\n\t\t\ttitle: e.message || '发布失败',\n\t\t\ticon: 'none'\n\t\t})\n\t\tisUploading.value = false\n\t\tisPublishing.value = false\n\t}\n}\n\n// 仅发布文字内容，忽略未完成上传的媒体\nconst continuePublishWithoutMedia = async () => {\n\ttry {\n\t\tuni.showLoading({\n\t\t\ttitle: '正在发布...',\n\t\t\tmask: true\n\t\t});\n\t\t\n\t\t// 构建发布数据 - 只包含文字内容\n\t\tconst paramsArticle = {\n\t\t\tuser_id: userStore.userInfo.uid,\n\t\t\tcontent: content.value.trim(),\n\t\t\tcate_id: selectedCategory.value,\n\t\t\tcate_name: categoryList.value[cateIndex.value]?.cate_name || '',\n\t\t\taddress: locationInfo.value?.address || '',\n\t\t\tdistrict: locationInfo.value?.district || '',\n\t\t\tuser_nickName: userStore.userInfo.nickName,\n\t\t\tuser_avatarUrl: userStore.userInfo.avatarUrl,\n\t\t\tuser_mobile: userStore.userInfo.mobile,\n\t\t\tstate: 1\n\t\t};\n\t\t\n\t\t// 只添加已完成上传的媒体\n\t\tconst uploadedImages = imageList.value\n\t\t\t.filter(item => item.uploadStatus === 'success' && !item.loadError)\n\t\t\t.map(item => ({\n\t\t\t\ttype: 'image',\n\t\t\t\turl: item.fileURL,\n\t\t\t\tthumbnailURL: item.thumbnailURL,\n\t\t\t\tcompressedURL: item.compressedURL\n\t\t\t}));\n\t\t\n\t\tif (uploadedImages.length > 0) {\n\t\t\tparamsArticle.mediaType = 'image';\n\t\t\tparamsArticle.images = uploadedImages;\n\t\t}\n\t\t\n\t\t// 只添加已完成上传的视频\n\t\tif (videoData.value && videoData.value.uploadStatus === 'success') {\n\t\t\tparamsArticle.mediaType = 'video';\n\t\t\tparamsArticle.video = {\n\t\t\t\ttype: 'video',\n\t\t\t\tvideoURL: videoData.value.videoURL,\n\t\t\t\tthumbnailURL: videoData.value.thumbnailURL,\n\t\t\t\tplayURL: videoData.value.playURL || videoData.value.videoURL,\n\t\t\t\tduration: videoData.value.duration,\n\t\t\t\tsize: videoData.value.size,\n\t\t\t\twidth: videoData.value.width,\n\t\t\t\theight: videoData.value.height,\n\t\t\t\tformat: videoData.value.format || 'mp4'\n\t\t\t};\n\t\t}\n\t\t\n\t\tconsole.log('发布数据(仅已上传完成的媒体):', paramsArticle);\n\t\t\n\t\t// 调用文章发布API\n\t\tconst res = await articleApi.addArticle(paramsArticle);\n\t\t\n\t\thandlePublishSuccess(res);\n\t} catch (error) {\n\t\tconsole.error('发布失败:', error);\n\t\tuni.hideLoading();\n\t\tuni.showToast({\n\t\t\ttitle: error.message || '发布失败',\n\t\t\ticon: 'none'\n\t\t});\n\t\tisUploading.value = false;\n\t\tisPublishing.value = false;\n\t}\n};\n\n// 发布包含所有媒体的内容\nconst publishWithAllMedia = async () => {\n\ttry {\n\t\t// 开始发布\n\t\tisUploading.value = true;\n\t\t\n\t\tuni.showLoading({\n\t\t\ttitle: '正在发布...',\n\t\t\tmask: true\n\t\t});\n\t\t\n\t\t// 收集已上传成功的图片\n\t\tconst uploadedImages = imageList.value\n\t\t\t.filter(item => item.uploadStatus === 'success' && !item.loadError)\n\t\t\t.map(item => ({\n\t\t\t\ttype: 'image',\n\t\t\t\turl: item.fileURL,\n\t\t\t\tthumbnailURL: item.thumbnailURL,\n\t\t\t\tcompressedURL: item.compressedURL\n\t\t\t}));\n\t\t\n\t\t// 收集已上传成功的视频\n\t\tlet uploadedVideo = null;\n\t\tif (videoData.value && videoData.value.uploadStatus === 'success') {\n\t\t\tuploadedVideo = {\n\t\t\t\ttype: 'video',\n\t\t\t\tvideoURL: videoData.value.videoURL,\n\t\t\t\tthumbnailURL: videoData.value.thumbnailURL,\n\t\t\t\tplayURL: videoData.value.playURL || videoData.value.videoURL,\n\t\t\t\tduration: videoData.value.duration,\n\t\t\t\tsize: videoData.value.size,\n\t\t\t\twidth: videoData.value.width,\n\t\t\t\theight: videoData.value.height,\n\t\t\t\tformat: videoData.value.format || 'mp4'\n\t\t\t};\n\t\t}\n\t\t\n\t\t// 构建发布数据\n\t\tconst paramsArticle = {\n\t\t\tuser_id: userStore.userInfo.uid,\n\t\t\tcontent: content.value.trim(),\n\t\t\tcate_id: selectedCategory.value,\n\t\t\tcate_name: categoryList.value[cateIndex.value]?.cate_name || '',\n\t\t\taddress: locationInfo.value?.address || '',\n\t\t\tdistrict: locationInfo.value?.district || '',\n\t\t\tuser_nickName: userStore.userInfo.nickName,\n\t\t\tuser_avatarUrl: userStore.userInfo.avatarUrl,\n\t\t\tuser_mobile: userStore.userInfo.mobile,\n\t\t\tstate: 1\n\t\t};\n\t\t\n\t\t// 添加媒体数据\n\t\tif (uploadedImages.length > 0) {\n\t\t\tparamsArticle.mediaType = 'image';\n\t\t\tparamsArticle.images = uploadedImages;\n\t\t}\n\t\t\n\t\tif (uploadedVideo) {\n\t\t\tparamsArticle.mediaType = 'video';\n\t\t\tparamsArticle.video = uploadedVideo;\n\t\t}\n\t\t\n\t\tconsole.log('发布数据:', paramsArticle);\n\t\t\n\t\t// 调用文章发布API\n\t\tconst res = await articleApi.addArticle(paramsArticle);\n\t\t\n\t\thandlePublishSuccess(res);\n\t} catch (error) {\n\t\tconsole.error('发布失败:', error);\n\t\tuni.hideLoading();\n\t\tuni.showToast({\n\t\t\ttitle: error.message || '发布失败',\n\t\t\ticon: 'none'\n\t\t});\n\t\tisUploading.value = false;\n\t\tisPublishing.value = false;\n\t}\n};\n\n// 处理发布成功后的逻辑\nconst handlePublishSuccess = (res) => {\n\tif (res.id) {\n\t\tuni.hideLoading();\n\t\tuni.showToast({\n\t\t\ttitle: '发布成功',\n\t\t\ticon: 'success'\n\t\t});\n\t\t\n\t\t// 清空表单\n\t\tcontent.value = '';\n\t\timageList.value = [];\n\t\tvideoData.value = null;\n\t\t\n\t\t// 保存新发布的文章ID\n\t\tpublishedArticleId.value = res.id;\n\t\t\n\t\t// 延迟执行跳转，确保Toast显示完成\n\t\tsetTimeout(() => {\n\t\t\t// 触发全局的刷新事件，传递新文章ID\n\t\t\tuni.$emit('articlePublished', publishedArticleId.value);\n\t\t\t\n\t\t\t// 检查当前页面栈\n\t\t\tconst pages = getCurrentPages();\n\t\t\tconsole.log('当前页面栈:', pages);\n\t\t\t\n\t\t\t// 判断是否需要返回到首页\n\t\t\tif (pages.length > 1) {\n\t\t\t\t// 如果页面栈中有多个页面，使用返回\n\t\t\t\tuni.navigateBack({\n\t\t\t\t\tdelta: 1,\n\t\t\t\t\tsuccess: () => {\n\t\t\t\t\t\tconsole.log('成功返回上一页');\n\t\t\t\t\t\t// 触发一次性刷新事件\n\t\t\t\t\t\tuni.$emit('refreshIndexOnce', publishedArticleId.value);\n\t\t\t\t\t},\n\t\t\t\t\tfail: (err) => {\n\t\t\t\t\t\tconsole.error('返回上一页失败:', err);\n\t\t\t\t\t\t// 如果返回失败，尝试直接跳转到首页\n\t\t\t\t\t\tnavigateToIndex(publishedArticleId.value);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// 如果只有当前页面，直接跳转到首页\n\t\t\t\tnavigateToIndex(publishedArticleId.value);\n\t\t\t}\n\t\t}, 1500);\n\t} else {\n\t\tthrow new Error(res.message || '发布失败');\n\t}\n\t\n\tisUploading.value = false;\n\tisPublishing.value = false;\n};\n\n// 跳转到首页的辅助函数\nconst navigateToIndex = (articleId) => {\n\tconsole.log('准备跳转到首页，文章ID:', articleId)\n\t\n\t// 尝试使用switchTab跳转到首页\n\tuni.switchTab({\n\t\turl: '/pages/index/index',\n\t\tsuccess: () => {\n\t\t\tconsole.log('成功跳转到首页')\n\t\t\t// 延迟触发刷新事件，确保首页已完全加载\n\t\t\tsetTimeout(() => {\n\t\t\t\tuni.$emit('refreshIndexOnce', articleId)\n\t\t\t}, 500)\n\t\t},\n\t\tfail: (err) => {\n\t\t\tconsole.error('跳转到首页失败:', err)\n\t\t\t// 如果switchTab失败，尝试使用reLaunch\n\t\t\tuni.reLaunch({\n\t\t\t\turl: '/pages/index/index',\n\t\t\t\tsuccess: () => {\n\t\t\t\t\tconsole.log('使用reLaunch成功跳转到首页')\n\t\t\t\t\t// 延迟触发刷新事件\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tuni.$emit('refreshIndexOnce', articleId)\n\t\t\t\t\t}, 500)\n\t\t\t\t},\n\t\t\t\tfail: (relaunchErr) => {\n\t\t\t\t\tconsole.error('所有导航方法都失败了:', relaunchErr)\n\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\ttitle: '跳转首页失败，请手动返回',\n\t\t\t\t\t\ticon: 'none',\n\t\t\t\t\t\tduration: 3000\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t})\n}\n\n</script>\n\n<style>\n.publish-container {\n\tdisplay: flex;\n\tflex-direction: column;\n\tmin-height: 100vh;\n\tbackground-color: #f5f7fa;\n\tposition: relative;\n}\n\n/* 内容区域样式 */\n.content-container {\n\tflex: 1;\n\tpadding: 24rpx;\n\tpadding-bottom: calc(140rpx + constant(safe-area-inset-bottom)); /* iOS 11.2以下 */\n\tpadding-bottom: calc(140rpx + env(safe-area-inset-bottom)); /* iOS 11.2及以上 */\n\tdisplay: flex;\n\tflex-direction: column;\n}\n\n/* 分类选择样式 */\n.category-section {\n\tmargin-bottom: 32rpx;\n\tpadding: 24rpx;\n\tbackground-color: #fff;\n\tborder-radius: 16rpx;\n\tbox-shadow: 0 4rpx 16rpx rgba(0, 0, 0, 0.05);\n}\n\n/* 分类标题和位置信息的容器 */\n.section-header {\n\tdisplay: flex;\n\talign-items: center;\n\tmargin-bottom: 24rpx;\n\tflex-wrap: wrap;\n}\n\n.section-title {\n\tfont-size: 32rpx;\n\tcolor: #333;\n\tfont-weight: 600;\n\tpadding-left: 16rpx;\n\tposition: relative;\n\tmargin-right: 16rpx;\n}\n\n.section-title::before {\n\tcontent: '';\n\tposition: absolute;\n\tleft: 0;\n\ttop: 50%;\n\ttransform: translateY(-50%);\n\twidth: 6rpx;\n\theight: 28rpx;\n\tbackground: linear-gradient(to bottom, #2196F3, #1976D2);\n\tborder-radius: 3rpx;\n}\n\n/* 内联位置信息样式 */\n.location-info-inline {\n\tdisplay: flex;\n\talign-items: center;\n\tfont-size: 22rpx;\n\tcolor: #999;\n\tmax-width: 60%;\n\tbackground-color: #f8f8f8;\n\tpadding: 4rpx 10rpx;\n\tborder-radius: 20rpx;\n}\n\n.location-info-inline text {\n\tmargin-left: 4rpx;\n\toverflow: hidden;\n\ttext-overflow: ellipsis;\n\twhite-space: nowrap;\n\tmax-width: calc(100% - 20rpx);\n}\n\n.category-grid {\n\tdisplay: grid;\n\tgrid-template-columns: repeat(5, 1fr);\n\tgap: 16rpx;\n\tpadding: 10rpx;\n}\n\n.category-item {\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n\tpadding: 16rpx 8rpx;\n\tborder-radius: 12rpx;\n\tbackground-color: #fff;\n\ttransition: all 0.3s;\n\tmin-height: 150rpx;\n\tposition: relative;\n\toverflow: hidden;\n\tcursor: pointer;\n\tborder: 2rpx solid transparent;\n}\n\n.category-item:active {\n\ttransform: scale(0.98);\n}\n\n.category-item.active {\n\tbackground-color: #fff;\n\tborder: 2rpx solid #2196F3;\n\tbox-shadow: 0 2rpx 8rpx rgba(33, 150, 243, 0.1);\n}\n\n.category-icon {\n\twidth: 80rpx;\n\theight: 80rpx;\n\tmargin-bottom: 12rpx;\n\tobject-fit: contain;\n\tborder-radius: 10rpx;\n\ttransition: all 0.3s;\n}\n\n.category-item.active .category-icon {\n\ttransform: scale(1.02);\n}\n\n.category-name {\n\tfont-size: 24rpx;\n\tcolor: #333;\n\ttext-align: center;\n\twidth: 100%;\n\tline-height: 1.3;\n\tdisplay: -webkit-box;\n\t-webkit-box-orient: vertical;\n\t-webkit-line-clamp: 2;\n\toverflow: hidden;\n}\n\n.category-item.active .category-name {\n\tcolor: #2196F3;\n\tfont-weight: 500;\n}\n\n/* 合并文本、媒体和位置的整体容器 */\n.content-media-section {\n\tposition: relative;\n\tmargin-bottom: 32rpx;\n\tpadding: 24rpx;\n\tbackground-color: #fff;\n\tborder-radius: 16rpx;\n\tbox-shadow: 0 4rpx 16rpx rgba(0, 0, 0, 0.05);\n}\n\n/* 文本输入区域样式 */\n.textarea-container {\n\tposition: relative;\n\tmargin-bottom: 24rpx;\n\twidth: 100%;\n}\n\n.content-textarea {\n\twidth: 100%;\n\tmin-height: 120rpx;\n\tfont-size: 30rpx;\n\tline-height: 1.6;\n\tpadding: 16rpx;\n\tpadding-bottom: 40rpx;\n\tbackground-color: #f8f8f8;\n\tborder-radius: 12rpx;\n\tbox-sizing: border-box;\n\twhite-space: pre-wrap;\n\tword-break: break-word;\n}\n\n.word-count {\n\tposition: absolute;\n\tbottom: 8rpx;\n\tright: 16rpx;\n\tfont-size: 24rpx;\n\tcolor: #999;\n\tbackground-color: rgba(255, 255, 255, 0.7);\n\tpadding: 2rpx 10rpx;\n\tborder-radius: 20rpx;\n\tz-index: 1;\n}\n\n/* 媒体区域样式 */\n.media-area {\n\tmargin-top: 16rpx;\n\tmargin-bottom: 16rpx;\n\tborder-top: 1rpx solid #f0f0f0;\n\tpadding-top: 16rpx;\n}\n\n.media-tabs {\n\tdisplay: flex;\n\tborder-bottom: 1rpx solid #eee;\n\tmargin-bottom: 0;\n\tpadding: 0;\n}\n\n.tab-item {\n\tdisplay: flex;\n\talign-items: center;\n\tpadding: 16rpx 32rpx;\n\tmargin-right: 24rpx;\n\tborder-bottom: 3rpx solid transparent;\n\tposition: relative;\n\ttransition: all 0.3s;\n}\n\n.tab-item.active {\n\tborder-bottom-color: #399bfe;\n}\n\n.tab-text {\n\tmargin-left: 8rpx;\n\tfont-size: 28rpx;\n\tcolor: #333;\n}\n\n.active-text {\n\tcolor: #399bfe;\n}\n\n.media-content {\n\tpadding: 24rpx 0;\n\ttransition: all 0.3s ease;\n}\n\n/* 底部安全区域占位 */\n.safe-area-placeholder {\n\theight: 0;\n\twidth: 100%;\n\tmargin-top: auto;\n}\n\n/* 底部发布按钮样式 */\n.publish-btn-container {\n\tpadding: 24rpx 0;\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n\tbackground-color: #fff;\n\tbox-shadow: 0 -4rpx 16rpx rgba(0, 0, 0, 0.05);\n\tposition: fixed;\n\tbottom: 0;\n\tleft: 0;\n\tright: 0;\n\tz-index: 10;\n\twidth: 100%;\n\t/* 添加安全区域适配 */\n\tpadding-bottom: constant(safe-area-inset-bottom); /* iOS 11.2以下 */\n\tpadding-bottom: env(safe-area-inset-bottom); /* iOS 11.2及以上 */\n}\n\n.publish-btn {\n\twidth: 90%;\n\theight: 88rpx;\n\tline-height: 88rpx;\n\tbackground: linear-gradient(to right, #399bfe, #3178f2);\n\tcolor: #fff;\n\tfont-size: 32rpx;\n\tfont-weight: 500;\n\tborder-radius: 44rpx;\n\tbox-shadow: 0 4rpx 16rpx rgba(33, 150, 243, 0.3);\n\ttransition: all 0.3s;\n\ttext-align: center;\n}\n\n.publish-btn:active {\n\ttransform: scale(0.98);\n\topacity: 0.9;\n\tbox-shadow: 0 2rpx 8rpx rgba(33, 150, 243, 0.2);\n}\n\n/* 保留其他必要的样式 */\n.image-grid {\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\tgap: 16rpx;\n}\n\n.image-item {\n\twidth: calc((100% - 32rpx) / 3);\n\theight: 200rpx;\n\tposition: relative;\n\tborder-radius: 8rpx;\n\toverflow: hidden;\n\tbox-shadow: 0 2rpx 6rpx rgba(0, 0, 0, 0.1);\n}\n\n.image-item image {\n\twidth: 100%;\n\theight: 100%;\n\tobject-fit: cover;\n}\n\n.delete-btn {\n\tposition: absolute;\n\ttop: 8rpx;\n\tright: 8rpx;\n\twidth: 40rpx;\n\theight: 40rpx;\n\tbackground-color: rgba(0, 0, 0, 0.5);\n\tborder-radius: 50%;\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tz-index: 2;\n}\n\n.progress-overlay {\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n\twidth: 100%;\n\theight: 100%;\n\tbackground-color: rgba(0, 0, 0, 0.5);\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n\tjustify-content: center;\n\tz-index: 1;\n}\n\n.progress-text {\n\tcolor: #fff;\n\tfont-size: 24rpx;\n\tmargin-bottom: 10rpx;\n}\n\n.progress-bar {\n\twidth: 80%;\n\theight: 6rpx;\n\tbackground-color: rgba(255, 255, 255, 0.3);\n\tborder-radius: 3rpx;\n\toverflow: hidden;\n}\n\n.progress {\n\theight: 100%;\n\tbackground-color: #fff;\n}\n\n.add-media-btn {\n\twidth: calc((100% - 32rpx) / 3);\n\theight: 200rpx;\n\tbackground-color: #f8f8f8;\n\tborder: 1rpx dashed #ddd;\n\tborder-radius: 8rpx;\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n\tjustify-content: center;\n}\n\n.btn-text {\n\tfont-size: 24rpx;\n\tcolor: #999;\n\tmargin-top: 10rpx;\n}\n\n.video-container {\n\twidth: 100%;\n\tmargin-bottom: 16rpx;\n}\n\n.video-item {\n\twidth: 100%;\n\theight: 400rpx;\n\tposition: relative;\n\tborder-radius: 8rpx;\n\toverflow: hidden;\n\tbox-shadow: 0 2rpx 8rpx rgba(0, 0, 0, 0.1);\n}\n\n.video-item image {\n\twidth: 100%;\n\theight: 100%;\n\tobject-fit: cover;\n}\n\n.video-icon {\n\tposition: absolute;\n\ttop: 50%;\n\tleft: 50%;\n\ttransform: translate(-50%, -50%);\n\twidth: 80rpx;\n\theight: 80rpx;\n\tbackground-color: rgba(0, 0, 0, 0.5);\n\tborder-radius: 50%;\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n}\n\n.video-info {\n\tposition: absolute;\n\tbottom: 16rpx;\n\tright: 16rpx;\n\tdisplay: flex;\n\tgap: 12rpx;\n\tpadding: 8rpx 16rpx;\n\tbackground-color: rgba(0, 0, 0, 0.6);\n\tborder-radius: 8rpx;\n}\n\n.video-info text {\n\tcolor: #fff;\n\tfont-size: 24rpx;\n}\n\n.video-upload-btn {\n\twidth: 100%;\n\theight: 300rpx;\n\tbackground-color: #f8f8f8;\n\tborder: 1rpx dashed #ddd;\n\tborder-radius: 8rpx;\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n\tjustify-content: center;\n}\n\n.upload-text {\n\tfont-size: 28rpx;\n\tcolor: #666;\n\tmargin-top: 16rpx;\n\tfont-weight: 500;\n}\n\n.upload-subtext {\n\tfont-size: 24rpx;\n\tcolor: #999;\n\tmargin-top: 8rpx;\n}\n\n.tip-text {\n\tdisplay: block;\n\tmargin-top: 16rpx;\n\tfont-size: 24rpx;\n\tcolor: #999;\n\ttext-align: center;\n}\n\n.loading-placeholder {\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n\tjustify-content: center;\n\tpadding: 40rpx 0;\n\tcolor: #999;\n}\n\n.loading-placeholder text {\n\tmargin-top: 16rpx;\n\tfont-size: 28rpx;\n}\n\n.category-icon-fallback {\n\twidth: 80rpx;\n\theight: 80rpx;\n\tmargin-bottom: 12rpx;\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tbackground-color: #f5f5f5;\n\tborder-radius: 10rpx;\n\ttransition: all 0.3s;\n}\n\n.category-icon-fallback.active {\n\tbackground-color: #E3F2FD;\n\ttransform: scale(1.05);\n}\n</style>","import MiniProgramPage from 'D:/代码测试/wx2/subPages/qiniuyun/qiniuyun.vue'\nwx.createPage(MiniProgramPage)"],"names":["useUserInfoStore","uniCloud","ref","computed","uni","testLogin","onMounted","onBeforeUnmount","onUnmounted","MiniProgramPage"],"mappings":";;;;;;;;;;;;;;;AA2LA,UAAM,YAAYA,WAAAA,iBAAkB;AACpC,UAAM,aAAaC,cAAQ,GAAC,aAAa,iBAAiB,EAAE,UAAU,MAAM;AACvDA,kBAAQ,GAAC,aAAa,kBAAkB,EAAE,UAAU,KAAI,CAAE;AAC/E,UAAM,aAAaA,cAAQ,GAAC,aAAa,aAAa,EAAE,UAAU,MAAM;AAGvDC,kBAAG,IAAC,EAAE;AACvB,UAAM,YAAYA,cAAG,IAAC,EAAE;AACxB,UAAM,YAAYA,cAAG,IAAC,IAAI;AAC1B,UAAM,cAAcA,cAAG,IAAC,KAAK;AAC7B,UAAM,gBAAgBA,cAAG,IAAC,CAAC;AACLA,kBAAG,IAAC,EAAE;AAC5B,UAAM,YAAYA,cAAG,IAAC,OAAO;AAC7B,UAAM,UAAUA,cAAG,IAAC,EAAE;AACtB,UAAM,eAAeA,cAAG,IAAC,IAAI;AAC7B,UAAM,eAAeA,cAAG,IAAC,EAAE;AAC3B,UAAM,YAAYA,cAAG,IAAC,CAAC;AACvB,UAAM,mBAAmBA,cAAG,IAAC,IAAI;AACjC,UAAM,eAAeA,cAAG,IAAC,KAAK;AAC9B,UAAM,qBAAqBA,cAAG,IAAC,IAAI;AAGnC,UAAM,WAAWC,cAAAA,SAAS,MAAM,UAAU,UAAU,IAAI;AAGxD,UAAM,iBAAiB,YAAY;AAClC,UAAI;AACHC,sBAAAA,MAAI,YAAY,EAAE,OAAO,SAAQ,CAAE;AAGnC,cAAM,cAAc,MAAMA,cAAG,MAAC,YAAY;AAAA,UACzC,MAAM;AAAA,QACT,CAAG,EAAE,MAAM,SAAO;AACfA,wBAAAA,MAAA,MAAA,SAAA,yCAAc,WAAW,GAAG;AAC5B,iBAAO,EAAE,WAAW,GAAG,UAAU,EAAG;AAAA,QACvC,CAAG;AAGD,cAAM,MAAM,MAAM,WAAW,SAAS,GAAG,YAAY,SAAS,IAAI,YAAY,QAAQ,EAAE;AACxFA,sBAAAA,MAAY,MAAA,OAAA,yCAAA,YAAY,GAAG;AAE3B,YAAI,KAAK;AAER,uBAAa,QAAQ;AAAA,YACpB,SAAS,IAAI,WAAW;AAAA,YACxB,UAAU,IAAI,YAAY;AAAA,UAC1B;AAGD,cAAI,IAAI,YAAY,IAAI,SAAS,SAAS,GAAG;AAE5C,yBAAa,QAAQ,IAAI,SAAS,IAAI,eAAa;AAAA,cAClD,GAAG;AAAA,cACH,UAAU,uBAAuB,SAAS,QAAQ;AAAA,YACvD,EAAM;AAGF,6BAAiB,QAAQ;AACzB,sBAAU,QAAQ;AAAA,UACtB,OAAU;AAEN,kBAAM,uBAAwB;AAAA,UAC9B;AAAA,QACJ,OAAS;AAEN,gBAAM,uBAAwB;AAAA,QAC9B;AAEDA,sBAAAA,MAAI,YAAa;AAAA,MACjB,SAAQ,GAAG;AACXA,sBAAAA,MAAc,MAAA,SAAA,yCAAA,cAAc,CAAC;AAC7BA,sBAAAA,MAAI,YAAa;AAGjB,cAAM,uBAAwB;AAE9BA,sBAAAA,MAAI,UAAU;AAAA,UACb,OAAO;AAAA,UACP,MAAM;AAAA,QACT,CAAG;AAAA,MACD;AAAA,IACF;AAGA,UAAM,yBAAyB,YAAY;AAC1C,UAAI;AAEH,cAAM,UAAUA,cAAAA,MAAI,eAAe,cAAc;AACjD,YAAI,SAAS;AACZ,uBAAa,QAAQ,KAAK,MAAM,OAAO,EAAE,IAAI,eAAa;AAAA,YACzD,GAAG;AAAA,YACH,UAAU,uBAAuB,SAAS,QAAQ;AAAA,UACtD,EAAK;AACFA,wBAAA,MAAA,MAAA,OAAA,yCAAY,gBAAgB,aAAa,KAAK;AAAA,QACjD,OAAS;AAEN,gBAAM,SAAS,MAAM,WAAW,cAAe;AAC/C,cAAI,UAAU,OAAO,SAAS,GAAG;AAChC,yBAAa,QAAQ,OAAO,IAAI,eAAa;AAAA,cAC5C,GAAG;AAAA,cACH,UAAU,uBAAuB,SAAS,QAAQ;AAAA,YACvD,EAAM;AAGFA,0BAAG,MAAC,eAAe,gBAAgB,KAAK,UAAU,MAAM,CAAC;AACzDA,0BAAY,MAAA,MAAA,OAAA,yCAAA,eAAe,aAAa,KAAK;AAAA,UACjD,OAAU;AAEN,yBAAa,QAAQ,qBAAsB;AAC3CA,0BAAA,MAAA,MAAA,OAAA,yCAAY,WAAW,aAAa,KAAK;AAAA,UACzC;AAAA,QACD;AAAA,MACD,SAAQ,OAAO;AACfA,sBAAAA,8DAAc,aAAa,KAAK;AAEhC,qBAAa,QAAQ,qBAAsB;AAAA,MAC3C;AAAA,IACF;AAGA,UAAM,uBAAuB,MAAM;AAClC,aAAO;AAAA,QACN;AAAA,UACC,KAAK;AAAA,UACL,WAAW;AAAA,UACX,UAAU;AAAA,QACV;AAAA,QACD;AAAA,UACC,KAAK;AAAA,UACL,WAAW;AAAA,UACX,UAAU;AAAA,QACV;AAAA,QACD;AAAA,UACC,KAAK;AAAA,UACL,WAAW;AAAA,UACX,UAAU;AAAA,QACV;AAAA,QACD;AAAA,UACC,KAAK;AAAA,UACL,WAAW;AAAA,UACX,UAAU;AAAA,QACV;AAAA,MACD;AAAA,IACF;AAGA,UAAM,yBAAyB,CAAC,QAAQ;AACvC,UAAI,CAAC;AAAK,eAAO;AAGjB,UAAI,IAAI,WAAW,MAAM;AAAG,eAAO;AAGnC,UAAI,IAAI,WAAW,GAAG,GAAG;AAGxB,eAAO;AAAA,MACP;AAGD,UAAI,CAAC,IAAI,SAAS,KAAK,GAAG;AAEzB,eAAO,iCAAiC,GAAG;AAAA,MAC3C;AAED,aAAO;AAAA,IACR;AAGA,UAAM,2BAA2B,CAAC,UAAU;AAC3CA,oBAAAA,MAAA,MAAA,SAAA,yCAAc,gBAAgB,KAAK,IAAI,aAAa,MAAM,KAAK,CAAC;AAGhE,UAAI,aAAa,MAAM,KAAK,GAAG;AAC9B,qBAAa,MAAM,KAAK,EAAE,WAAW;AAAA,MACrC;AAAA,IACF;AAGA,UAAM,iBAAiB,CAAC,UAAU;AACjCA,0BAAY,MAAA,OAAA,yCAAA,SAAS,aAAa,MAAM,KAAK,CAAC;AAC9C,gBAAU,QAAQ;AAClB,uBAAiB,QAAQ,aAAa,MAAM,KAAK,EAAE;AAAA,IACpD;AAGA,UAAM,iBAAiB,MAAM;AAC5BA,oBAAY,MAAA,MAAA,OAAA,yCAAA,aAAa,UAAU,QAAQ;AAE3C,UAAI,CAAC,UAAU,YAAY,CAAC,UAAU,SAAS,KAAK;AACnDA,sBAAAA,MAAY,MAAA,OAAA,yCAAA,cAAc;AAC1BA,sBAAAA,MAAI,UAAU;AAAA,UACb,OAAO;AAAA,UACP,MAAM;AAAA,QACT,CAAG;AACDC,gCAAW;AACX,eAAO;AAAA,MACP;AACD,aAAO;AAAA,IACR;AAGAC,kBAAAA,UAAU,MAAM;AACfF,oBAAAA,MAAA,MAAA,OAAA,yCAAY,SAAS;AACrB,qBAAgB;AAGhB,YAAM,QAAQ,gBAAiB;AAC/B,YAAM,OAAO,MAAM,MAAM,SAAS,CAAC;AACnC,UAAI,QAAQ,KAAK,gBAAgB;AAChC,cAAM,iBAAiB,KAAK,eAAgB;AAC5C,uBAAe,SAAS;AAAA,UACvB,YAAY;AAAA;AAAA,QACf,CAAG;AAAA,MACD;AAAA,IACF,CAAC;AAGDG,kBAAAA,gBAAgB,MAAM;AACrBH,oBAAAA,MAAA,MAAA,OAAA,yCAAY,UAAU;AAEtB,YAAM,oBAAoB,UAAU,MAAM,KAAK,UAAQ,KAAK,iBAAiB,WAAW,KAChF,UAAU,SAAS,UAAU,MAAM,iBAAiB;AAE5D,UAAI,qBAAqB,CAAC,aAAa,OAAO;AAC7CA,sBAAAA,MAAY,MAAA,OAAA,yCAAA,sBAAsB;AAAA,MAClC;AAGD,UAAI,mBAAmB,SAAS,CAAC,aAAa,OAAO;AACpDA,sBAAAA,MAAY,MAAA,OAAA,yCAAA,eAAe;AAC3BA,sBAAAA,MAAI,MAAM,oBAAoB,mBAAmB,KAAK;AAAA,MACtD;AAAA,IACF,CAAC;AAGDI,kBAAAA,YAAY,MAAM;AACjBJ,oBAAAA,MAAY,MAAA,OAAA,yCAAA,WAAW;AAAA,IACxB,CAAC;AAGD,UAAM,cAAc,YAAY;AAC/B,UAAI;AAEH,YAAI,CAAC,eAAc;AAAI;AAGvB,YAAI,UAAU,MAAM,UAAU,GAAG;AAChCA,wBAAAA,MAAI,UAAU;AAAA,YACb,OAAO;AAAA,YACP,MAAM;AAAA,UACV,CAAI;AACD;AAAA,QACA;AAGDA,sBAAAA,MAAI,gBAAgB;AAAA,UACnB,UAAU,CAAC,SAAS,IAAI;AAAA,UACxB,SAAS,OAAO,QAAQ;AACvB,gBAAI,aAAa,CAAE;AAGnB,oBAAQ,IAAI,UAAQ;AAAA,cACnB,KAAK;AACJ,6BAAa,CAAC,OAAO;AACrB;AAAA,cACD,KAAK;AACJ,6BAAa,CAAC,QAAQ;AACtB;AAAA,YACD;AAGD,kBAAM,YAAY,MAAMA,cAAG,MAAC,YAAY;AAAA,cACvC,OAAO,IAAI,UAAU,MAAM;AAAA,cAC3B,UAAU,CAAC,YAAY,YAAY;AAAA;AAAA,cACnC;AAAA,YACL,CAAK;AAEDA,0BAAAA,MAAY,MAAA,OAAA,yCAAA,WAAW,SAAS;AAGhC,kBAAM,YAAY,UAAU,cAAc,IAAI,cAAY;AAEzD,oBAAM,gBAAgB,SAAS,QAAQ,gBAAgB,EAAE;AAEzD,qBAAO;AAAA,gBACN,MAAM;AAAA,gBACN,UAAU;AAAA,gBACV,cAAc;AAAA,gBACd,UAAU;AAAA,gBACV,cAAc;AAAA,cACd;AAAA,YACN,CAAK;AAGD,kBAAM,aAAa,UAAU,MAAM;AACnC,sBAAU,MAAM,KAAK,GAAG,SAAS;AAGjC,qBAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK;AAC1C,oBAAM,QAAQ,aAAa;AAE3B,yBAAW,MAAM;AAChB,mCAAmB,UAAU,MAAM,KAAK,GAAG,KAAK,EAC9C,KAAK,YAAU;AACfA,sCAAY,MAAA,OAAA,yCAAA,KAAK,KAAK,SAAS,MAAM;AAErC,sBAAI,UAAU,MAAM,KAAK,GAAG;AAC3B,8BAAU,MAAM,KAAK,IAAI;AAAA,sBACxB,GAAG,UAAU,MAAM,KAAK;AAAA,sBACxB,GAAG;AAAA,sBACH,UAAU;AAAA,sBACV,cAAc;AAAA,oBACd;AAAA,kBACD;AAAA,gBACT,CAAQ,EACA,MAAM,WAAS;AACfA,sCAAc,MAAA,SAAA,yCAAA,KAAK,KAAK,SAAS,KAAK;AACtC,sBAAI,UAAU,MAAM,KAAK,GAAG;AAC3B,8BAAU,MAAM,KAAK,EAAE,eAAe;AAAA,kBACtC;AACDA,gCAAAA,MAAI,UAAU;AAAA,oBACb,OAAO,IAAI,QAAM,CAAC;AAAA,oBAClB,MAAM;AAAA,kBACf,CAAS;AAAA,gBACT,CAAQ;AAAA,cACR,GAAQ,IAAI,GAAG;AAAA,YACV;AAAA,UACD;AAAA,QACJ,CAAG;AAAA,MACD,SAAQ,GAAG;AACX,YAAI,EAAE,WAAW,2BAA2B;AAC3CA,wBAAAA,MAAI,UAAU;AAAA,YACb,OAAO;AAAA,YACP,MAAM;AAAA,UACV,CAAI;AAAA,QACD;AAAA,MACD;AAAA,IACF;AAGA,UAAM,kBAAkB,CAAC,SAAS;AACjC,UAAI,CAAC;AAAM,eAAO;AAGlB,UAAI,gBAAgB,KAAK,QAAQ,gBAAgB,EAAE;AAGnD,UAAI,cAAc,WAAW,MAAM,GAAG;AACrC,eAAO;AAAA,MACP;AAGD,UAAI,cAAc,WAAW,MAAM,GAAG;AAGrC,eAAO;AAAA,MASP;AAED,aAAO;AAAA,IACR;AAGA,UAAM,mBAAmB,CAAC,UAAU;AACnCA,oBAAAA,MAAA,MAAA,SAAA,yCAAc,cAAc,KAAK,IAAI,UAAU,MAAM,KAAK,CAAC;AAG3D,UAAI,UAAU,MAAM,KAAK,GAAG;AAE3B,kBAAU,MAAM,KAAK,EAAE,YAAY;AAMnCA,sBAAAA,MAAI,UAAU;AAAA,UACb,OAAO;AAAA,UACP,MAAM;AAAA,QACT,CAAG;AAAA,MACD;AAAA,IACF;AAGA,UAAM,cAAc,YAAY;AAC/B,UAAI;AAEH,YAAI,CAAC,eAAc;AAAI;AAGvB,YAAI,SAAS,OAAO;AACnBA,wBAAAA,MAAI,UAAU;AAAA,YACb,OAAO;AAAA,YACP,MAAM;AAAA,UACV,CAAI;AACD;AAAA,QACA;AAGDA,sBAAAA,MAAI,gBAAgB;AAAA,UACnB,UAAU,CAAC,SAAS,MAAM;AAAA,UAC1B,SAAS,OAAO,QAAQ;AACvB,gBAAI,aAAa,CAAE;AAGnB,oBAAQ,IAAI,UAAQ;AAAA,cACnB,KAAK;AACJ,6BAAa,CAAC,OAAO;AACrB;AAAA,cACD,KAAK;AACJ,6BAAa,CAAC,QAAQ;AACtB;AAAA,YACD;AAGD,kBAAM,YAAY,MAAMA,cAAG,MAAC,YAAY;AAAA,cACvC;AAAA,cACA,aAAa;AAAA;AAAA,cACb,QAAQ;AAAA,YACb,CAAK;AAEDA,0BAAAA,MAAY,MAAA,OAAA,yCAAA,WAAW,SAAS;AAGhC,kBAAM,UAAU,MAAM,OAAO;AAC7B,gBAAI,UAAU,OAAO,SAAS;AAC7BA,4BAAAA,MAAI,UAAU;AAAA,gBACb,OAAO;AAAA,gBACP,MAAM;AAAA,cACZ,CAAM;AACD;AAAA,YACA;AAGD,sBAAU,QAAQ;AAAA,cACjB,MAAM;AAAA,cACN,UAAU,UAAU;AAAA,cACpB,QAAQ,UAAU;AAAA,cAClB,cAAc,UAAU;AAAA,cACxB,UAAU,UAAU;AAAA,cACpB,MAAM,UAAU;AAAA,cAChB,OAAO,UAAU;AAAA,cACjB,QAAQ,UAAU;AAAA,cAClB,QAAQ;AAAA;AAAA,cACR,UAAU;AAAA,cACV,cAAc;AAAA,YACd;AAGDA,0BAAAA,MAAI,UAAU;AAAA,cACb,OAAO;AAAA,cACP,MAAM;AAAA,cACN,UAAU;AAAA,YACf,CAAK;AAED,gBAAI;AAEH,iCAAmB,UAAU,KAAK,EAChC,KAAK,YAAU;AACfA,8BAAAA,MAAY,MAAA,OAAA,yCAAA,WAAW,MAAM;AAG7B,0BAAU,QAAQ;AAAA,kBACjB,GAAG,UAAU;AAAA,kBACb,GAAG;AAAA,kBACH,UAAU;AAAA,kBACV,cAAc;AAAA,gBACd;AAGDA,8BAAAA,MAAI,UAAU;AAAA,kBACb,OAAO;AAAA,kBACP,MAAM;AAAA,kBACN,UAAU;AAAA,gBAClB,CAAQ;AAAA,cACR,CAAO,EACA,MAAM,WAAS;AACfA,8BAAAA,MAAA,MAAA,SAAA,yCAAc,WAAW,KAAK;AAG9B,oBAAI,UAAU,OAAO;AACpB,4BAAU,MAAM,eAAe;AAG/BA,gCAAAA,MAAI,UAAU;AAAA,oBACb,OAAO;AAAA,oBACP,MAAM;AAAA,oBACN,UAAU;AAAA,kBACnB,CAAS;AAAA,gBACD;AAAA,cACR,CAAO;AAGFA,4BAAAA,MAAI,UAAU;AAAA,gBACb,OAAO;AAAA,gBACP,MAAM;AAAA,gBACN,UAAU;AAAA,cAChB,CAAM;AAAA,YACD,SAAQ,OAAO;AACfA,4BAAAA,8DAAc,aAAa,KAAK;AAGhC,kBAAI,UAAU,OAAO;AACpB,0BAAU,MAAM,eAAe;AAAA,cAC/B;AAGDA,4BAAAA,MAAI,UAAU;AAAA,gBACb,OAAO;AAAA,gBACP,MAAM;AAAA,gBACN,UAAU;AAAA,cAChB,CAAM;AAAA,YACD;AAAA,UACD;AAAA,QACJ,CAAG;AAAA,MACD,SAAQ,GAAG;AACX,YAAI,EAAE,WAAW,2BAA2B;AAC3CA,wBAAAA,MAAI,UAAU;AAAA,YACb,OAAO;AAAA,YACP,MAAM;AAAA,UACV,CAAI;AAAA,QACD;AAAA,MACD;AAAA,IACF;AAGA,UAAM,aAAa,CAAC,UAAU;AAC7B,gBAAU,MAAM,OAAO,OAAO,CAAC;AAAA,IAChC;AAGA,UAAM,cAAc,MAAM;AACzB,gBAAU,QAAQ;AAAA,IACnB;AAGA,UAAM,qBAAqB,OAAO,MAAM,UAAU;AACjD,UAAI;AAEH,aAAK,eAAe;AAGpB,cAAM,UAAU,iBAAiB,KAAK,QAAQ;AAG9C,cAAM,eAAe,MAAM,WAAW,oBAAoB;AAAA,UACzD,MAAM;AAAA,UACN,KAAK;AAAA,QACR,CAAG;AAEDA,sBAAAA,MAAA,MAAA,OAAA,yCAAY,gBAAgB,YAAY;AAExC,YAAI,CAAC,gBAAgB,CAAC,aAAa,OAAO;AACzC,gBAAM,IAAI,MAAM,UAAU;AAAA,QAC1B;AAGD,YAAI,eAAe,aAAa;AAChC,YAAI,gBAAgB,CAAC,aAAa,WAAW,UAAU,GAAG;AACzD,yBAAe,aAAa,QAAQ,WAAW,UAAU;AACzDA,wBAAY,MAAA,MAAA,OAAA,yCAAA,mBAAmB,YAAY;AAAA,QAC3C;AAGD,eAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AAEvC,cAAI,aAAa;AACjB,gBAAM,aAAa;AAEnB,gBAAM,gBAAgB,MAAM;AAC3B,gBAAI;AACH,oBAAM,aAAaA,cAAG,MAAC,WAAW;AAAA,gBACjC,KAAK;AAAA,gBACL,UAAU,KAAK;AAAA,gBACf,MAAM;AAAA,gBACN,UAAU;AAAA,kBACT,OAAO,aAAa;AAAA,kBACpB,KAAK,aAAa;AAAA,gBAClB;AAAA,gBACD,SAAS,CAAC,cAAc;AACvBA,gCAAAA,MAAY,MAAA,OAAA,yCAAA,SAAS,SAAS;AAE9B,sBAAI,UAAU,eAAe,KAAK;AACjC,wBAAI;AACH,4BAAM,OAAO,KAAK,MAAM,UAAU,IAAI;AACtC,4BAAM,UAAU,GAAG,aAAa,MAAM,IAAI,aAAa,GAAG;AAG1D,2BAAK,eAAe;AACpB,2BAAK,UAAU;AACf,2BAAK,WAAW;AAGhB,4BAAM,eAAe,GAAG,OAAO;AAE/B,4BAAM,gBAAgB,GAAG,OAAO;AAEhC,8BAAQ;AAAA,wBACP,MAAM;AAAA,wBACN,KAAK;AAAA,wBACL;AAAA,wBACA;AAAA,sBACV,CAAU;AAAA,oBACD,SAAQ,GAAG;AACXA,oCAAAA,MAAA,MAAA,SAAA,yCAAc,aAAa,CAAC;AAC5B,2BAAK,eAAe;AACpB,6BAAO,IAAI,MAAM,UAAU,CAAC;AAAA,oBAC5B;AAAA,kBACT,OAAc;AACNA,kCAAc,MAAA,MAAA,SAAA,yCAAA,YAAY,UAAU,UAAU;AAC9C,yBAAK,eAAe;AACpB,2BAAO,IAAI,MAAM,SAAS,UAAU,UAAU,EAAE,CAAC;AAAA,kBACjD;AAAA,gBACD;AAAA,gBACD,MAAM,CAAC,UAAU;AAChBA,gCAAAA,MAAA,MAAA,SAAA,yCAAc,SAAS,KAAK;AAG5B,sBAAI,MAAM,UAAU,MAAM,OAAO,SAAS,wBAAwB,GAAG;AACpEA,kCAAAA,MAAI,UAAU;AAAA,sBACb,OAAO;AAAA,sBACP,SAAS,mBAAmB,eAAe;AAAA,sBAC3C,YAAY;AAAA,oBACrB,CAAS;AACD,yBAAK,eAAe;AACpB,2BAAO,IAAI,MAAM,MAAM,UAAU,MAAM,CAAC;AACxC;AAAA,kBACA;AAGD,sBAAI,MAAM,UAAU,MAAM,OAAO,SAAS,oCAAoC,GAAG;AAChF,wBAAI,aAAa,YAAY;AAC5B;AACAA,0CAAA,MAAA,OAAA,yCAAY,UAAU,UAAU,YAAY;AAG5C,iCAAW,MAAM;AAChB;sBACV,GAAY,MAAO,UAAU;AACpB;AAAA,oBACA;AAAA,kBACD;AAED,uBAAK,eAAe;AACpB,yBAAO,IAAI,MAAM,MAAM,UAAU,MAAM,CAAC;AAAA,gBACxC;AAAA,cACP,CAAM;AAGD,yBAAW,iBAAiB,CAAC,QAAQ;AACpC,qBAAK,WAAW,IAAI;AACpB,oCAAqB;AAAA,cAC3B,CAAM;AAAA,YACD,SAAQ,GAAG;AACXA,0FAAc,aAAa,CAAC;AAC5B,mBAAK,eAAe;AACpB,qBAAO,IAAI,MAAM,eAAe,EAAE,OAAO,CAAC;AAAA,YAC1C;AAAA,UACD;AAGD;QACH,CAAG;AAAA,MACD,SAAQ,GAAG;AACXA,sBAAAA,MAAA,MAAA,SAAA,yCAAc,WAAW,CAAC;AAC1B,aAAK,eAAe;AACpB,cAAM,IAAI,MAAM,QAAQ,EAAE,OAAO,EAAE;AAAA,MACnC;AAAA,IACF;AAGA,UAAM,qBAAqB,OAAO,SAAS;AAC1C,UAAI;AAEH,aAAK,eAAe;AAGpB,cAAM,UAAU,iBAAiB,KAAK,QAAQ;AAG9C,cAAM,eAAe,MAAM,WAAW,oBAAoB;AAAA,UACzD,MAAM;AAAA,UACN,KAAK;AAAA,QACR,CAAG;AAEDA,sBAAAA,MAAA,MAAA,OAAA,yCAAY,gBAAgB,YAAY;AAExC,YAAI,CAAC,gBAAgB,CAAC,aAAa,OAAO;AACzC,gBAAM,IAAI,MAAM,UAAU;AAAA,QAC1B;AAGD,YAAI,eAAe,aAAa;AAChC,YAAI,gBAAgB,CAAC,aAAa,WAAW,UAAU,GAAG;AACzD,yBAAe,aAAa,QAAQ,WAAW,UAAU;AACzDA,wBAAY,MAAA,MAAA,OAAA,yCAAA,mBAAmB,YAAY;AAAA,QAC3C;AAGD,cAAM,aAAa,aAAa,cAAc;AAC9C,cAAM,iBAAiB,aAAa,kBAAkB;AAGtDA,sBAAAA,MAAI,UAAU;AAAA,UACb,OAAO;AAAA,UACP,MAAM;AAAA,UACN,UAAU;AAAA,QACb,CAAG;AAGD,eAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AAEvC,cAAI,iBAAiB,KAAK;AAC1B,cAAI,cAAc;AAClB,cAAI,eAAe;AACnB,cAAI,oBAAoB;AACxB,cAAI,gBAAgB;AAEpB,gBAAM,iBAAiB,CAAC,UAAU,gBAAgB;AACjD,kBAAM,MAAM,KAAK;AACjB,kBAAM,eAAe,MAAM,kBAAkB;AAE7C,gBAAI,cAAc,GAAG;AACpB,oBAAM,WAAW,cAAc;AAC/B,4BAAc,WAAW;AAGzB,oBAAM,gBAAgB,KAAK,OAAO;AAClC,oBAAM,gBAAgB,cAAc,IAAI,gBAAgB,cAAc;AAGtE,kBAAI,gBAAgB,IAAI;AACvB,oCAAoB,IAAI,KAAK,KAAK,gBAAgB,EAAE,CAAC;AAAA,cAC3D,OAAY;AACN,oCAAoB,IAAI,KAAK,KAAK,aAAa,CAAC;AAAA,cAChD;AAGD,kBAAI,YAAY;AAChB,kBAAI,cAAc,OAAO,MAAM;AAC9B,4BAAY,IAAI,eAAe,OAAO,OAAO,QAAQ,CAAC,CAAC;AAAA,cAC7D,WAAgB,cAAc,MAAM;AAC9B,4BAAY,IAAI,cAAc,MAAM,QAAQ,CAAC,CAAC;AAAA,cACpD,OAAY;AACN,4BAAY,GAAG,KAAK,MAAM,WAAW,CAAC;AAAA,cACtC;AAGD,kBAAI,MAAM,gBAAgB,KAAM;AAC/BA,8BAAAA,MAAI,UAAU;AAAA,kBACb,OAAO,QAAQ,QAAQ;AAAA,kBACvB,MAAM;AAAA,kBACN,UAAU;AAAA,gBACjB,CAAO;AACD,gCAAgB;AAAA,cAChB;AAGD,+BAAiB;AACjB,6BAAe;AAAA,YACf;AAAA,UACL;AAGG,cAAI,aAAa;AACjB,gBAAM,aAAa;AAEnB,gBAAM,gBAAgB,MAAM;AAC3B,gBAAI;AACH,oBAAM,aAAaA,cAAG,MAAC,WAAW;AAAA,gBACjC,KAAK;AAAA,gBACL,UAAU,KAAK;AAAA,gBACf,MAAM;AAAA,gBACN,UAAU;AAAA,kBACT,OAAO,aAAa;AAAA,kBACpB,KAAK,aAAa;AAAA,gBAClB;AAAA,gBACD,SAAS,CAAC,cAAc;AACvBA,gCAAAA,MAAY,MAAA,OAAA,yCAAA,SAAS,SAAS;AAE9B,sBAAI,UAAU,eAAe,KAAK;AACjC,wBAAI;AACH,4BAAM,OAAO,KAAK,MAAM,UAAU,IAAI;AACtC,4BAAM,UAAU,GAAG,aAAa,MAAM,IAAI,aAAa,GAAG;AAG1D,2BAAK,eAAe;AACpB,2BAAK,WAAW;AAChB,2BAAK,WAAW;AAGhB,4BAAM,eAAe,GAAG,OAAO;AAG/B,4BAAM,gBAAgB,aAAa,GAAG,OAAO,GAAG,cAAc,GAAG,UAAU,KAAK;AAGhFA,oCAAAA,MAAI,UAAU;AAAA,wBACb,OAAO;AAAA,wBACP,MAAM;AAAA,wBACN,UAAU;AAAA,sBACpB,CAAU;AAED,8BAAQ;AAAA,wBACP,MAAM;AAAA,wBACN,UAAU;AAAA,wBACV;AAAA,wBACA,SAAS;AAAA;AAAA,wBACT,UAAU,KAAK,WAAW,SAAS,KAAK,QAAQ,IAAI,KAAK;AAAA,wBACzD,MAAM,KAAK;AAAA,wBACX,OAAO,KAAK;AAAA,wBACZ,QAAQ,KAAK;AAAA,wBACb,QAAQ,KAAK,UAAU;AAAA,sBACjC,CAAU;AAAA,oBACD,SAAQ,GAAG;AACXA,oCAAAA,MAAA,MAAA,SAAA,0CAAc,aAAa,CAAC;AAC5B,2BAAK,eAAe;AAEpBA,oCAAAA,MAAI,UAAU;AAAA,wBACb,OAAO;AAAA,wBACP,MAAM;AAAA,wBACN,UAAU;AAAA,sBACpB,CAAU;AAED,6BAAO,IAAI,MAAM,UAAU,CAAC;AAAA,oBAC5B;AAAA,kBACT,OAAc;AACNA,kCAAc,MAAA,MAAA,SAAA,0CAAA,YAAY,UAAU,UAAU;AAC9C,yBAAK,eAAe;AAEpBA,kCAAAA,MAAI,UAAU;AAAA,sBACb,OAAO,SAAS,UAAU,UAAU;AAAA,sBACpC,MAAM;AAAA,sBACN,UAAU;AAAA,oBACnB,CAAS;AAED,2BAAO,IAAI,MAAM,SAAS,UAAU,UAAU,EAAE,CAAC;AAAA,kBACjD;AAAA,gBACD;AAAA,gBACD,MAAM,CAAC,UAAU;AAChBA,gCAAAA,MAAA,MAAA,SAAA,0CAAc,SAAS,KAAK;AAG5B,sBAAI,MAAM,UAAU,MAAM,OAAO,SAAS,wBAAwB,GAAG;AACpEA,kCAAAA,MAAI,UAAU;AAAA,sBACb,OAAO;AAAA,sBACP,SAAS,mBAAmB,eAAe;AAAA,sBAC3C,YAAY;AAAA,oBACrB,CAAS;AACD,yBAAK,eAAe;AACpB,2BAAO,IAAI,MAAM,MAAM,UAAU,MAAM,CAAC;AACxC;AAAA,kBACA;AAGD,sBAAI,MAAM,UAAU,MAAM,OAAO,SAAS,oCAAoC,GAAG;AAChF,wBAAI,aAAa,YAAY;AAC5B;AACAA,0CAAA,MAAA,OAAA,0CAAY,UAAU,UAAU,YAAY;AAE5CA,oCAAAA,MAAI,UAAU;AAAA,wBACb,OAAO,cAAc,UAAU,IAAI,UAAU;AAAA,wBAC7C,MAAM;AAAA,wBACN,UAAU;AAAA,sBACpB,CAAU;AAGD,iCAAW,MAAM;AAChB;sBACV,GAAY,MAAO,UAAU;AACpB;AAAA,oBACA;AAAA,kBACD;AAED,uBAAK,eAAe;AAEpBA,gCAAAA,MAAI,UAAU;AAAA,oBACb,OAAO;AAAA,oBACP,MAAM;AAAA,oBACN,UAAU;AAAA,kBAClB,CAAQ;AAED,yBAAO,IAAI,MAAM,MAAM,UAAU,MAAM,CAAC;AAAA,gBACxC;AAAA,cACP,CAAM;AAGD,yBAAW,iBAAiB,CAAC,QAAQ;AACpC,qBAAK,WAAW,IAAI;AAGpB,+BAAe,IAAI,UAAU,IAAI,iBAAiB;AAElD,oCAAqB;AAAA,cAC3B,CAAM;AAAA,YACD,SAAQ,GAAG;AACXA,2FAAc,aAAa,CAAC;AAC5B,mBAAK,eAAe;AAEpBA,4BAAAA,MAAI,UAAU;AAAA,gBACb,OAAO;AAAA,gBACP,MAAM;AAAA,gBACN,UAAU;AAAA,cAChB,CAAM;AAED,qBAAO,IAAI,MAAM,eAAe,EAAE,OAAO,CAAC;AAAA,YAC1C;AAAA,UACD;AAGD;QACH,CAAG;AAAA,MACD,SAAQ,GAAG;AACXA,sBAAAA,MAAA,MAAA,SAAA,0CAAc,WAAW,CAAC;AAC1B,aAAK,eAAe;AAEpBA,sBAAAA,MAAI,UAAU;AAAA,UACb,OAAO,WAAW,EAAE;AAAA,UACpB,MAAM;AAAA,UACN,UAAU;AAAA,QACb,CAAG;AAED,cAAM,IAAI,MAAM,QAAQ,EAAE,OAAO,EAAE;AAAA,MACnC;AAAA,IACF;AAGA,UAAM,mBAAmB,CAAC,aAAa;AACtC,YAAM,eAAe,SAAS,YAAY,GAAG;AAC7C,UAAI,eAAe,GAAG;AACrB,eAAO,SAAS,UAAU,eAAe,CAAC,EAAE,YAAa;AAAA,MACzD;AACD,aAAO;AAAA,IACR;AAGA,UAAM,sBAAsB,MAAM;AACjC,UAAI,aAAa,UAAU,MAAM,UAAU,UAAU,QAAQ,IAAI;AACjE,UAAI,qBAAqB;AAGzB,gBAAU,MAAM,QAAQ,UAAQ;AAC/B,8BAAsB,KAAK,YAAY;AAAA,MACzC,CAAE;AAGD,UAAI,UAAU,OAAO;AACpB,8BAAsB,UAAU,MAAM,YAAY;AAAA,MAClD;AAED,oBAAc,QAAQ,aAAa,IAAI,KAAK,MAAM,qBAAqB,UAAU,IAAI;AAAA,IACtF;AAGA,UAAM,iBAAiB,YAAY;AAClC,UAAI;AAEH,YAAI,aAAa,OAAO;AACvBA,wBAAAA,MAAY,MAAA,OAAA,0CAAA,kBAAkB;AAC9B;AAAA,QACA;AAGD,qBAAa,QAAQ;AAGrB,YAAI,CAAC,eAAc,GAAI;AACtB,uBAAa,QAAQ;AACrB;AAAA,QACA;AAGD,YAAI,CAAC,iBAAiB,OAAO;AAC5BA,wBAAAA,MAAI,UAAU;AAAA,YACb,OAAO;AAAA,YACP,MAAM;AAAA,UACV,CAAI;AACD,uBAAa,QAAQ;AACrB;AAAA,QACA;AAGD,YAAI,CAAC,QAAQ,MAAM,QAAQ;AAC1BA,wBAAAA,MAAI,UAAU;AAAA,YACb,OAAO;AAAA,YACP,MAAM;AAAA,YACN,UAAU;AAAA,UACd,CAAI;AACD,uBAAa,QAAQ;AACrB;AAAA,QACA;AAGD,YAAI,QAAQ,MAAM,KAAI,EAAG,SAAS,GAAG;AACpCA,wBAAAA,MAAI,UAAU;AAAA,YACb,OAAO;AAAA,YACP,MAAM;AAAA,YACN,UAAU;AAAA,UACd,CAAI;AACD,uBAAa,QAAQ;AACrB;AAAA,QACA;AAGD,cAAM,oBAAoB,UAAU,MAAM,KAAK,UAAQ,KAAK,iBAAiB,WAAW,KACjF,UAAU,SAAS,UAAU,MAAM,iBAAiB;AAE3D,YAAI,mBAAmB;AAEtBA,wBAAAA,MAAI,UAAU;AAAA,YACb,OAAO;AAAA,YACP,SAAS;AAAA,YACT,aAAa;AAAA,YACb,YAAY;AAAA,YACZ,SAAS,CAAC,QAAQ;AACjB,kBAAI,IAAI,SAAS;AAEhBA,8BAAAA,MAAI,UAAU;AAAA,kBACb,OAAO;AAAA,kBACP,MAAM;AAAA,kBACN,UAAU;AAAA,gBACjB,CAAO;AACD,6BAAa,QAAQ;AAAA,cAC3B,OAAY;AAEN;cACA;AAAA,YACD;AAAA,UACL,CAAI;AACD;AAAA,QACA;AAGD,cAAM,oBAAmB;AAAA,MAEzB,SAAQ,GAAG;AACXA,sBAAAA,MAAA,MAAA,SAAA,0CAAc,SAAS,CAAC;AACxBA,sBAAAA,MAAI,YAAa;AACjBA,sBAAAA,MAAI,UAAU;AAAA,UACb,OAAO,EAAE,WAAW;AAAA,UACpB,MAAM;AAAA,QACT,CAAG;AACD,oBAAY,QAAQ;AACpB,qBAAa,QAAQ;AAAA,MACrB;AAAA,IACF;AAGA,UAAM,8BAA8B,YAAY;;AAC/C,UAAI;AACHA,sBAAAA,MAAI,YAAY;AAAA,UACf,OAAO;AAAA,UACP,MAAM;AAAA,QACT,CAAG;AAGD,cAAM,gBAAgB;AAAA,UACrB,SAAS,UAAU,SAAS;AAAA,UAC5B,SAAS,QAAQ,MAAM,KAAM;AAAA,UAC7B,SAAS,iBAAiB;AAAA,UAC1B,aAAW,kBAAa,MAAM,UAAU,KAAK,MAAlC,mBAAqC,cAAa;AAAA,UAC7D,WAAS,kBAAa,UAAb,mBAAoB,YAAW;AAAA,UACxC,YAAU,kBAAa,UAAb,mBAAoB,aAAY;AAAA,UAC1C,eAAe,UAAU,SAAS;AAAA,UAClC,gBAAgB,UAAU,SAAS;AAAA,UACnC,aAAa,UAAU,SAAS;AAAA,UAChC,OAAO;AAAA,QACV;AAGE,cAAM,iBAAiB,UAAU,MAC/B,OAAO,UAAQ,KAAK,iBAAiB,aAAa,CAAC,KAAK,SAAS,EACjE,IAAI,WAAS;AAAA,UACb,MAAM;AAAA,UACN,KAAK,KAAK;AAAA,UACV,cAAc,KAAK;AAAA,UACnB,eAAe,KAAK;AAAA,QACpB,EAAC;AAEH,YAAI,eAAe,SAAS,GAAG;AAC9B,wBAAc,YAAY;AAC1B,wBAAc,SAAS;AAAA,QACvB;AAGD,YAAI,UAAU,SAAS,UAAU,MAAM,iBAAiB,WAAW;AAClE,wBAAc,YAAY;AAC1B,wBAAc,QAAQ;AAAA,YACrB,MAAM;AAAA,YACN,UAAU,UAAU,MAAM;AAAA,YAC1B,cAAc,UAAU,MAAM;AAAA,YAC9B,SAAS,UAAU,MAAM,WAAW,UAAU,MAAM;AAAA,YACpD,UAAU,UAAU,MAAM;AAAA,YAC1B,MAAM,UAAU,MAAM;AAAA,YACtB,OAAO,UAAU,MAAM;AAAA,YACvB,QAAQ,UAAU,MAAM;AAAA,YACxB,QAAQ,UAAU,MAAM,UAAU;AAAA,UACtC;AAAA,QACG;AAEDA,sBAAY,MAAA,MAAA,OAAA,0CAAA,oBAAoB,aAAa;AAG7C,cAAM,MAAM,MAAM,WAAW,WAAW,aAAa;AAErD,6BAAqB,GAAG;AAAA,MACxB,SAAQ,OAAO;AACfA,sBAAc,MAAA,MAAA,SAAA,0CAAA,SAAS,KAAK;AAC5BA,sBAAG,MAAC,YAAW;AACfA,sBAAAA,MAAI,UAAU;AAAA,UACb,OAAO,MAAM,WAAW;AAAA,UACxB,MAAM;AAAA,QACT,CAAG;AACD,oBAAY,QAAQ;AACpB,qBAAa,QAAQ;AAAA,MACrB;AAAA,IACF;AAGA,UAAM,sBAAsB,YAAY;;AACvC,UAAI;AAEH,oBAAY,QAAQ;AAEpBA,sBAAAA,MAAI,YAAY;AAAA,UACf,OAAO;AAAA,UACP,MAAM;AAAA,QACT,CAAG;AAGD,cAAM,iBAAiB,UAAU,MAC/B,OAAO,UAAQ,KAAK,iBAAiB,aAAa,CAAC,KAAK,SAAS,EACjE,IAAI,WAAS;AAAA,UACb,MAAM;AAAA,UACN,KAAK,KAAK;AAAA,UACV,cAAc,KAAK;AAAA,UACnB,eAAe,KAAK;AAAA,QACpB,EAAC;AAGH,YAAI,gBAAgB;AACpB,YAAI,UAAU,SAAS,UAAU,MAAM,iBAAiB,WAAW;AAClE,0BAAgB;AAAA,YACf,MAAM;AAAA,YACN,UAAU,UAAU,MAAM;AAAA,YAC1B,cAAc,UAAU,MAAM;AAAA,YAC9B,SAAS,UAAU,MAAM,WAAW,UAAU,MAAM;AAAA,YACpD,UAAU,UAAU,MAAM;AAAA,YAC1B,MAAM,UAAU,MAAM;AAAA,YACtB,OAAO,UAAU,MAAM;AAAA,YACvB,QAAQ,UAAU,MAAM;AAAA,YACxB,QAAQ,UAAU,MAAM,UAAU;AAAA,UACtC;AAAA,QACG;AAGD,cAAM,gBAAgB;AAAA,UACrB,SAAS,UAAU,SAAS;AAAA,UAC5B,SAAS,QAAQ,MAAM,KAAM;AAAA,UAC7B,SAAS,iBAAiB;AAAA,UAC1B,aAAW,kBAAa,MAAM,UAAU,KAAK,MAAlC,mBAAqC,cAAa;AAAA,UAC7D,WAAS,kBAAa,UAAb,mBAAoB,YAAW;AAAA,UACxC,YAAU,kBAAa,UAAb,mBAAoB,aAAY;AAAA,UAC1C,eAAe,UAAU,SAAS;AAAA,UAClC,gBAAgB,UAAU,SAAS;AAAA,UACnC,aAAa,UAAU,SAAS;AAAA,UAChC,OAAO;AAAA,QACV;AAGE,YAAI,eAAe,SAAS,GAAG;AAC9B,wBAAc,YAAY;AAC1B,wBAAc,SAAS;AAAA,QACvB;AAED,YAAI,eAAe;AAClB,wBAAc,YAAY;AAC1B,wBAAc,QAAQ;AAAA,QACtB;AAEDA,sBAAY,MAAA,MAAA,OAAA,0CAAA,SAAS,aAAa;AAGlC,cAAM,MAAM,MAAM,WAAW,WAAW,aAAa;AAErD,6BAAqB,GAAG;AAAA,MACxB,SAAQ,OAAO;AACfA,sBAAc,MAAA,MAAA,SAAA,0CAAA,SAAS,KAAK;AAC5BA,sBAAG,MAAC,YAAW;AACfA,sBAAAA,MAAI,UAAU;AAAA,UACb,OAAO,MAAM,WAAW;AAAA,UACxB,MAAM;AAAA,QACT,CAAG;AACD,oBAAY,QAAQ;AACpB,qBAAa,QAAQ;AAAA,MACrB;AAAA,IACF;AAGA,UAAM,uBAAuB,CAAC,QAAQ;AACrC,UAAI,IAAI,IAAI;AACXA,sBAAG,MAAC,YAAW;AACfA,sBAAAA,MAAI,UAAU;AAAA,UACb,OAAO;AAAA,UACP,MAAM;AAAA,QACT,CAAG;AAGD,gBAAQ,QAAQ;AAChB,kBAAU,QAAQ;AAClB,kBAAU,QAAQ;AAGlB,2BAAmB,QAAQ,IAAI;AAG/B,mBAAW,MAAM;AAEhBA,wBAAAA,MAAI,MAAM,oBAAoB,mBAAmB,KAAK;AAGtD,gBAAM,QAAQ;AACdA,wBAAA,MAAA,MAAA,OAAA,0CAAY,UAAU,KAAK;AAG3B,cAAI,MAAM,SAAS,GAAG;AAErBA,0BAAAA,MAAI,aAAa;AAAA,cAChB,OAAO;AAAA,cACP,SAAS,MAAM;AACdA,8BAAAA,6DAAY,SAAS;AAErBA,8BAAAA,MAAI,MAAM,oBAAoB,mBAAmB,KAAK;AAAA,cACtD;AAAA,cACD,MAAM,CAAC,QAAQ;AACdA,8BAAc,MAAA,MAAA,SAAA,0CAAA,YAAY,GAAG;AAE7B,gCAAgB,mBAAmB,KAAK;AAAA,cACxC;AAAA,YACN,CAAK;AAAA,UACL,OAAU;AAEN,4BAAgB,mBAAmB,KAAK;AAAA,UACxC;AAAA,QACD,GAAE,IAAI;AAAA,MACT,OAAQ;AACN,cAAM,IAAI,MAAM,IAAI,WAAW,MAAM;AAAA,MACrC;AAED,kBAAY,QAAQ;AACpB,mBAAa,QAAQ;AAAA,IACtB;AAGA,UAAM,kBAAkB,CAAC,cAAc;AACtCA,oBAAAA,MAAA,MAAA,OAAA,0CAAY,iBAAiB,SAAS;AAGtCA,oBAAAA,MAAI,UAAU;AAAA,QACb,KAAK;AAAA,QACL,SAAS,MAAM;AACdA,wBAAAA,MAAY,MAAA,OAAA,0CAAA,SAAS;AAErB,qBAAW,MAAM;AAChBA,gCAAI,MAAM,oBAAoB,SAAS;AAAA,UACvC,GAAE,GAAG;AAAA,QACN;AAAA,QACD,MAAM,CAAC,QAAQ;AACdA,wBAAAA,MAAA,MAAA,SAAA,0CAAc,YAAY,GAAG;AAE7BA,wBAAAA,MAAI,SAAS;AAAA,YACZ,KAAK;AAAA,YACL,SAAS,MAAM;AACdA,4BAAAA,MAAA,MAAA,OAAA,0CAAY,mBAAmB;AAE/B,yBAAW,MAAM;AAChBA,oCAAI,MAAM,oBAAoB,SAAS;AAAA,cACvC,GAAE,GAAG;AAAA,YACN;AAAA,YACD,MAAM,CAAC,gBAAgB;AACtBA,4BAAAA,MAAc,MAAA,SAAA,0CAAA,eAAe,WAAW;AACxCA,4BAAAA,MAAI,UAAU;AAAA,gBACb,OAAO;AAAA,gBACP,MAAM;AAAA,gBACN,UAAU;AAAA,cAChB,CAAM;AAAA,YACD;AAAA,UACL,CAAI;AAAA,QACD;AAAA,MACH,CAAE;AAAA,IACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC38CA,GAAG,WAAWK,SAAe;"}