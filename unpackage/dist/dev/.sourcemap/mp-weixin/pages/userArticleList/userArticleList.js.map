{"version":3,"file":"userArticleList.js","sources":["pages/userArticleList/userArticleList.vue","../../软件/HBuilderX/HBuilderX/plugins/uniapp-cli-vite/uniPage:/cGFnZXMvdXNlckFydGljbGVMaXN0L3VzZXJBcnRpY2xlTGlzdC52dWU"],"sourcesContent":["<script>\n// 使用选项式API定义分享方法，这是微信小程序最稳定的方式\nimport { useUserInfoStore } from '@/store/user.js'\nimport { testLogin } from '@/utils/isLogin'\nimport { useAuthSwitchStore } from '@/store/authSwitch'\nimport { fixImageUrl, getDefaultImage } from '@/utils/domainConfig.js'\n\n\nexport default {\n\tcomponents: {\n\t},\n\tdata() {\n\t\treturn {\n\t\t\t// 分享相关数据\n\t\t\tshareTitle: '',\n\t\t\tshareImageUrl: '',\n\t\t\tshareUserId: '',\n\t\t\tdefaultShareImage: '/static/images/logo.png', // 默认分享图片\n\t\t\tdynamicShareImage: '', // 动态生成的分享图片路径\n\t\t\tlinkShareImage: '', // 链接分享图片路径，与小程序分享图保持一致\n\t\t\t\n\t\t\t// 视频播放相关\n\t\t\tvideoUrl: '', // 默认视频地址\n\t\t\tvideoVisible: false, // 控制视频组件显示状态\n\t\t\tisVideoPlaying: false, // 视频是否正在播放\n\t\t\tvideoContext: null, // 视频上下文对象\n\t\t\tuserClosedVideo: false, // 用户是否主动关闭了视频\n\t\t\t\n\t\t\t// 用户信息和文章列表\n\t\t\tuserArticleData: [],\n\t\t\tuserArticleInfo: {\n\t\t\t\tavatarUrl: getDefaultImage('avatar'),\n\t\t\t\tnickName: '加载中...',\n\t\t\t\tmobile: '未填写'\n\t\t\t},\n\t\t\t\n\t\t\t// 最新文章图片\n\t\t\tlatestArticleImages: [],\n\t\t\t\n\t\t\t// 分页相关\n\t\t\tpageNo: 1,\n\t\t\tpageSize: 8, // 每页加载的数据条数，与后端默认值保持一致\n\t\t\t\n\t\t\t// 加载状态\n\t\t\tstatus: 'more', // 初始状态为 'more'\n\t\t\tisLoading: false, // 是否正在加载\n\t\t\thasMore: true, // 是否还有更多数据\n\t\t\tloadMoreText: {\n\t\t\t\tcontentdown: '上拉加载更多',\n\t\t\t\tcontentrefresh: '加载中...',\n\t\t\t\tcontentnomore: '~ 已经到底啦 ~'\n\t\t\t},\n\t\t\t\n\t\t\t// 用户信息store\n\t\t\tuserStore: null,\n\t\t\t\n\t\t\t// 头像点击控制状态\n\t\t\tavatarClickEnabled: true,\n\t\t\t\n\t\t\t// 下拉刷新相关\n\t\t\tisRefreshing: false,\n\t\t\trefreshStartTime: 0, // 记录开始刷新的时间\n\t\t\t\n\t\t\t// 添加触底加载防抖变量\n\t\t\tscrollToLowerTimer: null,\n\t\t\tisScrollLoading: false,\n\t\t\ttotalArticleCount: 0, // 文章总数\n\t\t\t\n\t\t\t// 全屏弹窗控制\n\t\t\tshowFullScreenPopup: false,\n\t\t\t\n\t\t\t// 缓存视频URL\n\t\t\tvideoUrlCache: [],\n\t\t}\n\t},\n\t\n\tprops: {\n\t\tuserId: String\n\t},\n\n\tcomputed: {\n\t\t// 计算文章总数，便于在模板和分享中使用\n\t\tarticleTotal() {\n\t\t\treturn this.totalArticleCount || 0;\n\t\t}\n\t},\n\n\t\n\t// 页面加载时设置分享数据\n\tonLoad(options) {\n\t\t// 保存userId\n\t\tif (options.userId) {\n\t\t\tthis.shareUserId = options.userId;\n\t\t}\n\t\t\n\t\t// 初始化store\n\t\tthis.userStore = useUserInfoStore();\n\t\t\n\t\t// 获取权限状态\n\t\tthis.getSendOnState();\n\t\t\n\t\t// 请求云对象获取文章总数\n\t\tthis.getUserArticleCount();\n\t\t\n\t\t// 获取文章列表，并在完成后搜索视频\n\t\tthis.getArticelList(true).then(() => {\n\t\t\t// 搜索视频\n\t\t\tthis.searchAllVideosOnLoad();\n\t\t});\n\t\t\n\t\t// 开启平台原生页面分享\n\t\tuni.showShareMenu({\n\t\t\twithShareTicket: true,\n\t\t\tmenus: ['shareAppMessage', 'shareTimeline'] // 显式指定支持分享到朋友圈\n\t\t});\n\t\t\n\t\t// 监听浏览量更新事件\n\t\tuni.$on('viewCountUpdated', (articleId) => {\n\t\t\tthis.updateLocalViewCount({articleId});\n\t\t});\n\t\t\n\t\t// 监听新的全局浏览量更新事件\n\t\tuni.$on('articleViewCountUpdated', (data) => {\n\t\t\tconsole.log('用户文章列表收到文章浏览量更新事件:', data);\n\t\t\tif (data && data.articleId) {\n\t\t\t\tthis.updateLocalViewCount(data);\n\t\t\t}\n\t\t});\n\t\t\n\t\t// 监听头像点击状态变化事件\n\t\tuni.$on('avatarClickChanged', (newState) => {\n\t\t\tconsole.log('用户文章列表页面收到头像点击状态变化事件:', newState);\n\t\t\tthis.avatarClickEnabled = newState;\n\t\t});\n\t\t\n\t\t// 监听全局刷新事件，用于发布后返回刷新列表\n\t\tuni.$on('globalRefresh', (data) => {\n\t\t\tconsole.log('用户文章列表收到全局刷新事件:', data);\n\t\t\t// 检查是否需要刷新当前页面\n\t\t\tif (data && data.pages && data.pages.includes('userArticleList')) {\n\t\t\t\tconsole.log('正在刷新用户文章列表...');\n\t\t\t\t// 刷新时重新获取文章总数\n\t\t\t\tthis.getUserArticleCount();\n\t\t\t\tthis.getArticelList(true);\n\t\t\t}\n\t\t});\n\t\t\n\t\t// 预加载默认分享图片\n\t\tthis.preloadDefaultShareImage();\n\t\t\n\t\t// 不在页面加载时生成分享图，改为按需生成\n\t\t// setTimeout(() => {\n\t\t// this.generateShareImage();\n\t\t// }, 1500);\n\t},\n\t\n\t\n\t\n\t// 页面卸载时移除事件监听\n\tonUnload() {\n\t\tuni.$off('viewCountUpdated');\n\t\tuni.$off('articleViewCountUpdated');\n\t\tuni.$off('avatarClickChanged');\n\t\tuni.$off('globalRefresh');\n\t\t\n\t\t// 清理防抖定时器\n\t\tif (this.scrollToLowerTimer) {\n\t\t\tclearTimeout(this.scrollToLowerTimer);\n\t\t\tthis.scrollToLowerTimer = null;\n\t\t}\n\t},\n\t\n\t// 组件销毁前清理资源\n\tbeforeDestroy() {\n\t\t// 清理所有定时器\n\t\tif (this.scrollToLowerTimer) {\n\t\t\tclearTimeout(this.scrollToLowerTimer);\n\t\t\tthis.scrollToLowerTimer = null;\n\t\t}\n\t},\n\t\n\t// 监听页面触底事件\n\tonReachBottom() {\n\t\tconsole.log('原生触底事件被触发');\n\t\t// 如果已经在处理中，则跳过\n\t\tif (this.isScrollLoading || this.scrollToLowerTimer) {\n\t\t\treturn;\n\t\t}\n\t\t// 调用通用的触底加载方法\n\t\tthis.scrolltolower();\n\t},\n\t\n\tmethods: {\n\t\t// 获取权限开关状态\n\t\tasync getSendOnState() {\n\t\t\ttry {\n\t\t\t\tconsole.log('正在获取按钮状态...');\n\t\t\t\t\n\t\t\t\tconst sendOnApi = uniCloud.importObject('sendOn', { customUI: true });\n\t\t\t\tconst res = await sendOnApi.get();\n\t\t\t\t\n\t\t\t\tif (res && res.data && res.data.length > 0) {\n\t\t\t\t\t// 获取头像点击状态\n\t\t\t\t\tconst serverAvatarClickState = res.data[0].avatarClick !== undefined ? res.data[0].avatarClick : true;\n\t\t\t\t\t\n\t\t\t\t\t// 更新头像点击状态\n\t\t\t\t\tthis.avatarClickEnabled = serverAvatarClickState;\n\t\t\t\t\t\n\t\t\t\t\tconsole.log('头像点击状态:', this.avatarClickEnabled);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error('获取按钮状态失败: 数据格式不正确');\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error('获取按钮状态失败:', err);\n\t\t\t}\n\t\t},\n\t\t\n\t\t// 请求云对象获取文章总数\n\t\tasync getUserArticleCount() {\n\t\t\tif (!this.userId) {\n\t\t\t\tconsole.log('用户ID不存在，无法获取文章总数');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tconsole.log('通过云对象请求文章总数，用户ID:', this.userId);\n\t\t\t\n\t\t\ttry {\n\t\t\t\t// 使用getArticleList方法获取文章总数\n\t\t\t\t// 由于getUserArticleCount方法在部署的云对象中不存在（Method[getUserArticleCount] was not found in index.obj.js）\n\t\t\t\tconst articleApi = uniCloud.importObject('articleWx', { customUI: true });\n\t\t\t\t// 设置pageSize为1，只获取总数\n\t\t\t\tconst result = await articleApi.getArticleList(this.userId, 1, 1);\n\t\t\t\t\n\t\t\t\tif (result && result.total !== undefined) {\n\t\t\t\t\t// 更新文章总数\n\t\t\t\t\tthis.totalArticleCount = result.total;\n\t\t\t\t\tconsole.log('云对象通过getArticleList获取到文章总数:', this.totalArticleCount);\n\t\t\t\t\t\n\t\t\t\t\t// 更新分享信息\n\t\t\t\t\tthis.updateShareInfo();\n\t\t\t\t\t\n\t\t\t\t\treturn this.totalArticleCount;\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error('云对象获取文章总数失败: 未返回total字段');\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error('云对象获取文章总数出错:', err);\n\t\t\t\t\n\t\t\t\t// 出错时，将文章总数设为0\n\t\t\t\tthis.totalArticleCount = 0;\n\t\t\t\tconsole.log('云对象请求失败，设置文章总数为0');\n\t\t\t\t\n\t\t\t\treturn null;\n\t\t\t}\n\t\t},\n\t\t\n\t\t// 预加载默认分享图片\n\t\tpreloadDefaultShareImage() {\n\t\t\t// 预加载常规分享默认图片\n\t\t\tuni.getImageInfo({\n\t\t\t\tsrc: this.defaultShareImage,\n\t\t\t\tsuccess: (res) => {\n\t\t\t\t\tconsole.log('默认分享图片预加载成功:', res);\n\t\t\t\t\t// 确保默认图片路径正确\n\t\t\t\t\tthis.defaultShareImage = res.path;\n\t\t\t\t\t// 同时设置链接分享图片\n\t\t\t\t\tthis.linkShareImage = res.path;\n\t\t\t\t},\n\t\t\t\tfail: (err) => {\n\t\t\t\t\tconsole.error('默认分享图片预加载失败:', err);\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t\n\t\t// 统一分享方法 - 返回标准分享信息（分享给好友使用页面截图作为封面）\n\t\tgetShareInfo() {\n\t\t\t// 设置分享标题\n\t\t\tif (this.userArticleInfo) {\n\t\t\t\tconst nickName = this.userArticleInfo?.nickName || '用户';\n\t\t\t\tthis.shareTitle = `我是${nickName}，这是我的第${this.articleTotal}条朋友圈，点击查看！`;\n\t\t\t}\n\t\t\t\n\t\t\t// 确保用户ID已设置\n\t\t\tthis.shareUserId = this.userId || this.shareUserId;\n\t\t\t\n\t\t\tconsole.log('统一分享方法 - 分享给好友使用页面截图作为封面');\n\t\t\t\n\t\t\t// 返回标准分享信息 - 不包含imageUrl，使用页面截图作为封面\n\t\t\treturn {\n\t\t\t\ttitle: this.shareTitle || '更新了精彩动态，点击查看！',\n\t\t\t\tpath: `/pages/userArticleList/userArticleList?userId=${this.shareUserId}`\n\t\t\t\t// 不包含imageUrl，使小程序自动截取页面作为分享封面\n\t\t\t};\n\t\t},\n\t\t\n\t\t// 获取朋友圈分享信息（使用用户头像作为封面）\n\t\tgetTimelineShareInfo() {\n\t\t\t// 设置分享标题\n\t\t\tif (this.userArticleInfo) {\n\t\t\t\tconst nickName = this.userArticleInfo?.nickName || '用户';\n\t\t\t\tthis.shareTitle = `我是${nickName}，这是我的第${this.articleTotal}条朋友圈，点击查看！`;\n\t\t\t}\n\t\t\t\n\t\t\t// 确保用户ID已设置\n\t\t\tthis.shareUserId = this.userId || this.shareUserId;\n\t\t\t\n\t\t\t// 获取用户头像作为分享封面\n\t\t\tlet shareImageUrl = '';\n\t\t\tif (this.userArticleInfo && this.userArticleInfo.avatarUrl) {\n\t\t\t\tshareImageUrl = this.processImageUrl(this.userArticleInfo.avatarUrl);\n\t\t\t\tconsole.log('朋友圈分享 - 使用用户头像作为封面:', shareImageUrl);\n\t\t\t} else {\n\t\t\t\t// 如果没有头像，使用默认分享图\n\t\t\t\tshareImageUrl = this.defaultShareImage;\n\t\t\t\tconsole.log('朋友圈分享 - 使用默认分享图作为封面:', shareImageUrl);\n\t\t\t}\n\t\t\t\n\t\t\t// 返回朋友圈分享信息（使用用户头像作为封面）\n\t\t\treturn {\n\t\t\t\ttitle: this.shareTitle || '更新了精彩动态，点击查看！',\n\t\t\t\tquery: `userId=${this.shareUserId}`,\n\t\t\t\timageUrl: shareImageUrl // 使用用户头像作为朋友圈分享封面\n\t\t\t};\n\t\t},\n\t\t\n\t\t// 更新分享信息\n\t\tupdateShareInfo() {\n\t\t\tif (this.userArticleInfo) {\n\t\t\t\tconst nickName = this.userArticleInfo?.nickName || '用户';\n\t\t\t\t\n\t\t\t\t// 设置分享标题\n\t\t\t\tthis.shareTitle = `我是${nickName}，这是我的第${this.articleTotal}条朋友圈，点击查看！`;\n\t\t\t\t\n\t\t\t\tthis.shareUserId = this.userId || this.shareUserId;\n\t\t\t\t\n\t\t\t\t// 设置分享图片URL\n\t\t\t\tthis.shareImageUrl = this.dynamicShareImage || this.defaultShareImage;\n\t\t\t\t\n\t\t\t\tconsole.log('更新分享信息:', {\n\t\t\t\t\ttitle: this.shareTitle,\n\t\t\t\t\timageUrl: this.shareImageUrl,\n\t\t\t\t\tuserId: this.shareUserId\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\t\n\t\t// 获取用户文章列表（首次加载或重置）\n\t\tasync getArticelList(isReset = false) {\n\t\t\tthis.isLoading = true;\n\t\t\tthis.status = 'loading';\n\t\t\t\n\t\t\tif (isReset) {\n\t\t\t\tthis.pageNo = 1;\n\t\t\t\tthis.userArticleData = [];\n\t\t\t}\n\t\t\t\n\t\t\treturn new Promise(async (resolve, reject) => {\n\t\t\t\ttry {\n\t\t\t\t\tconst articleApi = uniCloud.importObject('articleWx', { customUI: true });\n\t\t\t\t\tconst res = await articleApi.getArticleList(this.userId, this.pageNo, this.pageSize);\n\t\t\t\t\t\n\t\t\t\t\t// 保存API返回的文章总数\n\t\t\t\t\tif (res && res.total !== undefined) {\n\t\t\t\t\t\tthis.totalArticleCount = res.total;\n\t\t\t\t\t\tconsole.log('获取到文章总数:', this.totalArticleCount);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// 添加空值检查\n\t\t\t\t\tif (res && res.userInfo) {\n\t\t\t\t\t\tthis.userArticleInfo = res.userInfo;\n\t\t\t\t\t\t// 如果当前用户是登录用户，可以更新全局用户信息\n\t\t\t\t\t\tif (this.userId === this.userStore.userInfo.uid) {\n\t\t\t\t\t\t\tthis.userStore.setUserInfo({\n\t\t\t\t\t\t\t\t...this.userStore.userInfo,\n\t\t\t\t\t\t\t\tnickName: res.userInfo.nickName || this.userStore.userInfo.nickName,\n\t\t\t\t\t\t\t\tavatarUrl: res.userInfo.avatarUrl ? fixImageUrl(res.userInfo.avatarUrl) : (this.userStore.userInfo.avatarUrl ? fixImageUrl(this.userStore.userInfo.avatarUrl) : getDefaultImage('avatar'))\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// 数据加载完成后，更新分享信息\n\t\t\t\t\t\tthis.$nextTick(() => {\n\t\t\t\t\t\t\tthis.updateShareInfo();\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// 如果res.userInfo为null，检查是否第一页数据中有文章，\n\t\t\t\t\t\t// 如果有，从第一篇文章中获取用户信息\n\t\t\t\t\t\tif (this.pageNo === 1 && res && res.data && res.data.length > 0) {\n\t\t\t\t\t\t\tconst firstArticle = res.data[0];\n\t\t\t\t\t\t\tthis.userArticleInfo = {\n\t\t\t\t\t\t\t\tavatarUrl: firstArticle.user_avatarUrl ? fixImageUrl(firstArticle.user_avatarUrl) : getDefaultImage('avatar'),\n\t\t\t\t\t\t\t\tnickName: firstArticle.user_nickName,\n\t\t\t\t\t\t\t\tmobile: firstArticle.user_mobile || '未填写'\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// 如果这不是第一页，或者没有任何文章数据，保持当前的用户信息\n\t\t\t\t\t\t\t// 只有在第一页且没有文章时才设为空对象\n\t\t\t\t\t\t\tif (this.pageNo === 1) {\n\t\t\t\t\t\t\t\tthis.userArticleInfo = {};\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// 否则保持当前的用户信息不变\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// 处理文章数据\n\t\t\t\t\tif (res && res.data) {\n\t\t\t\t\t\tlet articlesData = res.data;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// 处理每篇文章，检查是否含有视频\n\t\t\t\t\t\tarticlesData = articlesData.map(article => {\n\t\t\t\t\t\t\t// 添加一个标识字段，表示文章是否包含视频\n\t\t\t\t\t\t\tarticle.hasVideo = this.checkArticleHasVideo(article);\n\t\t\t\t\t\t\treturn article;\n\t\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (isReset) {\n\t\t\t\t\t\t\tthis.userArticleData = articlesData;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.userArticleData = [...this.userArticleData, ...articlesData];\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// 确保每篇文章都有用户信息\n\t\t\t\t\t\tthis.userArticleData.forEach(article => {\n\t\t\t\t\t\t\t// 如果文章没有用户信息，使用从API获取的用户信息\n\t\t\t\t\t\t\tif (!article.user_avatarUrl && this.userArticleInfo.avatarUrl) {\n\t\t\t\t\t\t\t\tarticle.user_avatarUrl = this.userArticleInfo.avatarUrl;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!article.user_nickName && this.userArticleInfo.nickName) {\n\t\t\t\t\t\t\t\tarticle.user_nickName = this.userArticleInfo.nickName;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\t\n\t\t\t\t\t\t// 判断是否还有更多数据\n\t\t\t\t\t\tthis.hasMore = res.data.length >= this.pageSize;\n\t\t\t\t\t\tthis.status = this.hasMore ? 'more' : 'noMore';\n\t\t\t\t\t\t\n\t\t\t\t\t\t// 文章数据更新后，重新更新分享信息以获取最佳图片\n\t\t\t\t\t\tthis.$nextTick(() => {\n\t\t\t\t\t\t\tthis.updateShareInfo();\n\t\t\t\t\t\t\t// 获取最新文章的图片\n\t\t\t\t\t\t\tthis.extractLatestArticleImages();\n\t\t\t\t\t\t\t// 尝试从文章中提取视频\n\t\t\t\t\t\t\tthis.extractVideoFromArticles();\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (isReset) {\n\t\t\t\t\t\t\tthis.userArticleData = [];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.hasMore = false;\n\t\t\t\t\t\tthis.status = 'noMore';\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tresolve();\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error('获取用户文章列表失败:', err);\n\t\t\t\t\tif (isReset) {\n\t\t\t\t\t\tthis.userArticleData = [];\n\t\t\t\t\t}\n\t\t\t\t\tthis.userArticleInfo = {};\n\t\t\t\t\tthis.status = 'noMore';\n\t\t\t\t\tthis.hasMore = false;\n\t\t\t\t\t\n\t\t\t\t\t// 显示错误提示\n\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\ttitle: '获取数据失败，请重试',\n\t\t\t\t\t\ticon: 'none'\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\treject(err);\n\t\t\t\t} finally {\n\t\t\t\t\tthis.isLoading = false;\n\t\t\t\t\t// 重置下拉刷新状态\n\t\t\t\t\tthis.isRefreshing = false;\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t\n\t\t// 触底加载时，不影响视频状态\n\t\tscrolltolower() {\n\t\t\tconsole.log('触底加载被触发，状态:', { isLoading: this.isLoading, hasMore: this.hasMore, isScrollLoading: this.isScrollLoading });\n\t\t\t\n\t\t\t// 如果正在加载或已经没有更多数据，直接返回\n\t\t\tif (this.isLoading || !this.hasMore || this.isScrollLoading) {\n\t\t\t\tconsole.log('跳过加载: ' + (this.isLoading ? '正在加载中' : (this.isScrollLoading ? '防抖期间' : '没有更多数据')));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t// 设置防抖标志\n\t\t\tthis.isScrollLoading = true;\n\t\t\t\n\t\t\t// 先展示加载提示\n\t\t\tthis.status = 'loading';\n\t\t\t\n\t\t\t// 清除之前的定时器\n\t\t\tif (this.scrollToLowerTimer) {\n\t\t\t\tclearTimeout(this.scrollToLowerTimer);\n\t\t\t}\n\t\t\t\n\t\t\t// 记录当前视频状态，以便加载后恢复\n\t\t\tlet savedVideoState = null;\n\t\t\tif (this.videoVisible && this.videoContext) {\n\t\t\t\tsavedVideoState = {\n\t\t\t\t\tisPlaying: this.isVideoPlaying,\n\t\t\t\t\tposition: 0,\n\t\t\t\t\tvisible: this.videoVisible\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t// 获取当前播放位置\n\t\t\t\ttry {\n\t\t\t\t\tthis.videoContext.pause(); // 临时暂停以便获取准确的当前位置\n\t\t\t\t\tsavedVideoState.position = this.videoContext.currentTime || 0;\n\t\t\t\t\t// 如果之前是播放状态，则恢复播放\n\t\t\t\t\tif (savedVideoState.isPlaying) {\n\t\t\t\t\t\tthis.videoContext.play();\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error('保存视频状态时出错:', e);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// 设置防抖定时器，300毫秒内只执行一次\n\t\t\tthis.scrollToLowerTimer = setTimeout(() => {\n\t\t\t\tconsole.log('开始加载更多数据 (防抖后)，保存的视频状态:', savedVideoState);\n\t\t\t\t\n\t\t\t\t// 传递保存的视频状态\n\t\t\t\tthis.loadMoreData(savedVideoState);\n\t\t\t}, 500);\n\t\t},\n\t\t\n\t\t// 加载更多数据\n\t\tasync loadMoreData(savedVideoState = null) {\n\t\t\tif (this.isLoading || !this.hasMore) {\n\t\t\t\tconsole.log('跳过加载更多:', { isLoading: this.isLoading, hasMore: this.hasMore });\n\t\t\t\tthis.isScrollLoading = false;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tconsole.log(`开始加载第${this.pageNo + 1}页数据，视频状态:`, savedVideoState);\n\t\t\tthis.status = 'loading';\n\t\t\tthis.isLoading = true;\n\t\t\t\n\t\t\t// 视觉上显示加载延迟，避免加载过快用户无感知\n\t\t\tconst loadStartTime = Date.now();\n\t\t\tconst minLoadingTime = 500; // 最小加载时间，提供更好的视觉反馈\n\t\t\t\n\t\t\tthis.pageNo++;\n\t\t\ttry {\n\t\t\t\tawait this.getArticelList();\n\t\t\t\t\n\t\t\t\t// 计算已经过去的时间\n\t\t\t\tconst loadDuration = Date.now() - loadStartTime;\n\t\t\t\t\n\t\t\t\t// 如果加载太快，添加小延迟使加载状态对用户可见\n\t\t\t\tif (loadDuration < minLoadingTime) {\n\t\t\t\t\tawait new Promise(resolve => setTimeout(resolve, minLoadingTime - loadDuration));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tconsole.log(`第${this.pageNo}页数据加载完成, 当前状态:`, { \n\t\t\t\t\tarticleCount: this.userArticleData.length,\n\t\t\t\t\thasMore: this.hasMore,\n\t\t\t\t\tstatus: this.status\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\t// 恢复视频状态\n\t\t\t\tthis.$nextTick(() => {\n\t\t\t\t\tthis.restoreVideoState(savedVideoState);\n\t\t\t\t});\n\t\t\t} catch (err) {\n\t\t\t\t// 静默处理\"请求进行中\"错误，避免在控制台显示错误信息\n\t\t\t\tif (err && err.message === '请求进行中') {\n\t\t\t\t\tconsole.log('忽略并发请求:', err.message);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error('加载更多数据失败:', err);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// 发生错误时恢复页码，以便下次重试\n\t\t\t\tthis.pageNo--;\n\t\t\t\tthis.status = 'more';\n\t\t\t\t\n\t\t\t\t// 即使出错也恢复视频状态\n\t\t\t\tthis.$nextTick(() => {\n\t\t\t\t\tthis.restoreVideoState(savedVideoState);\n\t\t\t\t});\n\t\t\t} finally {\n\t\t\t\tthis.isLoading = false;\n\t\t\t\tthis.isScrollLoading = false;\n\t\t\t}\n\t\t},\n\t\t\n\t\t// 恢复视频状态的方法\n\t\trestoreVideoState(savedVideoState) {\n\t\t\tif (!savedVideoState) return;\n\t\t\t\n\t\t\tconsole.log('尝试恢复视频状态:', savedVideoState, '用户关闭标记:', this.userClosedVideo);\n\t\t\t\n\t\t\t// 如果用户主动关闭了视频，不恢复视频状态\n\t\t\tif (this.userClosedVideo) {\n\t\t\t\tconsole.log('用户已主动关闭视频，不恢复视频状态');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t// 确保视频组件可见性与之前一致\n\t\t\tif (savedVideoState.visible !== this.videoVisible) {\n\t\t\t\tthis.videoVisible = savedVideoState.visible;\n\t\t\t}\n\t\t\t\n\t\t\t// 仅当视频组件可见且有视频URL时恢复状态\n\t\t\tif (this.videoVisible && this.videoUrl) {\n\t\t\t\t// 需要重新获取视频上下文\n\t\t\t\tthis.videoContext = uni.createVideoContext('myVideo', this);\n\t\t\t\t\n\t\t\t\tif (this.videoContext) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// 设置播放位置\n\t\t\t\t\t\tif (savedVideoState.position > 0) {\n\t\t\t\t\t\t\tthis.videoContext.seek(savedVideoState.position);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// 恢复播放状态\n\t\t\t\t\t\tif (savedVideoState.isPlaying) {\n\t\t\t\t\t\t\tthis.videoContext.play();\n\t\t\t\t\t\t\tthis.isVideoPlaying = true;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.videoContext.pause();\n\t\t\t\t\t\t\tthis.isVideoPlaying = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tconsole.log('视频状态恢复成功');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tconsole.error('恢复视频状态时出错:', e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t\n\t\t// 处理删除\n\t\tasync handleDelete(article_id) {\n\t\t\ttry {\n\t\t\t\t// 添加确认提示\n\t\t\t\tuni.showModal({\n\t\t\t\t\ttitle: '确认删除',\n\t\t\t\t\tcontent: '确定要删除这篇文章吗？',\n\t\t\t\t\tsuccess: async (result) => {\n\t\t\t\t\t\tif (result.confirm) {\n\t\t\t\t\t\t\t// 显示加载中提示\n\t\t\t\t\t\t\tuni.showLoading({\n\t\t\t\t\t\t\t\ttitle: '删除中...',\n\t\t\t\t\t\t\t\tmask: true\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// 调用删除API\n\t\t\t\t\t\t\tconst articleApi = uniCloud.importObject('articleWx', { customUI: true });\n\t\t\t\t\t\t\tconst res = await articleApi.del(article_id, this.userStore.userInfo.uid);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tconsole.log('删除返回结果:', res);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// 检查删除是否成功\n\t\t\t\t\t\t\tif (res && res.deleted) {\n\t\t\t\t\t\t\t\t// 从本地数据列表中移除已删除的文章\n\t\t\t\t\t\t\t\tconst index = this.userArticleData.findIndex(item => item._id === article_id);\n\t\t\t\t\t\t\t\tif (index !== -1) {\n\t\t\t\t\t\t\t\t\tthis.userArticleData.splice(index, 1);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// 显示成功提示\n\t\t\t\t\t\t\t\tuni.hideLoading();\n\t\t\t\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\t\t\t\ttitle: '删除成功',\n\t\t\t\t\t\t\t\t\ticon: 'success',\n\t\t\t\t\t\t\t\t\tduration: 1500\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthrow new Error('删除失败，请重试');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error('删除出错:', err);\n\t\t\t\tuni.hideLoading();\n\t\t\t\tuni.showToast({\n\t\t\t\t\ttitle: err.message || '删除失败，请重试',\n\t\t\t\t\ticon: 'none',\n\t\t\t\t\tduration: 2000\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\t\n\t\t// 图片预览\n\t\tpreviewImage(urls, current) {\n\t\t\tuni.previewImage({\n\t\t\t\turls,\n\t\t\t\tcurrent\n\t\t\t});\n\t\t},\n\t\t\n\t\t// 处理联系方式\n\t\thandleContact() {\n\t\t\tif (!this.userStore.userInfo.isLogin) {\n\t\t\t\treturn testLogin();\n\t\t\t}\n\t\t\t\n\t\t\tif (!this.userArticleInfo || this.userArticleInfo.mobile === '未填写') {\n\t\t\t\treturn uni.showToast({\n\t\t\t\t\ticon: 'none',\n\t\t\t\t\ttitle: '他并不想让人联系'\n\t\t\t\t});\n\t\t\t}\n\t\t\tuni.makePhoneCall({\n\t\t\t\tphoneNumber: this.userArticleInfo.mobile\n\t\t\t});\n\t\t},\n\t\t\n\t\t// 文章列表触底时触发\n\t\tscrolltolower() {\n\t\t\tconsole.log('触底加载被触发，状态:', { isLoading: this.isLoading, hasMore: this.hasMore, isScrollLoading: this.isScrollLoading });\n\t\t\t\n\t\t\t// 如果正在加载或已经没有更多数据，直接返回\n\t\t\tif (this.isLoading || !this.hasMore || this.isScrollLoading) {\n\t\t\t\tconsole.log('跳过加载: ' + (this.isLoading ? '正在加载中' : (this.isScrollLoading ? '防抖期间' : '没有更多数据')));\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t// 设置防抖标志\n\t\t\tthis.isScrollLoading = true;\n\t\t\t\n\t\t\t// 先展示加载提示\n\t\t\tthis.status = 'loading';\n\t\t\t\n\t\t\t// 清除之前的定时器\n\t\t\tif (this.scrollToLowerTimer) {\n\t\t\t\tclearTimeout(this.scrollToLowerTimer);\n\t\t\t}\n\t\t\t\n\t\t\t// 记录当前视频状态，以便加载后恢复\n\t\t\tlet savedVideoState = null;\n\t\t\tif (this.videoVisible && this.videoContext) {\n\t\t\t\tsavedVideoState = {\n\t\t\t\t\tisPlaying: this.isVideoPlaying,\n\t\t\t\t\tposition: 0,\n\t\t\t\t\tvisible: this.videoVisible\n\t\t\t\t};\n\t\t\t\t\n\t\t\t\t// 获取当前播放位置\n\t\t\t\ttry {\n\t\t\t\t\tthis.videoContext.pause(); // 临时暂停以便获取准确的当前位置\n\t\t\t\t\tsavedVideoState.position = this.videoContext.currentTime || 0;\n\t\t\t\t\t// 如果之前是播放状态，则恢复播放\n\t\t\t\t\tif (savedVideoState.isPlaying) {\n\t\t\t\t\t\tthis.videoContext.play();\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error('保存视频状态时出错:', e);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// 设置防抖定时器，300毫秒内只执行一次\n\t\t\tthis.scrollToLowerTimer = setTimeout(() => {\n\t\t\t\tconsole.log('开始加载更多数据 (防抖后)，保存的视频状态:', savedVideoState);\n\t\t\t\t\n\t\t\t\t// 传递保存的视频状态\n\t\t\t\tthis.loadMoreData(savedVideoState);\n\t\t\t}, 500);\n\t\t},\n\t\t\n\t\t// 更新本地文章浏览量数据\n\t\tupdateLocalViewCount(data) {\n\t\t\t// 检查数据有效性\n\t\t\tif (!data || !data.articleId) {\n\t\t\t\tconsole.log('更新浏览量失败：无效的文章数据');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\t// 查找文章并更新浏览量\n\t\t\tconst article = this.userArticleData.find(item => item._id === data.articleId);\n\t\t\tif (article) {\n\t\t\t\t// 如果提供了具体的浏览量，则直接使用；否则自增\n\t\t\t\tif (data.viewCount !== undefined) {\n\t\t\t\t\tarticle.look_count = data.viewCount;\n\t\t\t\t} else if (article.look_count !== undefined) {\n\t\t\t\t\tarticle.look_count++;\n\t\t\t\t} else {\n\t\t\t\t\tarticle.look_count = 1;\n\t\t\t\t}\n\t\t\t\tconsole.log(`文章(${data.articleId})浏览量已更新: ${article.look_count}`);\n\t\t\t} else {\n\t\t\t\tconsole.log(`未找到文章: ${data.articleId}`);\n\t\t\t}\n\t\t},\n\t\t\n\t\t// 预览最新文章图片\n\t\tpreviewLatestImages(index) {\n\t\t\tif (this.latestArticleImages && this.latestArticleImages.length > 0) {\n\t\t\t\tuni.previewImage({\n\t\t\t\t\tcurrent: this.latestArticleImages[index],\n\t\t\t\t\turls: this.latestArticleImages\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\t\n\t\t// 获取文章的图片\n\t\tgetArticleImages(article) {\n\t\t\tconst images = [];\n\t\t\t\n\t\t\tif (!article) return images;\n\t\t\t\n\t\t\t// 处理新版图片结构 (images 数组)\n\t\t\tif (article.images && article.images.length > 0) {\n\t\t\t\tarticle.images.forEach(img => {\n\t\t\t\t\t// 优先使用缩略图\n\t\t\t\t\tif (img.thumbnailURL) {\n\t\t\t\t\t\timages.push(this.processImageUrl(img.thumbnailURL));\n\t\t\t\t\t}\n\t\t\t\t\t// 其次使用压缩图\n\t\t\t\t\telse if (img.compressedURL) {\n\t\t\t\t\t\timages.push(this.processImageUrl(img.compressedURL));\n\t\t\t\t\t}\n\t\t\t\t\t// 再次使用原图\n\t\t\t\t\telse if (img.url) {\n\t\t\t\t\t\timages.push(this.processImageUrl(img.url));\n\t\t\t\t\t}\n\t\t\t\t\t// 如果是字符串直接使用\n\t\t\t\t\telse if (typeof img === 'string') {\n\t\t\t\t\t\timages.push(this.processImageUrl(img));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\t// 处理旧版图片结构 (imgArr 数组)\n\t\t\tif (article.imgArr && article.imgArr.length > 0) {\n\t\t\t\tarticle.imgArr.forEach(img => {\n\t\t\t\t\timages.push(this.processImageUrl(img));\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\t// 尝试使用封面图\n\t\t\tif (article.coverImage && images.length === 0) {\n\t\t\t\timages.push(this.processImageUrl(article.coverImage));\n\t\t\t}\n\t\t\t\n\t\t\treturn images;\n\t\t},\n\t\t\n\t\t// 预览文章图片\n\t\tpreviewArticleImage(article, index) {\n\t\t\tconst images = this.getArticleImages(article);\n\t\t\tif (images && images.length > 0) {\n\t\t\t\tuni.previewImage({\n\t\t\t\t\tcurrent: images[index],\n\t\t\t\t\turls: images\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\t\n\t\t// 下拉刷新\n\t\tonRefresh() {\n\t\t\tthis.isRefreshing = true;\n\t\t\tthis.refreshStartTime = Date.now(); // 记录开始刷新的时间\n\t\t\t\n\t\t\tthis.getArticelList(true).then(() => {\n\t\t\t\t// 确保刷新动画至少显示800毫秒，提供良好的用户体验\n\t\t\t\tconst refreshDuration = Date.now() - this.refreshStartTime;\n\t\t\t\tconst minimumDuration = 800;\n\t\t\t\t\n\t\t\t\tif (refreshDuration < minimumDuration) {\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tthis.isRefreshing = false;\n\t\t\t\t\t\t// 刷新成功提示\n\t\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\t\ttitle: '刷新成功',\n\t\t\t\t\t\t\ticon: 'success',\n\t\t\t\t\t\t\tduration: 1500\n\t\t\t\t\t\t});\n\t\t\t\t\t}, minimumDuration - refreshDuration);\n\t\t\t\t} else {\n\t\t\t\t\tthis.isRefreshing = false;\n\t\t\t\t\t// 刷新成功提示\n\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\ttitle: '刷新成功',\n\t\t\t\t\t\ticon: 'success',\n\t\t\t\t\t\tduration: 1500\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}).catch(() => {\n\t\t\t\t// 确保刷新动画至少显示800毫秒\n\t\t\t\tconst refreshDuration = Date.now() - this.refreshStartTime;\n\t\t\t\tconst minimumDuration = 800;\n\t\t\t\t\n\t\t\t\tif (refreshDuration < minimumDuration) {\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tthis.isRefreshing = false;\n\t\t\t\t\t\t// 刷新失败提示\n\t\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\t\ttitle: '刷新失败',\n\t\t\t\t\t\t\ticon: 'none',\n\t\t\t\t\t\t\tduration: 1500\n\t\t\t\t\t\t});\n\t\t\t\t\t}, minimumDuration - refreshDuration);\n\t\t\t\t} else {\n\t\t\t\t\tthis.isRefreshing = false;\n\t\t\t\t\t// 刷新失败提示\n\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\ttitle: '刷新失败',\n\t\t\t\t\t\ticon: 'none',\n\t\t\t\t\t\tduration: 1500\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t},\n\t\t\n\t\t// 隐藏分享引导蒙层\n\t\thideShareGuide() {\n\t\t\tthis.showShareArrow = false;\n\t\t},\n\t\t\n\t\t// 视频相关方法\n\t\t// 初始化视频上下文\n\t\tinitVideoContext() {\n\t\t\t// 只有当视频组件可见且有视频URL时才初始化\n\t\t\tif (this.videoVisible && this.videoUrl) {\n\t\t\t\tconsole.log('初始化视频上下文');\n\t\t\t\tthis.videoContext = uni.createVideoContext('myVideo', this);\n\t\t\t} else {\n\t\t\t\tconsole.log('视频组件不可见或没有视频URL，跳过初始化');\n\t\t\t}\n\t\t},\n\t\t\n\t\t// 视频播放事件处理\n\t\tonVideoPlay() {\n\t\t\tconsole.log('视频开始播放');\n\t\t\tthis.isVideoPlaying = true;\n\t\t},\n\t\t\n\t\t// 视频暂停事件处理\n\t\tonVideoPause() {\n\t\t\tconsole.log('视频暂停播放');\n\t\t\tthis.isVideoPlaying = false;\n\t\t},\n\t\t\n\t\t// 视频播放结束事件处理\n\t\tonVideoEnded() {\n\t\t\tconsole.log('视频播放结束');\n\t\t\tthis.isVideoPlaying = false;\n\t\t},\n\t\t\n\t\t// 视频播放错误事件处理\n\t\tonVideoError(e) {\n\t\t\tconsole.error('视频播放错误:', e);\n\t\t\t\n\t\t\t// 尝试自动查找下一个视频\n\t\t\tconst foundNext = this.findNextVideo();\n\t\t\t\n\t\t\t// 如果没有找到下一个视频\n\t\t\tif (!foundNext) {\n\t\t\t\t// 主动关闭视频，不显示提示\n\t\t\t\tthis.hideVideo();\n\t\t\t}\n\t\t},\n\t\t\n\t\t// 查找下一个可用视频\n\t\tfindNextVideo() {\n\t\t\tconsole.log('查找下一个可用视频');\n\t\t\t\n\t\t\t// 首先检查是否有缓存的视频URL\n\t\t\tif (this.videoUrlCache && this.videoUrlCache.length > 0) {\n\t\t\t\t// 移除当前正在使用的视频URL\n\t\t\t\tthis.videoUrlCache = this.videoUrlCache.filter(url => url !== this.videoUrl);\n\t\t\t\t\n\t\t\t\t// 如果还有其他视频URL\n\t\t\t\tif (this.videoUrlCache.length > 0) {\n\t\t\t\t\tconsole.log('从缓存中找到其他视频:', this.videoUrlCache[0]);\n\t\t\t\t\tthis.videoUrl = this.videoUrlCache[0];\n\t\t\t\t\tthis.videoVisible = true;\n\t\t\t\t\t\n\t\t\t\t\t// 在下一个渲染周期初始化视频上下文\n\t\t\t\t\tthis.$nextTick(() => {\n\t\t\t\t\t\tthis.initVideoContext();\n\t\t\t\t\t});\n\t\t\t\t\t\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// 如果没有文章数据，直接返回\n\t\t\tif (!this.userArticleData || this.userArticleData.length === 0) {\n\t\t\t\tconsole.log('没有文章数据，无法查找视频');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\t// 存储找到的所有视频URL\n\t\t\tconst allVideoUrls = [];\n\t\t\t\n\t\t\t// 查找所有视频URLs\n\t\t\tfor (let article of this.userArticleData) {\n\t\t\t\tconst videoUrl = this.extractVideoUrlFromArticle(article);\n\t\t\t\tif (videoUrl && videoUrl !== this.videoUrl) {\n\t\t\t\t\tallVideoUrls.push(videoUrl);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// 如果找到了其他视频\n\t\t\tif (allVideoUrls.length > 0) {\n\t\t\t\tconsole.log('找到其他视频:', allVideoUrls[0]);\n\t\t\t\t\n\t\t\t\t// 更新缓存\n\t\t\t\tthis.videoUrlCache = allVideoUrls;\n\t\t\t\t\n\t\t\t\tthis.videoUrl = allVideoUrls[0];\n\t\t\t\tthis.videoVisible = true;\n\t\t\t\t\n\t\t\t\t// 在下一个渲染周期初始化视频上下文\n\t\t\t\tthis.$nextTick(() => {\n\t\t\t\t\tthis.initVideoContext();\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\tconsole.log('没有找到其他可用视频');\n\t\t\t\tuni.showToast({\n\t\t\t\t\ttitle: '未找到其他视频',\n\t\t\t\t\ticon: 'none'\n\t\t\t\t});\n\t\t\t\treturn false;\n\t\t\t}\n\t\t},\n\t\t\n\t\t// 全屏状态变化事件处理\n\t\thandleFullscreenChange(e) {\n\t\t\tconsole.log('全屏状态变化:', e.detail.fullScreen);\n\t\t},\n\t\t\n\t\t// 隐藏视频\n\t\thideVideo() {\n\t\t\tconsole.log('隐藏视频组件被调用');\n\t\t\t// 标记用户主动关闭了视频\n\t\t\tthis.userClosedVideo = true;\n\t\t\t// 暂停视频\n\t\t\tif (this.videoContext) {\n\t\t\t\tthis.videoContext.pause();\n\t\t\t}\n\t\t\t// 隐藏视频组件\n\t\t\tthis.videoVisible = false;\n\t\t\tthis.videoUrl = ''; // 清空视频URL，确保组件完全隐藏\n\t\t},\n\t\t\n\t\t// 显示视频\n\t\tshowVideo() {\n\t\t\t// 重置用户关闭标记\n\t\t\tthis.userClosedVideo = false;\n\t\t\tthis.videoVisible = true;\n\t\t\t// 在下一个渲染周期重新初始化视频上下文\n\t\t\tthis.$nextTick(() => {\n\t\t\t\tthis.initVideoContext();\n\t\t\t});\n\t\t},\n\t\t\n\t\t// 从文章列表中提取视频URL\n\t\textractVideoFromArticles() {\n\t\t\tconsole.log('尝试从文章中提取视频链接');\n\t\t\t\n\t\t\t// 如果用户主动关闭了视频，不提取新视频\n\t\t\tif (this.userClosedVideo) {\n\t\t\t\tconsole.log('用户已主动关闭视频，跳过视频提取');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\t// 如果没有文章数据，直接返回\n\t\t\tif (!this.userArticleData || this.userArticleData.length === 0) {\n\t\t\t\tconsole.log('没有文章数据，无法提取视频');\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\t// 创建一个包含文章索引的数组，按照文章的创建时间降序排序（最新的优先）\n\t\t\tconst sortedArticleIndices = this.userArticleData\n\t\t\t\t.map((article, index) => ({ \n\t\t\t\t\tindex, \n\t\t\t\t\ttime: article.create_time || article.createTime || article.time || 0,\n\t\t\t\t\tpriority: this.getVideoPriority(article), // 计算视频优先级\n\t\t\t\t\thasVideo: this.checkArticleHasVideo(article) // 预先检查是否包含视频\n\t\t\t\t}))\n\t\t\t\t.sort((a, b) => {\n\t\t\t\t\t// 首先检查是否包含视频，有视频的优先\n\t\t\t\t\tif (a.hasVideo !== b.hasVideo) {\n\t\t\t\t\t\treturn a.hasVideo ? -1 : 1;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// 然后按时间排序，确保最新的视频优先\n\t\t\t\t\tif (typeof a.time === 'string' && typeof b.time === 'string') {\n\t\t\t\t\t\treturn new Date(b.time) - new Date(a.time);\n\t\t\t\t\t} else if (typeof a.time === 'number' && typeof b.time === 'number') {\n\t\t\t\t\t\treturn b.time - a.time;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// 最后按优先级排序\n\t\t\t\t\tif (a.priority !== b.priority) {\n\t\t\t\t\t\treturn b.priority - a.priority;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\treturn a.index - b.index; // 保持原有顺序\n\t\t\t\t})\n\t\t\t\t.map(item => item.index);\n\t\t\t\n\t\t\tconsole.log('优化排序后的文章索引:', sortedArticleIndices.slice(0, 5)); // 只显示前5个，避免日志过长\n\t\t\t\n\t\t\t// 收集所有视频URL以便后续使用\n\t\t\tconst allVideoUrls = [];\n\t\t\tlet firstFoundVideo = null;\n\t\t\t\n\t\t\t// 扫描文章，最多处理前15篇，避免过度处理\n\t\t\tconst maxArticlesToProcess = Math.min(sortedArticleIndices.length, 15);\n\t\t\t\n\t\t\tfor (let i = 0; i < maxArticlesToProcess; i++) {\n\t\t\t\tconst articleIndex = sortedArticleIndices[i];\n\t\t\t\tconst article = this.userArticleData[articleIndex];\n\t\t\t\t\n\t\t\t\tconsole.log(`检查文章索引 ${articleIndex} 是否包含视频`);\n\t\t\t\t\n\t\t\t\t// 尝试各种方法获取视频URL\n\t\t\t\tconst videoUrl = this.extractVideoUrlFromArticle(article);\n\t\t\t\t\n\t\t\t\tif (videoUrl) {\n\t\t\t\t\t// 如果是第一个找到的视频，记录下来立即使用\n\t\t\t\t\tif (!firstFoundVideo) {\n\t\t\t\t\t\tfirstFoundVideo = videoUrl;\n\t\t\t\t\t\t\n\t\t\t\t\t\t// 同时将找到的视频URL存入数组供后续使用\n\t\t\t\t\t\tif (!allVideoUrls.includes(videoUrl)) {\n\t\t\t\t\t\t\tallVideoUrls.push(videoUrl);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// 如果不是第一个，只添加到数组\n\t\t\t\t\t\tif (!allVideoUrls.includes(videoUrl)) {\n\t\t\t\t\t\t\tallVideoUrls.push(videoUrl);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t// 当找到3个以上的视频时停止搜索，以优化性能\n\t\t\t\t\tif (allVideoUrls.length >= 3) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// 如果找到了视频\n\t\t\tif (firstFoundVideo) {\n\t\t\t\tconsole.log('找到视频链接:', firstFoundVideo);\n\t\t\t\t// 保存所有找到的视频以便于错误时重试\n\t\t\t\tthis.videoUrlCache = allVideoUrls;\n\t\t\t\t\n\t\t\t\t// 使用第一个找到的视频\n\t\t\t\tthis.videoUrl = firstFoundVideo;\n\t\t\t\tthis.videoVisible = true;\n\t\t\t\t\n\t\t\t\t// 在下一个渲染周期初始化视频上下文\n\t\t\t\tthis.$nextTick(() => {\n\t\t\t\t\tthis.initVideoContext();\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t\n\t\t\tconsole.log('未在文章中找到有效的视频链接');\n\t\t\treturn false;\n\t\t},\n\t\t\n\t\t// 计算文章中视频的优先级\n\t\tgetVideoPriority(article) {\n\t\t\tlet priority = 0;\n\t\t\t\n\t\t\t// 检查是否有明确标记的视频字段\n\t\t\tif (article.videoURL || article.videoUrl || article.video_url) {\n\t\t\t\tpriority += 10;\n\t\t\t}\n\t\t\t\n\t\t\t// 检查是否有视频数组\n\t\t\tif (article.videos && Array.isArray(article.videos) && article.videos.length > 0) {\n\t\t\t\tpriority += 8;\n\t\t\t}\n\t\t\t\n\t\t\t// 检查内容长度\n\t\t\tif (article.content && article.content.length > 500) {\n\t\t\t\tpriority += 3; // 长内容可能包含更多重要信息\n\t\t\t}\n\t\t\t\n\t\t\t// 如果有互动数据，增加权重\n\t\t\tif (article.like_count > 5 || article.look_count > 20) {\n\t\t\t\tpriority += 5;\n\t\t\t}\n\t\t\t\n\t\t\treturn priority;\n\t\t},\n\t\t\n\t\t// 从单个文章中提取视频URL\n\t\textractVideoUrlFromArticle(article) {\n\t\t\tif (!article) return null;\n\t\t\t\n\t\t\t// 首先检查schema中定义的videoURL字段\n\t\t\tif (article.videoURL && typeof article.videoURL === 'string' && this.isValidVideoUrl(article.videoURL)) {\n\t\t\t\tconsole.log('找到videoURL字段中的视频链接:', article.videoURL);\n\t\t\t\treturn article.videoURL;\n\t\t\t}\n\t\t\t\n\t\t\t// 检查可能包含视频链接的所有常见字段\n\t\t\tconst possibleVideoFields = [\n\t\t\t\t'videoUrl',\n\t\t\t\t'video_url',\n\t\t\t\t'video',\n\t\t\t\t'videoSrc',\n\t\t\t\t'video_src',\n\t\t\t\t'url'\n\t\t\t];\n\t\t\t\n\t\t\t// 检查是否有直接的视频字段\n\t\t\tfor (let field of possibleVideoFields) {\n\t\t\t\tif (article[field] && typeof article[field] === 'string' && this.isValidVideoUrl(article[field])) {\n\t\t\t\t\tconsole.log(`找到视频链接(${field}):`, article[field]);\n\t\t\t\t\treturn article[field];\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// 检查可能包含视频数组的所有常见字段\n\t\t\tconst possibleVideoArrayFields = [\n\t\t\t\t'videos',\n\t\t\t\t'videoArr',\n\t\t\t\t'video_arr',\n\t\t\t\t'videoList',\n\t\t\t\t'video_list'\n\t\t\t];\n\t\t\t\n\t\t\t// 检查是否有视频数组\n\t\t\tfor (let field of possibleVideoArrayFields) {\n\t\t\t\tif (article[field] && Array.isArray(article[field]) && article[field].length > 0) {\n\t\t\t\t\tconst videoItem = article[field][0];\n\t\t\t\t\tconsole.log(`找到视频数组(${field}):`, videoItem);\n\t\t\t\t\t\n\t\t\t\t\t// 如果数组项是字符串，直接使用\n\t\t\t\t\tif (typeof videoItem === 'string' && this.isValidVideoUrl(videoItem)) {\n\t\t\t\t\t\treturn videoItem;\n\t\t\t\t\t} \n\t\t\t\t\t// 如果是对象，尝试获取url字段\n\t\t\t\t\telse if (typeof videoItem === 'object') {\n\t\t\t\t\t\tconst possibleUrlProps = ['url', 'src', 'source', 'path', 'videoUrl'];\n\t\t\t\t\t\tfor (let prop of possibleUrlProps) {\n\t\t\t\t\t\t\tif (videoItem[prop] && typeof videoItem[prop] === 'string' && this.isValidVideoUrl(videoItem[prop])) {\n\t\t\t\t\t\t\t\treturn videoItem[prop];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// 检查是否有内容解析视频\n\t\t\tif (article.content) {\n\t\t\t\tconst videoUrlMatch = this.extractVideoUrlFromContent(article.content);\n\t\t\t\tif (videoUrlMatch) {\n\t\t\t\t\tconsole.log('从内容中提取到视频链接:', videoUrlMatch);\n\t\t\t\t\treturn videoUrlMatch;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn null;\n\t\t},\n\t\t\n\t\t// 从内容中提取视频URL\n\t\textractVideoUrlFromContent(content) {\n\t\t\tif (!content || typeof content !== 'string') return null;\n\t\t\t\n\t\t\t// 尝试匹配常见视频URL模式\n\t\t\tconst videoUrlRegexes = [\n\t\t\t\t// 小程序视频路径格式\n\t\t\t\t/cloud:\\/\\/[^\"'\\s<>]+\\.(mp4|mov|m3u8)/gi,\n\t\t\t\t\n\t\t\t\t// 文件存储视频路径\n\t\t\t\t/cloud-file:\\/\\/[^\"'\\s<>]+\\.(mp4|mov|m3u8)/gi,\n\t\t\t\t\n\t\t\t\t// 常见视频文件扩展名\n\t\t\t\t/https?:\\/\\/[^\\s<>\"']+\\.(mp4|avi|mov|wmv|flv|mkv|webm|m3u8|3gp|rm|rmvb)/gi,\n\t\t\t\t\n\t\t\t\t// 特定视频平台\n\t\t\t\t/https?:\\/\\/v\\.qq\\.com\\/[^\\s<>\"']+/gi,\n\t\t\t\t/https?:\\/\\/www\\.youtube\\.com\\/watch\\?v=[^\\s<>\"']+/gi,\n\t\t\t\t/https?:\\/\\/youtu\\.be\\/[^\\s<>\"']+/gi,\n\t\t\t\t/https?:\\/\\/vimeo\\.com\\/[^\\s<>\"']+/gi,\n\t\t\t\t/https?:\\/\\/www\\.bilibili\\.com\\/video\\/[^\\s<>\"']+/gi,\n\t\t\t\t/https?:\\/\\/www\\.ixigua\\.com\\/[^\\s<>\"']+/gi,\n\t\t\t\t/https?:\\/\\/www\\.kuaishou\\.com\\/[^\\s<>\"']+/gi,\n\t\t\t\t\n\t\t\t\t// 通用CDN和文件存储链接\n\t\t\t\t/https?:\\/\\/[^\\s<>\"']+\\.bspapp\\.com\\/[^\\s<>\"']+/gi,\n\t\t\t\t/https?:\\/\\/[^\\s<>\"']+\\.cdn[^\\s<>\"']*\\/[^\\s<>\"']+/gi,\n\t\t\t\t\n\t\t\t\t// 微信视频\n\t\t\t\t/https?:\\/\\/mp\\.weixin\\.qq\\.com\\/[^\\s<>\"']*video[^\\s<>\"']+/gi,\n\t\t\t\t/https?:\\/\\/wxsnsdy\\.wxs\\.qq\\.com\\/[^\\s<>\"']+/gi,\n\t\t\t\t\n\t\t\t\t// 查找HTML视频标签\n\t\t\t\t/<video[^>]*src=[\"']([^\"']+)[\"'][^>]*>/gi,\n\t\t\t\t/<video[^>]*>[\\s\\S]*?<source[^>]*src=[\"']([^\"']+)[\"'][^>]*>/gi\n\t\t\t];\n\t\t\t\n\t\t\t// 先尝试从HTML标签中提取\n\t\t\tconst htmlMatchRegexes = [\n\t\t\t\t/<video[^>]*src=[\"']([^\"']+)[\"'][^>]*>/i,\n\t\t\t\t/<video[^>]*>[\\s\\S]*?<source[^>]*src=[\"']([^\"']+)[\"'][^>]*>/i\n\t\t\t];\n\t\t\t\n\t\t\tfor (let regex of htmlMatchRegexes) {\n\t\t\t\tconst match = content.match(regex);\n\t\t\t\tif (match && match[1]) {\n\t\t\t\t\tconst url = match[1];\n\t\t\t\t\tif (this.isValidVideoUrl(url)) {\n\t\t\t\t\t\treturn url;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// 然后查找直接的URL\n\t\t\tfor (let regex of videoUrlRegexes) {\n\t\t\t\tconst matches = content.match(regex);\n\t\t\t\tif (matches && matches.length > 0) {\n\t\t\t\t\t// 检查每个匹配项是否是有效的视频URL\n\t\t\t\t\tfor (const url of matches) {\n\t\t\t\t\t\tif (this.isValidVideoUrl(url)) {\n\t\t\t\t\t\t\treturn url;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// 查找JSON格式中的URL\n\t\t\ttry {\n\t\t\t\tconst jsonMatches = content.match(/\"(https?:\\/\\/[^\"]+\\.(mp4|mov|m3u8))\"/gi);\n\t\t\t\tif (jsonMatches && jsonMatches.length > 0) {\n\t\t\t\t\tfor (let jsonMatch of jsonMatches) {\n\t\t\t\t\t\t// 提取URL并去除引号\n\t\t\t\t\t\tconst url = jsonMatch.replace(/^\"|\"$/g, '');\n\t\t\t\t\t\tif (this.isValidVideoUrl(url)) {\n\t\t\t\t\t\t\treturn url;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error('JSON解析错误:', e);\n\t\t\t}\n\t\t\t\n\t\t\treturn null;\n\t\t},\n\t\t\n\t\t// 检查URL是否是有效的视频URL\n\t\tisValidVideoUrl(url) {\n\t\t\tif (!url || typeof url !== 'string') return false;\n\t\t\t\n\t\t\t// 排除图片URL\n\t\t\tif (url.match(/\\.(jpg|jpeg|png|gif|webp|svg|bmp)($|\\?)/i)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t\n\t\t\t// 检查常见视频扩展名\n\t\t\tconst videoExtensions = ['.mp4', '.avi', '.mov', '.wmv', '.flv', '.mkv', '.webm', '.m3u8', '.3gp', '.rm', '.rmvb'];\n\t\t\tconst hasVideoExtension = videoExtensions.some(ext => url.toLowerCase().includes(ext));\n\t\t\t\n\t\t\t// 检查常见视频域名\n\t\t\tconst videoDomains = [\n\t\t\t\t'youku', 'youtube', 'vimeo', 'bilibili', 'qq.com/video', \n\t\t\t\t'weixin.qq', 'douyin', 'bspapp.com', 'ixigua.com', \n\t\t\t\t'kuaishou.com', 'cdn', 'mp4', '.video.'\n\t\t\t];\n\t\t\tconst hasVideoDomain = videoDomains.some(domain => url.toLowerCase().includes(domain));\n\t\t\t\n\t\t\t// 检查云存储路径\n\t\t\tconst isCloudPath = url.startsWith('cloud://') && videoExtensions.some(ext => url.toLowerCase().endsWith(ext));\n\t\t\t\n\t\t\t// 增加HLS和DASH流媒体格式检测\n\t\t\tconst isStreamingUrl = url.includes('.m3u8') || url.includes('.mpd');\n\t\t\t\n\t\t\treturn hasVideoExtension || hasVideoDomain || isCloudPath || isStreamingUrl;\n\t\t},\n\t\t\n\t\t// 分享到朋友圈 - 显示全屏引导\n\t\tshareToTimeline() {\n\t\t\tconsole.log('点击分享到朋友圈按钮，显示全屏弹窗');\n\t\t\t\n\t\t\t// 显示全屏弹窗\n\t\t\tthis.showFullScreenPopup = true;\n\t\t},\n\t\t\n\t\t// 关闭全屏弹窗\n\t\tcloseFullScreenPopup() {\n\t\t\tthis.showFullScreenPopup = false;\n\t\t},\n\t\t\n\t\t// 跳转到发布页面\n\t\tgoToPublish() {\n\t\t\tif (!this.userStore.userInfo.isLogin) {\n\t\t\t\treturn testLogin();\n\t\t\t}\n\t\t\t\n\t\t\t// 显示加载提示\n\t\t\tuni.showLoading({\n\t\t\t\ttitle: '正在跳转...',\n\t\t\t\tmask: true\n\t\t\t});\n\t\t\t\n\t\t\t// 使用setTimeout延迟执行，给系统一些时间处理之前的操作\n\t\t\tsetTimeout(() => {\n\t\t\t\tuni.navigateTo({\n\t\t\t\t\turl: '/pages/fabu/fabu',\n\t\t\t\t\tsuccess: () => {\n\t\t\t\t\t\tconsole.log('跳转到发布页面成功');\n\t\t\t\t\t\tuni.hideLoading();\n\t\t\t\t\t},\n\t\t\t\t\tfail: (err) => {\n\t\t\t\t\t\tconsole.error('发布页面跳转失败:', err);\n\t\t\t\t\t\tuni.hideLoading();\n\t\t\t\t\t\t\n\t\t\t\t\t\t// 尝试使用其他导航方式\n\t\t\t\t\t\tuni.redirectTo({\n\t\t\t\t\t\t\turl: '/pages/fabu/fabu',\n\t\t\t\t\t\t\tsuccess: () => {\n\t\t\t\t\t\t\t\tconsole.log('使用redirectTo跳转成功');\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tfail: (redirectErr) => {\n\t\t\t\t\t\t\t\tconsole.error('redirectTo也失败了:', redirectErr);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// 最后尝试使用reLaunch\n\t\t\t\t\t\t\t\tuni.reLaunch({\n\t\t\t\t\t\t\t\t\turl: '/pages/fabu/fabu',\n\t\t\t\t\t\t\t\t\tfail: (relaunchErr) => {\n\t\t\t\t\t\t\t\t\t\tconsole.error('所有导航方法都失败了:', relaunchErr);\n\t\t\t\t\t\t\t\t\t\tuni.showToast({\n\t\t\t\t\t\t\t\t\t\t\ttitle: '页面跳转失败，请重试',\n\t\t\t\t\t\t\t\t\t\t\ticon: 'none',\n\t\t\t\t\t\t\t\t\t\t\tduration: 2000\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}, 100); // 短暂延迟，让UI有时间响应\n\t\t},\n\t\t\n\t\t// 处理图片URL，确保可以正确加载\n\t\tprocessImageUrl(url) {\n\t\t\tif (!url) return getDefaultImage('default');\n\t\t\t\n\t\t\t// 如果是本地路径或临时路径，直接返回\n\t\t\tif (url.startsWith('/static/') || \n\t\t\t\turl.startsWith('wxfile://') || \n\t\t\t\turl.startsWith('http://tmp/')) {\n\t\t\t\treturn url;\n\t\t\t}\n\t\t\t\n\t\t\ttry {\n\t\t\t\t// 使用统一的域名配置工具处理URL\n\t\t\t\treturn fixImageUrl(url);\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error('处理图片URL出错:', e);\n\t\t\t\treturn getDefaultImage('default');\n\t\t\t}\n\t\t},\n\t\t\n\t\t// 从文章列表中提取最新的图片\n\t\textractLatestArticleImages() {\n\t\t\tconsole.log('提取最新文章图片');\n\t\t\t\n\t\t\t// 如果没有文章数据，直接返回\n\t\t\tif (!this.userArticleData || this.userArticleData.length === 0) {\n\t\t\t\tconsole.log('没有文章数据，无法提取图片');\n\t\t\t\tthis.latestArticleImages = [];\n\t\t\t\treturn [];\n\t\t\t}\n\t\t\t\n\t\t\t// 创建一个包含文章索引的数组，按照文章的创建时间降序排序（最新的优先）\n\t\t\tconst sortedArticleIndices = this.userArticleData\n\t\t\t\t.map((article, index) => ({ index, time: article.create_time || article.createTime || article.time || 0 }))\n\t\t\t\t.sort((a, b) => {\n\t\t\t\t\t// 尝试按照时间排序，如果时间相同或不存在，保持原有顺序\n\t\t\t\t\tif (typeof a.time === 'string' && typeof b.time === 'string') {\n\t\t\t\t\t\treturn new Date(b.time) - new Date(a.time);\n\t\t\t\t\t} else if (typeof a.time === 'number' && typeof b.time === 'number') {\n\t\t\t\t\t\treturn b.time - a.time;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn a.index - b.index; // 保持原有顺序\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.map(item => item.index);\n\t\t\t\n\t\t\t// 收集所有图片\n\t\t\tconst allImages = [];\n\t\t\t\n\t\t\t// 根据排序后的索引遍历文章，最多提取5张图片\n\t\t\tfor (let i = 0; i < sortedArticleIndices.length && allImages.length < 5; i++) {\n\t\t\t\tconst articleIndex = sortedArticleIndices[i];\n\t\t\t\tconst article = this.userArticleData[articleIndex];\n\t\t\t\t\n\t\t\t\t// 获取当前文章的所有图片\n\t\t\t\tconst articleImages = this.getArticleImages(article);\n\t\t\t\t\n\t\t\t\tif (articleImages && articleImages.length > 0) {\n\t\t\t\t\t// 添加到总图片集合，避免重复\n\t\t\t\t\tfor (let img of articleImages) {\n\t\t\t\t\t\tif (!allImages.includes(img) && allImages.length < 5) {\n\t\t\t\t\t\t\tallImages.push(img);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// 更新最新文章图片数组\n\t\t\tthis.latestArticleImages = allImages;\n\t\t\tconsole.log('提取到的最新文章图片:', this.latestArticleImages);\n\t\t\t\n\t\t\treturn this.latestArticleImages;\n\t\t},\n\t\t\n\t\t// 检查文章是否含有视频\n\t\tcheckArticleHasVideo(article) {\n\t\t\tif (!article) return false;\n\t\t\t\n\t\t\t// 检查常见的视频字段\n\t\t\tif (article.videoURL && typeof article.videoURL === 'string' && this.isValidVideoUrl(article.videoURL)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\t\n\t\t\t// 检查可能包含视频链接的其他字段\n\t\t\tconst possibleVideoFields = [\n\t\t\t\t'videoUrl',\n\t\t\t\t'video_url',\n\t\t\t\t'video',\n\t\t\t\t'videoSrc',\n\t\t\t\t'video_src',\n\t\t\t\t'url'\n\t\t\t];\n\t\t\t\n\t\t\tfor (let field of possibleVideoFields) {\n\t\t\t\tif (article[field] && typeof article[field] === 'string' && this.isValidVideoUrl(article[field])) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// 检查视频数组\n\t\t\tconst possibleVideoArrayFields = [\n\t\t\t\t'videos',\n\t\t\t\t'videoArr',\n\t\t\t\t'video_arr',\n\t\t\t\t'videoList',\n\t\t\t\t'video_list'\n\t\t\t];\n\t\t\t\n\t\t\tfor (let field of possibleVideoArrayFields) {\n\t\t\t\tif (article[field] && Array.isArray(article[field]) && article[field].length > 0) {\n\t\t\t\t\tconst videoItem = article[field][0];\n\t\t\t\t\tif (typeof videoItem === 'string' && this.isValidVideoUrl(videoItem)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t} else if (typeof videoItem === 'object') {\n\t\t\t\t\t\tconst possibleUrlProps = ['url', 'src', 'source', 'path', 'videoUrl'];\n\t\t\t\t\t\tfor (let prop of possibleUrlProps) {\n\t\t\t\t\t\t\tif (videoItem[prop] && typeof videoItem[prop] === 'string' && this.isValidVideoUrl(videoItem[prop])) {\n\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// 检查内容中是否有视频链接\n\t\t\tif (article.content) {\n\t\t\t\tconst videoUrlMatch = this.extractVideoUrlFromContent(article.content);\n\t\t\t\tif (videoUrlMatch) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\treturn false;\n\t\t},\n\t\t\n\t\t// 播放特定文章的视频\n\t\tplayArticleVideo(article) {\n\t\t\tif (!article) return;\n\t\t\t\n\t\t\t// 提取视频URL\n\t\t\tconst videoUrl = this.extractVideoUrlFromArticle(article);\n\t\t\t\n\t\t\tif (videoUrl) {\n\t\t\t\t// 设置视频URL并显示视频\n\t\t\t\tthis.videoUrl = videoUrl;\n\t\t\t\tthis.videoVisible = true;\n\t\t\t\tthis.userClosedVideo = false;\n\t\t\t\t\n\t\t\t\t// 在下一个渲染周期初始化视频上下文\n\t\t\t\tthis.$nextTick(() => {\n\t\t\t\t\tthis.initVideoContext();\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tconsole.log('正在播放文章视频:', videoUrl);\n\t\t\t} else {\n\t\t\t\tuni.showToast({\n\t\t\t\t\ttitle: '无法提取视频链接',\n\t\t\t\t\ticon: 'none'\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\t\n\t\t// 页面加载时搜索所有文章的视频\n\t\tasync searchAllVideosOnLoad() {\n\t\t\tconsole.log('正在搜索所有文章的视频...');\n\t\t\t\n\t\t\t// 创建一个数组存储所有找到的视频URL\n\t\t\tlet allFoundVideos = [];\n\t\t\t\n\t\t\t// 1. 首先从已加载的文章中搜索视频\n\t\t\tif (this.userArticleData && this.userArticleData.length > 0) {\n\t\t\t\tconsole.log(`从${this.userArticleData.length}篇已加载文章中搜索视频...`);\n\t\t\t\t\n\t\t\t\t// 遍历所有已加载的文章\n\t\t\t\tfor (let article of this.userArticleData) {\n\t\t\t\t\tconst videoUrl = this.extractVideoUrlFromArticle(article);\n\t\t\t\t\tif (videoUrl && this.isValidVideoUrl(videoUrl)) {\n\t\t\t\t\t\tconsole.log(`在文章(${article._id || '未知ID'})中找到视频: ${videoUrl}`);\n\t\t\t\t\t\tif (!allFoundVideos.includes(videoUrl)) {\n\t\t\t\t\t\t\tallFoundVideos.push(videoUrl);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// 2. 判断是否需要加载更多文章来搜索视频\n\t\t\tconst totalArticles = this.totalArticleCount || 0;\n\t\t\tconst loadedArticles = this.userArticleData ? this.userArticleData.length : 0;\n\t\t\t\n\t\t\t// 如果已经找到视频或已加载所有文章，则不需要加载更多\n\t\t\tif (allFoundVideos.length > 0 || loadedArticles >= totalArticles) {\n\t\t\t\tconsole.log(`已找到${allFoundVideos.length}个视频，不需要加载更多文章`);\n\t\t\t} else if (totalArticles > loadedArticles && this.hasMore) {\n\t\t\t\t// 需要加载更多文章\n\t\t\t\tconsole.log(`已加载${loadedArticles}篇文章，共有${totalArticles}篇，尝试加载更多来搜索视频...`);\n\t\t\t\t\n\t\t\t\ttry {\n\t\t\t\t\t// 临时存储当前页码\n\t\t\t\t\tconst originalPageNo = this.pageNo;\n\t\t\t\t\tconst maxPagesToLoad = 3; // 最多额外加载3页，防止过多请求\n\t\t\t\t\t\n\t\t\t\t\t// 尝试最多额外加载3页来搜索视频\n\t\t\t\t\tfor (let i = 0; i < maxPagesToLoad && this.hasMore && allFoundVideos.length === 0; i++) {\n\t\t\t\t\t\tthis.pageNo++;\n\t\t\t\t\t\tconsole.log(`加载第${this.pageNo}页文章来搜索视频...`);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// 加载新一页的文章\n\t\t\t\t\t\tawait this.getArticelList(false);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// 从新加载的文章中搜索视频\n\t\t\t\t\t\tif (this.userArticleData && this.userArticleData.length > loadedArticles) {\n\t\t\t\t\t\t\t// 只检查新加载的文章\n\t\t\t\t\t\t\tconst newArticles = this.userArticleData.slice(loadedArticles);\n\t\t\t\t\t\t\tconsole.log(`从新加载的${newArticles.length}篇文章中搜索视频...`);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tfor (let article of newArticles) {\n\t\t\t\t\t\t\t\tconst videoUrl = this.extractVideoUrlFromArticle(article);\n\t\t\t\t\t\t\t\tif (videoUrl && this.isValidVideoUrl(videoUrl)) {\n\t\t\t\t\t\t\t\t\tconsole.log(`在新加载文章(${article._id || '未知ID'})中找到视频: ${videoUrl}`);\n\t\t\t\t\t\t\t\t\tif (!allFoundVideos.includes(videoUrl)) {\n\t\t\t\t\t\t\t\t\t\tallFoundVideos.push(videoUrl);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t// 找到视频后，可以选择停止搜索\n\t\t\t\t\t\t\t\t\tif (allFoundVideos.length >= 5) { // 限制搜索的视频数量，避免过多\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error('加载更多文章搜索视频时出错:', err);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t// 保存找到的所有视频\n\t\t\tif (allFoundVideos.length > 0) {\n\t\t\t\tconsole.log(`共找到${allFoundVideos.length}个视频链接:`, allFoundVideos);\n\t\t\t\t\n\t\t\t\t// 更新视频缓存\n\t\t\t\tthis.videoUrlCache = allFoundVideos;\n\t\t\t\t\n\t\t\t\t// 自动播放第一个视频（除非用户之前关闭了视频）\n\t\t\t\tif (!this.userClosedVideo) {\n\t\t\t\t\tthis.videoUrl = allFoundVideos[0];\n\t\t\t\t\tthis.videoVisible = true;\n\t\t\t\t\t\n\t\t\t\t\t// 在下一个渲染周期初始化视频上下文\n\t\t\t\t\tthis.$nextTick(() => {\n\t\t\t\t\t\tthis.initVideoContext();\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// 发出事件通知找到了视频\n\t\t\t\tuni.$emit('videosFound', { \n\t\t\t\t\tcount: allFoundVideos.length,\n\t\t\t\t\tvideos: allFoundVideos\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\treturn allFoundVideos;\n\t\t\t} else {\n\t\t\t\tconsole.log('未找到任何视频链接');\n\t\t\t\treturn [];\n\t\t\t}\n\t\t},\n\t},\n\t\n\t// 分享给朋友\n\tonShareAppMessage() {\n\t\t// 使用统一的分享信息方法\n\t\treturn this.getShareInfo();\n\t},\n\t\n\t// 分享到朋友圈\n\tonShareTimeline() {\n\t\t// 获取统一的分享信息\n\t\tconst shareInfo = this.getTimelineShareInfo();\n\t\t\n\t\t// 构建朋友圈分享信息\n\t\treturn shareInfo;\n\t}\n}\n</script>\n\n<template>\n\t<view class=\"userArticleList\">\n\t\t\n\t\t<!-- 添加微信开放能力按钮 (隐藏但功能可用) -->\n\t\t<button \n\t\t\topen-type=\"share\" \n\t\t\tstyle=\"position: absolute; width: 0; height: 0; padding: 0; margin: 0; opacity: 0;\"\n\t\t></button>\n\t\t\n\t\t<!-- 用于生成分享图的Canvas (隐藏) -->\n\t\t<canvas canvas-id=\"shareCanvas\" style=\"width: 750px; height: 600px; position: absolute; left: -2000px; top: 0;\"></canvas>\n\t\t\n\t\t<scroll-view \n\t\t\t@scrolltolower=\"scrolltolower\" \n\t\t\t:scroll-y=\"true\" \n\t\t\tclass=\"scroll-view-article\"\n\t\t\trefresher-enabled\n\t\t\t:refresher-triggered=\"isRefreshing\"\n\t\t\t@refresherrefresh=\"onRefresh\"\n\t\t\tshow-scrollbar=\"true\"\n\t\t\tenable-passive=\"true\" \n\t\t\tenable-back-to-top=\"true\"\n\t\t\tenhanced=\"true\"\n\t\t\tbounces=\"true\"\n\t\t\trefresher-threshold=\"80\"\n\t\t\trefresher-background=\"#f2f2f2\">\n\t\t\t<view class=\"content\">\n\t\t\t\t<!-- 用户信息头部 -->\n\t\t\t\t<view class=\"head\">\n\t\t\t\t\t<user-header @contact=\"handleContact\" @publish=\"goToPublish\" :articleTotal=\"articleTotal\"\n\t\t\t\t\t\t:userInfo=\"userArticleInfo\"></user-header>\n\t\t\t\t</view>\n\t\t\t\t\n\t\t\t\t<!-- 视频播放组件 -->\n\t\t\t\t<view class=\"video-container\" v-if=\"videoUrl && videoUrl.length > 0\">\n\t\t\t\t\t<video \n\t\t\t\t\t\tid=\"myVideo\"\n\t\t\t\t\t\t:src=\"videoUrl\"\n\t\t\t\t\t\tclass=\"video-player\"\n\t\t\t\t\t\tobject-fit=\"cover\" \n\t\t\t\t\t\tcontrols \n\t\t\t\t\t\tautoplay\n\t\t\t\t\t\t@play=\"onVideoPlay\"\n\t\t\t\t\t\t@pause=\"onVideoPause\"\n\t\t\t\t\t\t@ended=\"onVideoEnded\"\n\t\t\t\t\t\t@error=\"onVideoError\"\n\t\t\t\t\t\t:loop=\"false\"\n\t\t\t\t\t\tenable-progress-gesture\n\t\t\t\t\t\tenable-play-gesture\n\t\t\t\t\t\tshow-fullscreen-btn\n\t\t\t\t\t\tshow-play-btn\n\t\t\t\t\t\tshow-center-play-btn\n\t\t\t\t\t\t@fullscreenchange=\"handleFullscreenChange\">\n\t\t\t\t\t</video>\n\t\t\t\t\t<!-- 关闭按钮 -->\n\t\t\t\t\t<view class=\"video-close-btn\" @click=\"hideVideo\">\n\t\t\t\t\t\t<text class=\"close-icon\">×</text>\n\t\t\t\t\t</view>\n\t\t\t\t</view>\n\t\t\t\t\n\t\t\t\t<!-- 文章列表 -->\n\t\t\t\t<articleItem v-if=\"userArticleData && userArticleData.length > 0\"\n\t\t\t\t\t@preview=\"(url, urls) => previewImage(urls, url)\" @contact=\"handleContact\"\n\t\t\t\t\t@delete=\"handleDelete\" v-for=\"item in userArticleData\" :item=\"item\" :key=\"item._id\"\n\t\t\t\t\t:avatarClickEnabled=\"avatarClickEnabled\">\n\t\t\t\t\t<!-- 添加视频标记 -->\n\t\t\t\t\t<template v-if=\"item.hasVideo\" #video-badge>\n\t\t\t\t\t\t<view class=\"video-badge\" @click.stop=\"playArticleVideo(item)\">\n\t\t\t\t\t\t\t<text class=\"video-badge-icon\">▶</text>\n\t\t\t\t\t\t\t<text class=\"video-badge-text\">视频</text>\n\t\t\t\t\t\t</view>\n\t\t\t\t\t</template>\n\t\t\t\t</articleItem>\n\t\t\t\t<view v-else class=\"empty-state\">\n\t\t\t\t\t<text>暂无文章</text>\n\t\t\t\t</view>\n\t\t\t\t\n\t\t\t\t<!-- 加载状态 - 优化显示 -->\n\t\t\t\t<view style=\"margin-bottom: 120rpx; padding-bottom: 90rpx;\">\n\t\t\t\t\t<uni-load-more color=\"#d6d6d6\" :status=\"status\" :content-text=\"loadMoreText\" />\n\t\t\t\t</view>\n\t\t\t\t\n\t\t\t\t<!-- 底部安全区域间距 -->\n\t\t\t\t<view class=\"safe-area-inset-bottom\"></view>\n\t\t\t</view>\n\t\t</scroll-view>\n\t\t\n\t\t<!-- 优化后的分享按钮 -->\n\t\t<view class=\"share-buttons\">\n\t\t\t<!-- 分享到朋友圈按钮 - 显示提示引导用户 -->\n\t\t\t<button class=\"share-btn share-to-group\" @tap=\"shareToTimeline\">\n\t\t\t\t<text class=\"icon lishuai-iconfontzhizuobiaozhunbduan36\"></text>\n\t\t\t\t<text class=\"btn-text\">分享朋友圈</text>\n\t\t\t</button>\n\t\t\t\n\t\t\t<!-- 发给好友按钮 - 直接使用open-type=\"share\"调起转发 -->\n\t\t\t<button class=\"share-btn share-to-friend\" open-type=\"share\">\n\t\t\t\t<text class=\"icon lishuai-weixin\"></text>\n\t\t\t\t<text class=\"btn-text\">发给好友</text>\n\t\t\t</button>\n\t\t</view>\n\t\t\n\t\t<!-- 全屏弹窗 -->\n\t\t<view class=\"full-screen-popup\" v-if=\"showFullScreenPopup\" @tap=\"closeFullScreenPopup\">\n\t\t\t<view class=\"popup-content\" @tap.stop>\n\t\t\t\t<view class=\"popup-header\">\n\t\t\t\t\t<text class=\"popup-title\">分享到朋友圈</text>\n\t\t\t\t\t<text class=\"popup-close\" @tap=\"closeFullScreenPopup\">×</text>\n\t\t\t\t</view>\n\t\t\t\t<view class=\"popup-body\">\n\t\t\t\t\t<image class=\"popup-image\" :src=\"dynamicShareImage || defaultShareImage\" mode=\"aspectFit\"></image>\n\t\t\t\t\t<view class=\"popup-text\">\n\t\t\t\t\t\t<text>点击右上角 \"...\" 按钮</text>\n\t\t\t\t\t\t<text>选择 \"分享到朋友圈\"</text>\n\t\t\t\t\t</view>\n\t\t\t\t</view>\n\t\t\t\t<view class=\"popup-footer\">\n\t\t\t\t\t<button class=\"popup-btn\" @tap=\"closeFullScreenPopup\">我知道了</button>\n\t\t\t\t</view>\n\t\t\t</view>\n\t\t</view>\n\t</view>\n</template>\n\n<style lang=\"scss\" scoped>\n\t.userArticleList {\n\t\theight: 100vh;\n\t\tbackground-color: $pyq-pages-bg-color;\n\t\tposition: relative;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\ttouch-action: pan-y; /* 优化触摸响应 */\n\n\t\t.content {\n\t\t\tpadding-bottom: env(safe-area-inset-bottom);\n\t\t\tpadding: 20rpx;\n\t\t\t-webkit-overflow-scrolling: touch; /* iOS流畅滚动 */\n\n\t\t\t.head {\n\t\t\t\tmargin-bottom: 2rpx;\n\t\t\t}\n\t\t\t\n\t\t\t.empty-state {\n\t\t\t\tdisplay: flex;\n\t\t\t\tjustify-content: center;\n\t\t\t\talign-items: center;\n\t\t\t\tpadding: 40rpx 0;\n\t\t\t\tcolor: #999;\n\t\t\t\tfont-size: 28rpx;\n\t\t\t}\n\t\t}\n\t\t\n\t\t.scroll-view-article {\n\t\t\tflex: 1;\n\t\t\theight: 0; /* 使用flex布局时，设置height为0使其自动扩展 */\n\t\t\tpadding-bottom: 120rpx; /* 为底部按钮留出空间 */\n\t\t\t-webkit-overflow-scrolling: touch; /* iOS流畅滚动 */\n\t\t}\n\t\t\n\t\t/* 文本省略样式 */\n\t\t.ellipsis {\n\t\t\twhite-space: nowrap;\n\t\t\toverflow: hidden;\n\t\t\ttext-overflow: ellipsis;\n\t\t}\n\t\t\n\t\t.ellipsis-2 {\n\t\t\tdisplay: -webkit-box;\n\t\t\t-webkit-box-orient: vertical;\n\t\t\t-webkit-line-clamp: 2;\n\t\t\toverflow: hidden;\n\t\t\ttext-overflow: ellipsis;\n\t\t\tword-break: break-all;\n\t\t}\n\t\t\n\t\t/* 正方形图片样式 */\n\t\t.square-image {\n\t\t\twidth: 100%;\n\t\t\theight: 100%;\n\t\t\tborder-radius: 8rpx;\n\t\t\tobject-fit: cover; /* 确保图片填充容器并裁剪到最短边 */\n\t\t}\n\t\t\n\t\t/* 分享标题显示区域 */\n\t\t.share-titles {\n\t\t\tbackground-color: #fff;\n\t\t\tpadding: 20rpx;\n\t\t\tmargin-bottom: 10rpx;\n\t\t\tborder-bottom: 1px solid #eee;\n\t\t\t\n\t\t\t.title-box {\n\t\t\t\tmargin-bottom: 10rpx;\n\t\t\t\t\n\t\t\t\t.title-label {\n\t\t\t\t\tfont-size: 24rpx;\n\t\t\t\t\tcolor: #666;\n\t\t\t\t\tmargin-bottom: 4rpx;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t.title-content {\n\t\t\t\t\tfont-size: 28rpx;\n\t\t\t\t\tcolor: #333;\n\t\t\t\t\tpadding: 10rpx;\n\t\t\t\t\tbackground-color: #f8f8f8;\n\t\t\t\t\tborder-radius: 8rpx;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t/* 优化后的分享按钮样式 */\n\t\t.share-buttons {\n\t\t\tposition: fixed;\n\t\t\tbottom: 80rpx;\n\t\t\tleft: 0;\n\t\t\tright: 0;\n\t\t\tdisplay: flex;\n\t\t\tjustify-content: center;\n\t\t\tgap: 30rpx;\n\t\t\tz-index: 100;\n\t\t\tpadding: 0 80rpx;\n\t\t}\n\t\t\n\t\t.share-btn {\n\t\t\tflex: 1;\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\t\t\tjustify-content: center;\n\t\t\theight: 80rpx;\n\t\t\tborder-radius: 40rpx;\n\t\t\tborder: none;\n\t\t\tcolor: #ffffff;\n\t\t\tfont-size: 28rpx;\n\t\t\tfont-weight: 500;\n\t\t\tbox-shadow: 0 4rpx 12rpx rgba(0, 0, 0, 0.15);\n\t\t\ttransition: all 0.3s ease;\n\t\t\t\n\t\t\t&::after {\n\t\t\t\tborder: none; /* 移除按钮默认边框 */\n\t\t\t}\n\t\t\t\n\t\t\t.icon {\n\t\t\t\tfont-size: 38rpx;\n\t\t\t\tcolor: #FFFFFF;\n\t\t\t}\n\t\t\t\n\t\t\t.btn-text {\n\t\t\t\tmargin-left: 10rpx;\n\t\t\t}\n\t\t\t\n\t\t\t&.share-to-group {\n\t\t\t\tbackground: linear-gradient(135deg, #f7991e, #f39b16); /* 渐变橙色 */\n\t\t\t\t\n\t\t\t\t&:active {\n\t\t\t\t\ttransform: scale(0.95);\n\t\t\t\t\tbox-shadow: 0 2rpx 6rpx rgba(0, 0, 0, 0.15);\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t&.share-to-friend {\n\t\t\t\tbackground: linear-gradient(135deg, #5ecc80, #4fc08d); /* 渐变绿色 */\n\t\t\t\t\n\t\t\t\t&:active {\n\t\t\t\t\ttransform: scale(0.95);\n\t\t\t\t\tbox-shadow: 0 2rpx 6rpx rgba(0, 0, 0, 0.15);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t.safe-area-inset-bottom {\n\t\t\theight: 30rpx;\n\t\t\tpadding-bottom: env(safe-area-inset-bottom);\n\t\t}\n\t\t\n\t\t/* 防止滚动时出现白色间隙 */\n\t\toverflow: hidden;\n\t}\n\t\n\t/* 视频播放器相关样式 */\n\t.video-container {\n\t\tposition: relative;\n\t\tmargin: 20rpx auto 20rpx;\n\t\tborder-radius: 12rpx;\n\t\toverflow: hidden;\n\t}\n\t\n\t.video-player {\n\t\twidth: 100%;\n\t\theight: 420rpx; /* 16:9 宽高比 */\n\t\tbackground-color: #000;\n\t\tborder-radius: 5rpx;\n\t}\n\t\n\t.video-close-btn {\n\t\tposition: absolute;\n\t\ttop: 20rpx;\n\t\tright: 20rpx;\n\t\twidth: 60rpx;\n\t\theight: 60rpx;\n\t\tbackground-color: rgba(0, 0, 0, 0.6);\n\t\tborder-radius: 40rpx;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t\tz-index: 101;\n\t\ttransition: all 0.2s ease;\n\t\tbox-shadow: 0 0 10rpx rgba(0, 0, 0, 0.3);\n\t\t\n\t\t.close-icon {\n\t\t\tcolor: #fff;\n\t\t\tfont-size: 50rpx;\n\t\t\tfont-weight: bold;\n\t\t}\n\t\t\n\t\t&:active {\n\t\t\tbackground-color: rgba(0, 0, 0, 0.8);\n\t\t\ttransform: scale(0.95);\n\t\t}\n\t}\n\t\n\t\n\t\n\t.placeholder-content {\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\talign-items: center;\n\t\tjustify-content: center;\n\t}\n\t\n\t.placeholder-icon {\n\t\tcolor: #fff;\n\t\tfont-size: 50rpx;\n\t\tmargin-bottom: 10rpx;\n\t}\n\t\n\t.placeholder-text {\n\t\tcolor: #fff;\n\t\tfont-size: 28rpx;\n\t\tfont-weight: 500;\n\t}\n\t\n\t/* 分享引导蒙层样式 */\n\t.share-guide-overlay {\n\t\tposition: fixed;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\tright: 0;\n\t\tbottom: 0;\n\t\tz-index: 9999;\n\t\t\n\t\t/* 半透明黑色背景 */\n\t\t.overlay-bg {\n\t\t\tposition: absolute;\n\t\t\ttop: 0;\n\t\t\tleft: 0;\n\t\t\tright: 0;\n\t\t\tbottom: 0;\n\t\t\tbackground-color: rgba(0, 0, 0, 0.8);\n\t\t}\n\t\t\n\t\t/* 顶部引导提示 */\n\t\t.top-guide {\n\t\t\tposition: absolute;\n\t\t\ttop: 120rpx;\n\t\t\tright: 120rpx;\n\t\t\tdisplay: flex;\n\t\t\talign-items: center;\n\t\t\tbackground-color: #fff;\n\t\t\tborder-radius: 40rpx;\n\t\t\tpadding: 10rpx 25rpx;\n\t\t\tbox-shadow: 0 4rpx 8rpx rgba(0, 0, 0, 0.2);\n\t\t\tz-index: 1;\n\t\t\t\n\t\t\t.guide-number {\n\t\t\t\twidth: 36rpx;\n\t\t\t\theight: 36rpx;\n\t\t\t\tline-height: 36rpx;\n\t\t\t\ttext-align: center;\n\t\t\t\tbackground-color: #ff6b00;\n\t\t\t\tcolor: #fff;\n\t\t\t\tborder-radius: 50%;\n\t\t\t\tfont-size: 26rpx;\n\t\t\t\tfont-weight: bold;\n\t\t\t\tmargin-right: 10rpx;\n\t\t\t}\n\t\t\t\n\t\t\t.guide-text {\n\t\t\t\tcolor: #333;\n\t\t\t\tfont-size: 28rpx;\n\t\t\t\tfont-weight: 500;\n\t\t\t}\n\t\t}\n\t\t\n\t\t/* 引导箭头线 */\n\t\t.guide-arrow-line {\n\t\t\tposition: absolute;\n\t\t\ttop: 180rpx;\n\t\t\tright: 160rpx;\n\t\t\twidth: 300rpx;\n\t\t\theight: 700rpx;\n\t\t\t\n\t\t\t/* 使用伪元素创建虚线 */\n\t\t\t&::before {\n\t\t\t\tcontent: '';\n\t\t\t\tposition: absolute;\n\t\t\t\ttop: 0;\n\t\t\t\tright: 40rpx;\n\t\t\t\theight: 100%;\n\t\t\t\twidth: 8rpx;\n\t\t\t\tbackground: transparent;\n\t\t\t\tborder: none;\n\t\t\t\tbox-shadow: 6rpx 0 0 #fff;\n\t\t\t\tborder-radius: 0 0 0 100%;\n\t\t\t\ttransform: rotate(-20deg);\n\t\t\t}\n\t\t\t\n\t\t\t/* 箭头尖端 */\n\t\t\t.arrow-end {\n\t\t\t\tposition: absolute;\n\t\t\t\tbottom: 20rpx;\n\t\t\t\tright: 270rpx;\n\t\t\t\twidth: 24rpx;\n\t\t\t\theight: 24rpx;\n\t\t\t\tborder-right: 6rpx solid #fff;\n\t\t\t\tborder-bottom: 6rpx solid #fff;\n\t\t\t\ttransform: rotate(45deg);\n\t\t\t}\n\t\t}\n\t\t\n\t\t/* 底部引导文字 */\n\t\t.bottom-guide {\n\t\t\tposition: absolute;\n\t\t\tbottom: 400rpx;\n\t\t\tleft: 0;\n\t\t\tright: 0;\n\t\t\ttext-align: center;\n\t\t\tcolor: #fff;\n\t\t\tfont-size: 36rpx;\n\t\t\tfont-weight: 500;\n\t\t\tline-height: 1.8;\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\t\t\talign-items: center;\n\t\t\t\n\t\t\t.close-tip {\n\t\t\t\tmargin-top: 60rpx;\n\t\t\t\tfont-size: 24rpx;\n\t\t\t\tcolor: rgba(255, 255, 255, 0.7);\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/* 全屏弹窗样式 */\n\t.full-screen-popup {\n\t\tposition: fixed;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\tright: 0;\n\t\tbottom: 0;\n\t\tbackground-color: rgba(0, 0, 0, 0.75);\n\t\tz-index: 9999;\n\t\tdisplay: flex;\n\t\tjustify-content: center;\n\t\talign-items: center;\n\t\t\n\t\t.popup-content {\n\t\t\twidth: 80%;\n\t\t\tbackground-color: #fff;\n\t\t\tborder-radius: 24rpx;\n\t\t\toverflow: hidden;\n\t\t\tbox-shadow: 0 4rpx 16rpx rgba(0, 0, 0, 0.2);\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\t\t}\n\t\t\n\t\t.popup-header {\n\t\t\tposition: relative;\n\t\t\tpadding: 30rpx;\n\t\t\ttext-align: center;\n\t\t\tborder-bottom: 1px solid #f0f0f0;\n\t\t\t\n\t\t\t.popup-title {\n\t\t\t\tfont-size: 34rpx;\n\t\t\t\tfont-weight: bold;\n\t\t\t\tcolor: #333;\n\t\t\t}\n\t\t\t\n\t\t\t.popup-close {\n\t\t\t\tposition: absolute;\n\t\t\t\tright: 30rpx;\n\t\t\t\ttop: 30rpx;\n\t\t\t\tfont-size: 40rpx;\n\t\t\t\tcolor: #999;\n\t\t\t\tline-height: 1;\n\t\t\t}\n\t\t}\n\t\t\n\t\t.popup-body {\n\t\t\tpadding: 40rpx;\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: column;\n\t\t\talign-items: center;\n\t\t\t\n\t\t\t.popup-image {\n\t\t\t\twidth: 100%;\n\t\t\t\theight: 400rpx;\n\t\t\t\tmargin-bottom: 30rpx;\n\t\t\t\tborder-radius: 12rpx;\n\t\t\t\tbackground-color: #f5f5f5;\n\t\t\t}\n\t\t\t\n\t\t\t.popup-text {\n\t\t\t\tdisplay: flex;\n\t\t\t\tflex-direction: column;\n\t\t\t\talign-items: center;\n\t\t\t\t\n\t\t\t\ttext {\n\t\t\t\t\tfont-size: 32rpx;\n\t\t\t\t\tcolor: #333;\n\t\t\t\t\tmargin-bottom: 16rpx;\n\t\t\t\t\t\n\t\t\t\t\t&:last-child {\n\t\t\t\t\t\tcolor: #ff8c3e;\n\t\t\t\t\t\tfont-weight: bold;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t.popup-footer {\n\t\t\tpadding: 30rpx;\n\t\t\tdisplay: flex;\n\t\t\tjustify-content: center;\n\t\t\t\n\t\t\t.popup-btn {\n\t\t\t\tbackground: linear-gradient(135deg, #ff9f43, #ff8c3e);\n\t\t\t\tcolor: #fff;\n\t\t\t\tfont-size: 32rpx;\n\t\t\t\tfont-weight: 500;\n\t\t\t\tpadding: 20rpx 80rpx;\n\t\t\t\tborder-radius: 40rpx;\n\t\t\t\tborder: none;\n\t\t\t\t\n\t\t\t\t&::after {\n\t\t\t\t\tborder: none;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/* 增加加载更多组件与底部的距离 */\n\t.loading-more-spacing {\n\t\tmargin-bottom: 90rpx; /* 增加到60rpx */\n\t\tmargin-top: 40rpx; /* 增加顶部边距 */\n\t\tpadding-bottom: 60rpx; /* 增加底部内边距 */\n\t\tposition: relative; /* 添加相对定位，便于添加装饰元素 */\n\t\t\n\t\t/* 确保内部uni-load-more组件有足够间距 */\n\t\t:deep(.uni-load-more) {\n\t\t\tpadding: 40rpx 0;\n\t\t\t\n\t\t\t/* 自定义文本样式 */\n\t\t\t.uni-load-more__text {\n\t\t\t\tfont-size: 26rpx;\n\t\t\t\tcolor: #888888;\n\t\t\t}\n\t\t\t\n\t\t\t/* 自定义loading动画样式 */\n\t\t\t.uni-load-more__img {\n\t\t\t\twidth: 36rpx !important;\n\t\t\t\theight: 36rpx !important;\n\t\t\t}\n\t\t}\n\t\t\n\t\t/* 添加上下装饰线 */\n\t\t&::before, &::after {\n\t\t\tcontent: '';\n\t\t\tposition: absolute;\n\t\t\tleft: 50%;\n\t\t\ttransform: translateX(-50%);\n\t\t\twidth: 120rpx;\n\t\t\theight: 2rpx;\n\t\t\tbackground: linear-gradient(to right, transparent, #e0e0e0, transparent);\n\t\t}\n\t\t\n\t\t&::before {\n\t\t\ttop: 0;\n\t\t}\n\t\t\n\t\t&::after {\n\t\t\tbottom: 0;\n\t\t}\n\t}\n\t\n\t.video-badge {\n\t\tposition: absolute;\n\t\ttop: 10rpx;\n\t\tright: 10rpx;\n\t\tdisplay: flex;\n\t\talign-items: center;\n\t\tbackground-color: rgba(0, 0, 0, 0.6);\n\t\tpadding: 4rpx 16rpx;\n\t\tborder-radius: 30rpx;\n\t\tz-index: 10;\n\t\t\n\t\t.video-badge-icon {\n\t\t\tcolor: #fff;\n\t\t\tfont-size: 20rpx;\n\t\t\tmargin-right: 6rpx;\n\t\t}\n\t\t\n\t\t.video-badge-text {\n\t\t\tcolor: #fff;\n\t\t\tfont-size: 22rpx;\n\t\t}\n\t\t\n\t\t&:active {\n\t\t\tbackground-color: rgba(0, 0, 0, 0.8);\n\t\t\ttransform: scale(0.96);\n\t\t}\n\t}\n</style>\n\n<!-- 移除全局样式中的标签选择器，避免微信小程序的限制 -->\n<!-- 注意：这些样式应该在组件内部使用类选择器实现，而不是在这里全局覆盖 -->","import MiniProgramPage from 'D:/代码测试/wx2/pages/userArticleList/userArticleList.vue'\nwx.createPage(MiniProgramPage)"],"names":["getDefaultImage","useUserInfoStore","uni","uniCloud","fixImageUrl","testLogin"],"mappings":"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"}