{"version":3,"file":"isLogin.js","sources":["utils/isLogin.js"],"sourcesContent":["// 未登录跳转\nimport { useUserInfoStore } from '@/store/user.js'\n\nexport const testLogin = () => {\n\t// 从pinia获取用户信息\n\tconst userStore = useUserInfoStore();\n\t\n\tconsole.log('检查登录状态 - store中的用户信息:', userStore.userInfo);\n\t\n\t// 首先检查store中是否已登录\n\tif (userStore.userInfo && userStore.userInfo.uid) {\n\t\tconsole.log('用户已在store中登录，UID:', userStore.userInfo.uid);\n\t\treturn true; // 已登录\n\t}\n\t\n\t// 如果store中没有，再检查本地存储\n\tconst userInfo = uni.getStorageSync('userInfo');\n\tconsole.log('检查登录状态 - 本地存储中的用户信息:', userInfo);\n\t\n\tif (userInfo && userInfo.uid) {\n\t\t// 如果本地存储有但store中没有，更新store\n\t\tconsole.log('从本地存储中找到用户信息，正在更新store');\n\t\tuserStore.setUserInfo(userInfo);\n\t\treturn true; // 已登录\n\t}\n\t\n\t// 未登录，弹出提示\n\tuni.showModal({\n\t\ttitle: '提示',\n\t\tcontent: '请登录后继续',\n\t\tconfirmColor: '#399bfe',\n\t\tconfirmText: '去登录',\n\t\tsuccess: (res) => {\n\t\t\tif (res.confirm) {\n\t\t\t\t// 获取当前页面路径和参数\n\t\t\t\tconst pages = getCurrentPages();\n\t\t\t\tconst currentPage = pages[pages.length - 1];\n\t\t\t\tconst currentRoute = currentPage.route;\n\t\t\t\tconst currentOptions = currentPage.options || {};\n\t\t\t\t\n\t\t\t\t// 构建完整的当前页面URL（包含参数）\n\t\t\t\tlet redirectUrl = '/' + currentRoute;\n\t\t\t\tconst queryParams = [];\n\t\t\t\t\n\t\t\t\tfor (const key in currentOptions) {\n\t\t\t\t\tif (currentOptions.hasOwnProperty(key)) {\n\t\t\t\t\t\tqueryParams.push(`${key}=${encodeURIComponent(currentOptions[key])}`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (queryParams.length > 0) {\n\t\t\t\t\tredirectUrl += '?' + queryParams.join('&');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// 使用navigateTo而不是reLaunch，保留当前页面历史\n\t\t\t\tuni.navigateTo({\n\t\t\t\t\turl: `/pages/login/login?redirect=${encodeURIComponent(redirectUrl)}`\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t});\n\t\n\treturn false; // 未登录\n}"],"names":["useUserInfoStore","uni"],"mappings":";;;AAGY,MAAC,YAAY,MAAM;AAE9B,QAAM,YAAYA,WAAAA;AAElBC,gBAAA,MAAA,MAAA,OAAA,yBAAY,yBAAyB,UAAU,QAAQ;AAGvD,MAAI,UAAU,YAAY,UAAU,SAAS,KAAK;AACjDA,+DAAY,qBAAqB,UAAU,SAAS,GAAG;AACvD,WAAO;AAAA,EACP;AAGD,QAAM,WAAWA,cAAAA,MAAI,eAAe,UAAU;AAC9CA,gBAAY,MAAA,MAAA,OAAA,0BAAA,wBAAwB,QAAQ;AAE5C,MAAI,YAAY,SAAS,KAAK;AAE7BA,kBAAAA,MAAY,MAAA,OAAA,0BAAA,wBAAwB;AACpC,cAAU,YAAY,QAAQ;AAC9B,WAAO;AAAA,EACP;AAGDA,gBAAAA,MAAI,UAAU;AAAA,IACb,OAAO;AAAA,IACP,SAAS;AAAA,IACT,cAAc;AAAA,IACd,aAAa;AAAA,IACb,SAAS,CAAC,QAAQ;AACjB,UAAI,IAAI,SAAS;AAEhB,cAAM,QAAQ;AACd,cAAM,cAAc,MAAM,MAAM,SAAS,CAAC;AAC1C,cAAM,eAAe,YAAY;AACjC,cAAM,iBAAiB,YAAY,WAAW;AAG9C,YAAI,cAAc,MAAM;AACxB,cAAM,cAAc,CAAA;AAEpB,mBAAW,OAAO,gBAAgB;AACjC,cAAI,eAAe,eAAe,GAAG,GAAG;AACvC,wBAAY,KAAK,GAAG,GAAG,IAAI,mBAAmB,eAAe,GAAG,CAAC,CAAC,EAAE;AAAA,UACpE;AAAA,QACD;AAED,YAAI,YAAY,SAAS,GAAG;AAC3B,yBAAe,MAAM,YAAY,KAAK,GAAG;AAAA,QACzC;AAGDA,sBAAAA,MAAI,WAAW;AAAA,UACd,KAAK,+BAA+B,mBAAmB,WAAW,CAAC;AAAA,QACxE,CAAK;AAAA,MACD;AAAA,IACD;AAAA,EACH,CAAE;AAED,SAAO;AACR;;"}